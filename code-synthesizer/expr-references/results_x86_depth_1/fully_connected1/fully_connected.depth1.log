mkdir fully_connected/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g fully_connected/src/fully_connected_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o fully_connected/bin/fully_connected_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./fully_connected/bin/fully_connected_generator \
	-t 0 \
	-o fully_connected/bin \
	-g fully_connected \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f fully_connected target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t109]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
rm: cannot remove '/tmp/base_4805_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi32 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi32 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_4805

base_4805_grammar.rkt
/tmp/base_4805_grammar.rkt
Writing [{ 
"name": "base_4805" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4805_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4805_spec.JSON /tmp/base_4805_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4805 ... 

Grammar:
#<procedure:base_4805>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xd740e123521cb529168fe7f24f9872e686fe1efb4e2f2e737e6248cabd1969c4 256) (bv #xb1ed32a93c2a2b4b5b1459f9b2fc38397a45bc2a566afb7f3804d698312a944f 256))
(vec-add (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x892e13cc8e46e07471a441eb0294ab1f0143db25a49a29f2b6671f62ee43fe13 256)
invoke-spec-lane with env: #((bv #xd740e123521cb529168fe7f24f9872e686fe1efb4e2f2e737e6248cabd1969c4 256) (bv #xb1ed32a93c2a2b4b5b1459f9b2fc38397a45bc2a566afb7f3804d698312a944f 256))
Concrete counter examples:
(#((bv #xd740e123521cb529168fe7f24f9872e686fe1efb4e2f2e737e6248cabd1969c4 256) (bv #xb1ed32a93c2a2b4b5b1459f9b2fc38397a45bc2a566afb7f3804d698312a944f 256)) #((bv #xfd084e311553f141e7c6a96077716c399a3ed6b01cf9917e7f2f1fe7f6fa7bb3 256) (bv #xb34065c2196097f755be087bf6f0d62ad8575d955fa9fcd5392f93d5a4a638df 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xd740e123521cb529168fe7f24f9872e686fe1efb4e2f2e737e6248cabd1969c4 256) (bv #xb1ed32a93c2a2b4b5b1459f9b2fc38397a45bc2a566afb7f3804d698312a944f 256))
Spec Produced:
(bv #xee43fe13 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfd084e311553f141e7c6a96077716c399a3ed6b01cf9917e7f2f1fe7f6fa7bb3 256) (bv #xb34065c2196097f755be087bf6f0d62ad8575d955fa9fcd5392f93d5a4a638df 256))
Spec Produced:
(bv #x9ba0b492 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-addrm: cannot remove '/tmp/base_2900_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_mullo_epi32 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm256_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
Adding:  _mm256_dpbusds_epi32 with score: 6 belonging to target agnostic class _mm_dpbusds_epi32
Adding:  _mm256_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm256_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm256_dpbusd_epi32 with score: 6 belonging to target agnostic class _mm256_dpbusd_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 11
 '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_2900

base_2900_grammar.rkt
/tmp/base_2900_grammar.rkt
Writing [{ 
"name": "base_2900" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2900_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2900_spec.JSON /tmp/base_2900_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2900 ... 

Grammar:
#<procedure:base_2900>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8fb79f4852b1d1bd07189f4395cbf4f43a2c6d1e5860171605fd45e76668a402 256) (bv #xb8461f512618754152abcdb5e2f45755edacbd3fc32742f42c6d7342a89d7feb 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x03131dc8fbb9a1fd93b2415fed87410433a6006247e3acf8c90dca8ed0a58bd6 256)
invoke-spec-lane with env: #((bv #x8fb79f4852b1d1bd07189f4395cbf4f43a2c6d1e5860171605fd45e76668a402 256) (bv #xb8461f512618754152abcdb5e2f45755edacbd3fc32742f42c6d7342a89d7feb 256))
Concrete counter examples:
(#((bv #x8fb79f4852b1d1bd07189f4395cbf4f43a2c6d1e5860171605fd45e76668a402 256) (bv #xb8461f512618754152abcdb5e2f45755edacbd3fc32742f42c6d7342a89d7feb 256)) #((bv #x1ff77baf345a2ae68d432253d554c2b99c601a847b67ee0ba83d7bf63d4809cd 256) (bv #x006563042cd445446aadca61a37cb42e65316dca8be0b96d1db2cc8df8e3419c 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8fb79f4852b1d1bd07189f4395cbf4f43a2c6d1e5860171605fd45e76668a402 256) (bv #xb8461f512618754152abcdb5e2f45755edacbd3fc32742f42c6d7342a89d7feb 256))
Spec Produced:
(bv #xd0a58bd6 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1ff77baf345a2ae68d432253d554c2b99c601a847b67ee0ba83d7bf63d4809cd 256) (bv #x006563042cd445446aadca61a37cb42e65316dca8be0b96d1db2cc8df8e3419c 256))
Spec Produced:
(bv #xeb2a05ec 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_1791_spec.JSON': No such file or directory
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 128
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastd_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24
#(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-mul '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)
Synthesis step completed!
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_1791

base_1791_grammar.rkt
/tmp/base_1791_grammar.rkt
Writing [{ 
"name": "base_1791" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1791_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1791_spec.JSON /tmp/base_1791_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1791 ... 

Grammar:
#<procedure:base_1791>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xffffc7f8ffffe67fffffc18600007bc70000065affff8cc0ffffdd76ffffdcdf 256)
invoke-spec-lane with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
Concrete counter examples:
(#((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128)) #((bv #x36369a2509033d1fe1f83f644c17dd68 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
Spec Produced:
(bv #xffffdcdf 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x36369a2509033d1fe1f83f644c17dd68 128))
Spec Produced:
(bv #xffffdd68 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 64 16 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 64 16 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4)

invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$5)

invoke-spec with env: #(sym_bv$5)
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (sign-extend (extract 127 112 sym_bv$5) (bitvector 32)) (sign-extend (extract 111 96 sym_bv$5) (bitvector 32))) (sign-extend (extract 95 80 sym_bv$5) (bitvector 32))) (sign-extend (extract 79 64 sym_bv$5) (bitvector 32))) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$5 (bv #x0000000000000000ffffffff00008000 128)])
Verification failed :(
#((bv #x0000000000000000ffffffff00008000 128))
invoke-spec with env: #((bv #x0000000000000000ffffffff00008000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000rm: cannot remove '/tmp/base_1597_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 2
Num Broadcasts: 23
Num Computes: 15
Adding:  _mm_sub_epi16 with score: 5 belonging to target agnostic class _mm_sub_pi16
Adding:  _mm_hsub_epi16 with score: 5 belonging to target agnostic class _mm_hsub_epi32
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 22
 256)
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256) 256 
	synthesized result produced: (bv #xffffffffffffffffffffffffffffffff0000000000000000ffffffffffff8000 256) 256

invoke-spec with env: #((bv #x0000000000000000ffffffff00008000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xffffc7f8ffffe67fffffc18600007bc70000065affff8cc0ffffdd76ffffdcdf 256)
invoke-spec-lane with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
Concrete counter examples:
(#((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128)) #((bv #x36369a2509033d1fe1f83f644c17dd68 128)) #((bv #x0000000000000000ffffffff00008000 128)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc7f8e67fc1867bc7065a8cc0dd76dcdf 128))
Spec Produced:
(bv #xffffdcdf 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x36369a2509033d1fe1f83f644c17dd68 128))
Spec Produced:
(bv #xffffdd68 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x0000000000000000ffffffff00008000 128))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6)

invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int32x8 '(buf int16 128))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_1597

base_1597_grammar.rkt
/tmp/base_1597_grammar.rkt
Writing [{ 
"name": "base_1597" , 
"semantics": [ "(extract bvsub sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1597_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1597_spec.JSON /tmp/base_1597_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1597 ... 

Grammar:
#<procedure:base_1597>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x160cd532b664298fd16c2d8b11c23d06 128) (bv #xd4e1724f9cd6ac8d7dd242dfb115f46e 128))
(vec-sub (buffer #<procedure:buffer-fn> 'int16 128) (bufferrm: cannot remove '/tmp/base_2081_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 15
 #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x412b62e3198e7d02539aeaac60ad4898 128)
invoke-spec-lane with env: #((bv #x160cd532b664298fd16c2d8b11c23d06 128) (bv #xd4e1724f9cd6ac8d7dd242dfb115f46e 128))
Concrete counter examples:
(#((bv #x160cd532b664298fd16c2d8b11c23d06 128) (bv #xd4e1724f9cd6ac8d7dd242dfb115f46e 128)) #((bv #x18876236c7911a39ecc353dfb3a49e8b 128) (bv #x76b742ba83ec1497bb756df96b2d29a5 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x160cd532b664298fd16c2d8b11c23d06 128) (bv #xd4e1724f9cd6ac8d7dd242dfb115f46e 128))
Spec Produced:
(bv #x4898 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x18876236c7911a39ecc353dfb3a49e8b 128) (bv #x76b742ba83ec1497bb756df96b2d29a5 128))
Spec Produced:
(bv #x74e6 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-sub '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
get-expr-grammar with base_name: base_2081

base_2081_grammar.rkt
/tmp/base_2081_grammar.rkt
Writing [{ 
"name": "base_2081" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2081_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2081_spec.JSON /tmp/base_2081_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2081 ... 

Grammar:
#<procedure:base_2081>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf5e141d22d43ac51 64))
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Spec result
(bv #x00f500e1004100d2002d004300ac0051 128)
invoke-spec-lane with env: #((bv #xf5e141d22d43ac51 64))
Concrete counter examples:
(#((bv #xf5e141d22d43ac51 64)) #((bv #x6c7d90b8d79eedd1 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf5e141d22d43ac51 64))
Spec Produced:
(bv #x0051 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x6c7d90b8d79eedd1 64))
Spec Produced:
(bv #x00d1 16)
Synthesize by lane...
Z3 Synthesized Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$9)

invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5577_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _m_packuswb with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_packs_pu16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_set1_pi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _m_punpcklbw with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_unpacklo_pi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _m_packsswb with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_packs_pi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
#(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
invoke-spec-lane with env: #(sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x8 '(buf uint8 64))
#(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)
Synthesis step completed!
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
get-expr-grammar with base_name: base_5577

base_5577_grammar.rkt
/tmp/base_5577_grammar.rkt
Writing [{ 
"name": "base_5577" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5577_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5577_spec.JSON /tmp/base_5577_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5577 ... 

Grammar:
#<procedure:base_5577>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x33 8))
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Spec result
(bv #x3333333333333333 64)
invoke-spec-lane with env: #((bv #x33 8))
Concrete counter examples:
(#((bv #x33 8)) #((bv #x58 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x33 8))
Spec Produced:
(bv #x33 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x58 8))
Spec Produced:
(bv #x58 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$10)

invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
invoke-spec-lane with env: #(sym_bv$10)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 '(buf uint8 8))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
get-expr-grammar with base_name: base_1824

base_1824_grammar.rkt
/tmp/base_1824_grammar.rkt
Writing [{ 
"name": "base_1824" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_16"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1824_spec.JSON
rm: cannot remove '/tmp/base_1824_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_set1_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1824_spec.JSON /tmp/base_1824_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1824 ... 

Grammar:
#<procedure:base_1824>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xedb6 16))
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Spec result
(bv #xedb6edb6edb6edb6edb6edb6edb6edb6 128)
invoke-spec-lane with env: #((bv #xedb6 16))
Concrete counter examples:
(#((bv #xedb6 16)) #((bv #x0392 16)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xedb6 16))
Spec Produced:
(bv #xedb6 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0392 16))
Spec Produced:
(bv #x0392 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11)

invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int16 16))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leavesrm: cannot remove '/tmp/base_8860_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_8860

base_8860_grammar.rkt
/tmp/base_8860_grammar.rkt
Writing [{ 
"name": "base_8860" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8860_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8860_spec.JSON /tmp/base_8860_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_8860 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) 

spec produced: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

invoke_ref_lane for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) 

spec produced: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

invoke ref result: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

Concrete counter examples:
(#((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) #((bv #xeb5c6f6a9f69e63e 64) (bv #x73e19f303e725d0f 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) 

spec produced: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

invoke ref result: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

Spec Produced:
(bv #x28 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xf1f6f05cfe1c5aed 64) (bv #xe23298c7309fd928 64)) 

spec produced: (bv #xf1e2f632f0985cc7fe301c9f5ad9ed28 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xeb5c6f6a9f69e63e 64) (bv #x73e19f303e725d0f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xeb5c6f6a9f69e63e 64) (bv #x73e19f303e725d0f 64)) 
rm: cannot remove '/tmp/base_2428_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

spec produced: (bv #xeb735ce16f9f6a309f3e6972e65d3e0f 128)

invoke ref result: (bv #xeb735ce16f9f6a309f3e6972e65d3e0f 128)

Spec Produced:
(bv #x0f 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xeb5c6f6a9f69e63e 64) (bv #x73e19f303e725d0f 64)) 

spec produced: (bv #xeb735ce16f9f6a309f3e6972e65d3e0f 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$12 sym_bv$13)

invoke_ref for swizzles on input #(sym_bv$12 sym_bv$13) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$12) (extract 63 56 sym_bv$13)) (concat (extract 55 48 sym_bv$12) (extract 55 48 sym_bv$13))) (concat (extract 47 40 sym_bv$12) (extract 47 40 sym_bv$13))) (concat (extract 39 32 ...) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_2428

base_2428_grammar.rkt
/tmp/base_2428_grammar.rkt
Writing [{ 
"name": "base_2428" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2428_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2428_spec.JSON /tmp/base_2428_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2428 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.0
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t265, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t266) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t270))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t270 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 24.520433seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t109]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 0

Optimized expression: (int32x8)hydride.node.0((int32x8)multiplied[ramp(multiplied.s1.c.ci.ci*8, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t109]) - int16((uint8)input_zero))
Starting synthesis for expr: 1
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t110]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_2577_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_2577

base_2577_grammar.rkt
/tmp/base_2577_grammar.rkt
Writing [{ 
"name": "base_2577" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2577_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2577_spec.JSON /tmp/base_2577_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2577 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) 

spec produced: (bv #xde858ecd0d010d4c5316c327e7e73610 128)

invoke_ref_lane for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) 

spec produced: (bv #xde858ecd0d010d4c5316c327e7e73610 128)
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xde858ecd0d010d4c5316c327e7e73610 128)

Concrete counter examples:
(#((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) #((bv #x9169c4344abb7cfb 64) (bv #x56b46c16393fff4d 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) 

spec produced: (bv #xde858ecd0d010d4c5316c327e7e73610 128)

invoke ref result: (bv #xde858ecd0d010d4c5316c327e7e73610 128)

Spec Produced:
(bv #x10 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xde8e0d0d53c3e736 64) (bv #x85cd014c1627e710 64)) 

spec produced: (bv #xde858ecd0d010d4c5316c327e7e73610 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x9169c4344abb7cfb 64) (bv #x56b46c16393fff4d 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x9169c4344abb7cfb 64) (bv #x56b46c16393fff4d 64)) 

spec produced: (bv #x915669b4c46c34164a39bb3f7cfffb4d 128)

invoke ref result: (bv #x915669b4c46c34164a39bb3f7cfffb4d 128)

Spec Produced:
(bv #x4d 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x9169c4344abb7cfb 64) (bv #x56b46c16393fff4d 64)) 

spec produced: (bv #x915669b4c46c34164a39bb3f7cfffb4d 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_3827

base_3827_grammar.rkt
/tmp/base_3827_grammar.rkt
Writing [{ 
"name": "base_3827" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3827_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3827_spec.JSON /tmp/base_3827_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_3827 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.1
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t274, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t276) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t280))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t280 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.613470seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t110]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 1

Optimized expression: (int32x8)hydride.node.1((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 32, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t110]) - int16((uint8)input_zero))
Starting synthesis for expr: 2
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t111]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_4384_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_4384

base_4384_grammar.rkt
/tmp/base_4384_grammar.rkt
Writing [{ 
"name": "base_4384" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4384_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4384_spec.JSON /tmp/base_4384_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4384 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) 

spec produced: (bv #xd7714dc2163bb87d3705914f6795c600 128)

invoke_ref_lane for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) 

spec produced: (bv #xd7714dc2163bb87d3705914f6795c600 128)
rm: cannot remove '/tmp/base_7123_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xd7714dc2163bb87d3705914f6795c600 128)

Concrete counter examples:
(#((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) #((bv #x5566385212c47205 64) (bv #xd95106b3f7683c36 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) 

spec produced: (bv #xd7714dc2163bb87d3705914f6795c600 128)

invoke ref result: (bv #xd7714dc2163bb87d3705914f6795c600 128)

Spec Produced:
(bv #x00 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xd74d16b8379167c6 64) (bv #x71c23b7d054f9500 64)) 

spec produced: (bv #xd7714dc2163bb87d3705914f6795c600 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x5566385212c47205 64) (bv #xd95106b3f7683c36 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x5566385212c47205 64) (bv #xd95106b3f7683c36 64)) 

spec produced: (bv #x55d96651380652b312f7c468723c0536 128)

invoke ref result: (bv #x55d96651380652b312f7c468723c0536 128)

Spec Produced:
(bv #x36 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x5566385212c47205 64) (bv #xd95106b3f7683c36 64)) 

spec produced: (bv #x55d96651380652b312f7c468723c0536 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_7123

base_7123_grammar.rkt
/tmp/base_7123_grammar.rkt
Writing [{ 
"name": "base_7123" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7123_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7123_spec.JSON /tmp/base_7123_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_7123 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.2
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t284, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t286) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t290))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t290 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 12.917461seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t111]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 2

Optimized expression: (int32x8)hydride.node.2((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 64, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t111]) - int16((uint8)input_zero))
Starting synthesis for expr: 3
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t112]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_1138_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_1138

base_1138_grammar.rkt
/tmp/base_1138_grammar.rkt
Writing [{ 
"name": "base_1138" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1138_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1138_spec.JSON /tmp/base_1138_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_1138 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) 

spec produced: (bv #xa4a75134a2f57593ad93ed60b386601a 128)

invoke_ref_lane for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) 

spec produced: (bv #xa4a75134a2f57593ad93ed60b386601a 128)
rm: cannot remove '/tmp/base_4526_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xa4a75134a2f57593ad93ed60b386601a 128)

Concrete counter examples:
(#((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) #((bv #x622abf65bd313c1e 64) (bv #xa93ff762aa09e610 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) 

spec produced: (bv #xa4a75134a2f57593ad93ed60b386601a 128)

invoke ref result: (bv #xa4a75134a2f57593ad93ed60b386601a 128)

Spec Produced:
(bv #x1a 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xa451a275adedb360 64) (bv #xa734f5939360861a 64)) 

spec produced: (bv #xa4a75134a2f57593ad93ed60b386601a 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x622abf65bd313c1e 64) (bv #xa93ff762aa09e610 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x622abf65bd313c1e 64) (bv #xa93ff762aa09e610 64)) 

spec produced: (bv #x62a92a3fbff76562bdaa31093ce61e10 128)

invoke ref result: (bv #x62a92a3fbff76562bdaa31093ce61e10 128)

Spec Produced:
(bv #x10 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x622abf65bd313c1e 64) (bv #xa93ff762aa09e610 64)) 

spec produced: (bv #x62a92a3fbff76562bdaa31093ce61e10 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_4526

base_4526_grammar.rkt
/tmp/base_4526_grammar.rkt
Writing [{ 
"name": "base_4526" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4526_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4526_spec.JSON /tmp/base_4526_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_4526 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.3
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t294, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t296) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t300))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t300 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.213023seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t112]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 3

Optimized expression: (int32x8)hydride.node.3((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 96, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t112]) - int16((uint8)input_zero))
Starting synthesis for expr: 4
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t113]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_9811_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_9811

base_9811_grammar.rkt
/tmp/base_9811_grammar.rkt
Writing [{ 
"name": "base_9811" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9811_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9811_spec.JSON /tmp/base_9811_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_9811 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) 

spec produced: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)

invoke_ref_lane for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) 

spec produced: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)
rm: cannot remove '/tmp/base_6610_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)

Concrete counter examples:
(#((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) #((bv #x4c59b74f8692e442 64) (bv #x633e077cc12331d2 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) 

spec produced: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)

invoke ref result: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)

Spec Produced:
(bv #xce 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xccc93d5a12bb57ba 64) (bv #x2b88bb3fd32ef9ce 64)) 

spec produced: (bv #xcc2bc9883dbb5a3f12d3bb2e57f9bace 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x4c59b74f8692e442 64) (bv #x633e077cc12331d2 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x4c59b74f8692e442 64) (bv #x633e077cc12331d2 64)) 

spec produced: (bv #x4c63593eb7074f7c86c19223e43142d2 128)

invoke ref result: (bv #x4c63593eb7074f7c86c19223e43142d2 128)

Spec Produced:
(bv #xd2 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x4c59b74f8692e442 64) (bv #x633e077cc12331d2 64)) 

spec produced: (bv #x4c63593eb7074f7c86c19223e43142d2 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_6610

base_6610_grammar.rkt
/tmp/base_6610_grammar.rkt
Writing [{ 
"name": "base_6610" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6610_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6610_spec.JSON /tmp/base_6610_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_6610 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.4
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t304, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t306) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t310))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t310 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.006057seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t113]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 4

Optimized expression: (int32x8)hydride.node.4((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 128, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t113]) - int16((uint8)input_zero))
Starting synthesis for expr: 5
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t114]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_2957_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_2957

base_2957_grammar.rkt
/tmp/base_2957_grammar.rkt
Writing [{ 
"name": "base_2957" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2957_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2957_spec.JSON /tmp/base_2957_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2957 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) 

spec produced: (bv #x4a045248c02732b80b4959be44a294e2 128)

invoke_ref_lane for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) 

spec produced: (bv #x4a045248c02732b80b4959be44a294e2 128)
rm: cannot remove '/tmp/base_8858_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #x4a045248c02732b80b4959be44a294e2 128)

Concrete counter examples:
(#((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) #((bv #xd4118b42cac88eca 64) (bv #x97b7cf3734aecd12 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) 

spec produced: (bv #x4a045248c02732b80b4959be44a294e2 128)

invoke ref result: (bv #x4a045248c02732b80b4959be44a294e2 128)

Spec Produced:
(bv #xe2 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x4a52c0320b594494 64) (bv #x044827b849bea2e2 64)) 

spec produced: (bv #x4a045248c02732b80b4959be44a294e2 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xd4118b42cac88eca 64) (bv #x97b7cf3734aecd12 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xd4118b42cac88eca 64) (bv #x97b7cf3734aecd12 64)) 

spec produced: (bv #xd49711b78bcf4237ca34c8ae8ecdca12 128)

invoke ref result: (bv #xd49711b78bcf4237ca34c8ae8ecdca12 128)

Spec Produced:
(bv #x12 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xd4118b42cac88eca 64) (bv #x97b7cf3734aecd12 64)) 

spec produced: (bv #xd49711b78bcf4237ca34c8ae8ecdca12 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_8858

base_8858_grammar.rkt
/tmp/base_8858_grammar.rkt
Writing [{ 
"name": "base_8858" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8858_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8858_spec.JSON /tmp/base_8858_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_8858 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.5
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t314, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t316) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t320))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t320 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.584996seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t114]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 5

Optimized expression: (int32x8)hydride.node.5((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 160, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t114]) - int16((uint8)input_zero))
Starting synthesis for expr: 6
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t115]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_234_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_234

base_234_grammar.rkt
/tmp/base_234_grammar.rkt
Writing [{ 
"name": "base_234" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_234_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_234_spec.JSON /tmp/base_234_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_234 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) 

spec produced: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)

invoke_ref_lane for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) 

spec produced: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)
rm: cannot remove '/tmp/base_2345_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)

Concrete counter examples:
(#((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) #((bv #xecedc049e0ba126f 64) (bv #x1dac4fe490a0e05c 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) 

spec produced: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)

invoke ref result: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)

Spec Produced:
(bv #x69 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xfdebb1c5ba1ac05e 64) (bv #xfdaa2b12a8f63d69 64)) 

spec produced: (bv #xfdfdebaab12bc512baa81af6c03d5e69 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xecedc049e0ba126f 64) (bv #x1dac4fe490a0e05c 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xecedc049e0ba126f 64) (bv #x1dac4fe490a0e05c 64)) 

spec produced: (bv #xec1dedacc04f49e4e090baa012e06f5c 128)

invoke ref result: (bv #xec1dedacc04f49e4e090baa012e06f5c 128)

Spec Produced:
(bv #x5c 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xecedc049e0ba126f 64) (bv #x1dac4fe490a0e05c 64)) 

spec produced: (bv #xec1dedacc04f49e4e090baa012e06f5c 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_2345

base_2345_grammar.rkt
/tmp/base_2345_grammar.rkt
Writing [{ 
"name": "base_2345" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2345_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2345_spec.JSON /tmp/base_2345_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2345 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.6
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t324, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t326) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t330))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t330 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.768011seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t115]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 6

Optimized expression: (int32x8)hydride.node.6((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 192, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t115]) - int16((uint8)input_zero))
Starting synthesis for expr: 7
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t116]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_8479

base_8479_grammar.rkt
/tmp/base_8479_grammar.rkt
Writing [{ 
"name": "base_8479" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8479_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8479_spec.JSON /tmp/base_8479_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_8479 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) 

spec produced: (bv #xfa900108078f3f0a448414b45c0f2b56 128)

invoke_ref_lane for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) 

spec produced: (bv #xfa900108078f3f0a448414b45c0f2b56 128)
rm: cannot remove '/tmp/base_225_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #xfa900108078f3f0a448414b45c0f2b56 128)

Concrete counter examples:
(#((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) #((bv #x62bee6e1e977afba 64) (bv #xc9d49f7bd1c52d9f 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) 

spec produced: (bv #xfa900108078f3f0a448414b45c0f2b56 128)

invoke ref result: (bv #xfa900108078f3f0a448414b45c0f2b56 128)

Spec Produced:
(bv #x56 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xfa01073f44145c2b 64) (bv #x90088f0a84b40f56 64)) 

spec produced: (bv #xfa900108078f3f0a448414b45c0f2b56 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x62bee6e1e977afba 64) (bv #xc9d49f7bd1c52d9f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x62bee6e1e977afba 64) (bv #xc9d49f7bd1c52d9f 64)) 

spec produced: (bv #x62c9bed4e69fe17be9d177c5af2dba9f 128)

invoke ref result: (bv #x62c9bed4e69fe17be9d177c5af2dba9f 128)

Spec Produced:
(bv #x9f 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x62bee6e1e977afba 64) (bv #xc9d49f7bd1c52d9f 64)) 

spec produced: (bv #x62c9bed4e69fe17be9d177c5af2dba9f 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_225

base_225_grammar.rkt
/tmp/base_225_grammar.rkt
Writing [{ 
"name": "base_225" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_225_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_225_spec.JSON /tmp/base_225_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_225 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x01 8)) <8 x i8>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.7
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>
; (reg 1) <8 x i8>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t334, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t336) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t340))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t340 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.674691seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t116]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 7

Optimized expression: (int32x8)hydride.node.7((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 224, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t116]) - int16((uint8)input_zero))
Starting synthesis for expr: 8
Expression before lower intrinsic: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8)widening_mul((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)), x8(int16((uint8)input[t117]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8((int16x8)widening_sub((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)], x8((uint8)filter_zero)))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero))))
Lower Intrinsic on call: widening_sub
Lowered Expression: (int16x8((uint8x8)filter[ramp((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x, filter.stride.1, 8)]) - int16x8(x8((uint8)filter_zero)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> int32 256) #(struct:vec-mul #(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:int32x8 #(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))) #(struct:int32x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-sub #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:int16x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8))))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sub '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x01 8))
 64
 8)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x8 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8))
========================================
Original Halide Sub-Expression:
(int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
 64
 8)
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8))
========================================
Original Halide Sub-Expression:
(vec-sub
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8))))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x01 8))
  64
  8)
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
  64
  8)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-sub
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_sub_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x01 8))
   64
   8)
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
   64
   8)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000rm: cannot remove '/tmp/base_3605_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-sub
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
 (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_sub_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x01 8))
    64
    8)
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
    64
    8)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_sub_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_sub_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x01 8))
     64
     8)
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 64 8)
     64
     8)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (vec-mul
  (int32x8
   (vec-sub
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (int16x8 (x8 (buffer #<procedure:buffer-fn> 'uint8 8)))))
  (int32x8 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x01 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_3605

base_3605_grammar.rkt
/tmp/base_3605_grammar.rkt
Writing [{ 
"name": "base_3605" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3605_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3605_spec.JSON /tmp/base_3605_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_3605 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) 

spec produced: (bv #x2c9c95123706e18c9f365edb167f7273 128)

invoke_ref_lane for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) 

spec produced: (bv #x2c9c95123706e18c9f365edb167f7273 128)
rm: cannot remove '/tmp/base_9581_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

invoke ref result: (bv #x2c9c95123706e18c9f365edb167f7273 128)

Concrete counter examples:
(#((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) #((bv #x5b714a1d194ab630 64) (bv #x241d744544abb45f 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) 

spec produced: (bv #x2c9c95123706e18c9f365edb167f7273 128)

invoke ref result: (bv #x2c9c95123706e18c9f365edb167f7273 128)

Spec Produced:
(bv #x73 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x2c9537e19f5e1672 64) (bv #x9c12068c36db7f73 64)) 

spec produced: (bv #x2c9c95123706e18c9f365edb167f7273 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #x5b714a1d194ab630 64) (bv #x241d744544abb45f 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #x5b714a1d194ab630 64) (bv #x241d744544abb45f 64)) 

spec produced: (bv #x5b24711d4a741d4519444aabb6b4305f 128)

invoke ref result: (bv #x5b24711d4a741d4519444aabb6b4305f 128)

Spec Produced:
(bv #x5f 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #x5b714a1d194ab630 64) (bv #x241d744544abb45f 64)) 

spec produced: (bv #x5b24711d4a741d4519444aabb6b4305f 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$0 sym_bv$1)

invoke_ref for swizzles on input #(sym_bv$0 sym_bv$1) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$0) (extract 63 56 sym_bv$1)) (concat (extract 55 48 sym_bv$0) (extract 55 48 sym_bv$1))) (concat (extract 47 40 sym_bv$0) (extract 47 40 sym_bv$1))) (concat (extract 39 32 sym_bv$0) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 64 8) 64 8) 

get-swizzle-expr-grammar with base_name: base_9581

base_9581_grammar.rkt
/tmp/base_9581_grammar.rkt
Writing [{ 
"name": "base_9581" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9581_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9581_spec.JSON /tmp/base_9581_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_9581 ... 

(hash
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8))
========================================
; (reg (bv #x01 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i16>

(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

Writing [; hydride.node.8
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 1) <8 x i8>
; (reg 0) <8 x i32>
; (reg 2) <1 x i8>
; (reg 3) <1 x i16>


(_mm256_add_epi8_dsl 
(reg 0)  
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_sub_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 1)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  64  8  );<8 x i8>
  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  );<8 x i32>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Expression before InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Expression after InlineLets: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Expression before abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Input expression to synthesize: ((int32x8)multiplied[ramp(t344, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8(t346) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8((int16)t350))))
Cast operation into: int32x8
Cast operation into: int16x8
Cast operation into: int16x8
filter_zero maps to reg_2
Cast operation into: int32x8
t350 maps to reg_3
Synthesis completed with return code:	0
Synthesis took 13.461556seconds ...
Expression after replacae abstraction: ((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)] + (int32x8((int16x8((uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))]) - int16x8(x8((uint8)filter_zero))))*int32x8(x8(int16((uint8)input[t117]) - int16((uint8)input_zero)))))
Generating Call with type: int32x8 and lanes 8
Ending synthesis for expr: 8

Optimized expression: (int32x8)hydride.node.8((int32x8)multiplied[ramp((multiplied.s1.c.ci.ci*8) + 256, 1, 8) aligned(8, 0)], (uint8x8)filter[x8((((multiplied.s1.c.ci.ci*8) + t108)*filter.stride.1) + multiplied.s1.r9$x) + (x8(filter.stride.1)*ramp(0, 1, 8))], (uint8)filter_zero, int16((uint8)input[t117]) - int16((uint8)input_zero))
Starting synthesis for expr: 9
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffffrm: cannot remove '/tmp/base_7892_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 18
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 19
 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_7892

base_7892_grammar.rkt
/tmp/base_7892_grammar.rkt
Writing [{ 
"name": "base_7892" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7892_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7892_spec.JSON /tmp/base_7892_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7892 ... 

Grammar:
#<procedure:base_7892>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x744068b28c89acd2dbcc68cf2302dd6e 128) (bv #x2ef6b54aec48b04a92b11b9fe41c8d38 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x744068b2ec48b04adbcc68cf2302dd6e 128)
invoke-spec-lane with env: #((bv #x744068b28c89acd2dbcc68cf2302dd6e 128) (bv #x2ef6b54aec48b04a92b11b9fe41c8d38 128))
Concrete counter examples:
(#((bv #x744068b28c89acd2dbcc68cf2302dd6e 128) (bv #x2ef6b54aec48b04a92b11b9fe41c8d38 128)) #((bv #x51b7ba53da51a045afca8f6ba78cb5c4 128) (bv #x47cff70a778795505cd1af84cf7a371d 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x744068b28c89acd2dbcc68cf2302dd6e 128) (bv #x2ef6b54aec48b04a92b11b9fe41c8d38 128))
Spec Produced:
(bv #xdd6e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x51b7ba53da51a045afca8f6ba78cb5c4 128) (bv #x47cff70a778795505cd1af84cf7a371d 128))
Spec Produced:
(bv #x371d 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
rm: cannot remove '/tmp/base_7085_spec.JSON': No such file or directory
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_7085

base_7085_grammar.rkt
/tmp/base_7085_grammar.rkt
Writing [{ 
"name": "base_7085" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7085_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7085_spec.JSON /tmp/base_7085_grammar.rkt 8 0Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_min_epi16 with score: 5 belonging to target agnostic class _mm256_min_epi16
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 21

Generated Grammar File
Dynamically importing from base_7085 ... 

Grammar:
#<procedure:base_7085>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x57e1f69508f5c63d6d07f347274d9c9c 128) (bv #x4fa4ab0961db51048d583fa5ff537a4f 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x4fa4ab0908f5c63d8d58f347ff539c9c 128)
invoke-spec-lane with env: #((bv #x57e1f69508f5c63d6d07f347274d9c9c 128) (bv #x4fa4ab0961db51048d583fa5ff537a4f 128))
Concrete counter examples:
(#((bv #x57e1f69508f5c63d6d07f347274d9c9c 128) (bv #x4fa4ab0961db51048d583fa5ff537a4f 128)) #((bv #xd6d62702ad9cdb9a33d85c77b5a9f1a1 128) (bv #x1553db36766586e0b98f6ad2587d8cac 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x57e1f69508f5c63d6d07f347274d9c9c 128) (bv #x4fa4ab0961db51048d583fa5ff537a4f 128))
Spec Produced:
(bv #x9c9c 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd6d62702ad9cdb9a33d85c77b5a9f1a1 128) (bv #x1553db36766586e0b98f6ad2587d8cac 128))
Spec Produced:
(bv #x8cac 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shrrm: cannot remove '/tmp/base_6505_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 6
Num Broadcasts: 19
Num Computes: 15
17 < 18
Adding:  _mm_hadd_epi16 with score: 5 belonging to target agnostic class _mm_hadd_epi16
Adding:  _mm_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_adds_epi16 with score: 5 belonging to target agnostic class _m_paddsb
Adding:  _mm_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm_hadds_epi16 with score: 5 belonging to target agnostic class _mm_hadds_epi16
Adding:  _mm_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 25
 #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_6505

base_6505_grammar.rkt
/tmp/base_6505_grammar.rkt
Writing [{ 
"name": "base_6505" , 
"semantics": [ "(extract bvadd sign-extend #<procedure:bvaddnsw> #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6505_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6505_spec.JSON /tmp/base_6505_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6505 ... 

Grammar:
#<procedure:base_6505>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xaa3df6e0988d9684dfeab385a6b8003f 128) (bv #xf1c4fcb10e32bf7ab79691691a90d3cd 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x9c01f391a6bf7fff97807fffc148d40c 128)
invoke-spec-lane with env: #((bv #xaa3df6e0988d9684dfeab385a6b8003f 128) (bv #xf1c4fcb10e32bf7ab79691691a90d3cd 128))
Concrete counter examples:
(#((bv #xaa3df6e0988d9684dfeab385a6b8003f 128) (bv #xf1c4fcb10e32bf7ab79691691a90d3cd 128)) #((bv #xac6ba370fd1bd35f86105be83bcfc4c0 128) (bv #xd07fc975f19fac30edee0455c2ff504e 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xaa3df6e0988d9684dfeab385a6b8003f 128) (bv #xf1c4fcb10e32bf7ab79691691a90d3cd 128))
Spec Produced:
(bv #xd40c 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xac6ba370fd1bd35f86105be83bcfc4c0 128) (bv #xd07fc975f19fac30edee0455c2ff504e 128))
Spec Produced:
(bv #x150e 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-sat-add '(buf int16 128) '(buf int16 128))
#(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)
Synthesis step completed!
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_9220

base_9220_grammar.rkt
/tmp/base_9220_grammar.rkt
Writing [{ 
"name": "base_9220" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9220_spec.JSON
rm: cannot remove '/tmp/base_9220_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 12
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm256_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 12

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9220_spec.JSON /tmp/base_9220_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9220 ... 

Grammar:
#<procedure:base_9220>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xaf57fdf3fcc177cabc487da037c23deddbe7c25d2a8f8e9f6ecc187bc5f0497b 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xfdf377ca7da03dedc25d8e9f187b497b 128)
invoke-spec-lane with env: #((bv #xaf57fdf3fcc177cabc487da037c23deddbe7c25d2a8f8e9f6ecc187bc5f0497b 256))
Concrete counter examples:
(#((bv #xaf57fdf3fcc177cabc487da037c23deddbe7c25d2a8f8e9f6ecc187bc5f0497b 256)) #((bv #x8e52c67f3e577f69536199adfb38db2165231b2d5ed66c7911d893c8ed61556b 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xaf57fdf3fcc177cabc487da037c23deddbe7c25d2a8f8e9f6ecc187bc5f0497b 256))
Spec Produced:
(bv #x497b 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8e52c67f3e577f69536199adfb38db2165231b2d5ed66c7911d893c8ed61556b 256))
Spec Produced:
(bv #x556b 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6)

invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
invoke-spec-lane with env: #(sym_bv$6)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x8 '(buf int32 256))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedurerm: cannot remove '/tmp/base_5318_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5318

base_5318_grammar.rkt
/tmp/base_5318_grammar.rkt
Writing [{ 
"name": "base_5318" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5318_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5318_spec.JSON /tmp/base_5318_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5318 ... 

Grammar:
#<procedure:base_5318>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x243e01c933497d7c531645ccc93741d7e904a06c074650142d3c615e7a3c56ed 256)
invoke-spec-lane with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
Concrete counter examples:
(#((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256)) #((bv #x45447770f4ca9495bd6c41761ac52b346973bb1bf9279674772256af3d42538d 256) (bv #xf7fd277c1eb23a768eb4c2a8ffe0ef1a5b71c7477670c58734aed14d9b5a6462 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
Spec Produced:
(bv #x7a3c56ed 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x45447770f4ca9495bd6c41761ac52b346973bb1bf9279674772256af3d42538d 256) (bv #xf7fd277c1eb23a768eb4c2a8ffe0ef1a5b71c7477670c58734aed14d9b5a6462 256))
Spec Produced:
(bv #x3d42538d 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10)

invoke-spec with env: #(sym_bv$9 sym_bv$10)
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 255 224 sym_bv$10) (extract 255 224 sym_bv$9)) (extract 255 224 sym_bv$9) (extract 255 224 sym_bv$10)) (ite (bvsle (extract 223 192 sym_bv$10) (extract 223 192 sym_bv$9)) (extract 223 192 sym_bv$9) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256)]
 [sym_bv$10 (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256)])
Verification failed :(
#((bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256))
invoke-spec with env: #((bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x00208003100040401fd8100e1fe8000000000000000000000000000000000000 256)
(bv #x00208003100040401fd8100e1fe8000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x00208003100040401fd8100e1fe8000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x00208003100040401fd8100e1fe8000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x243e01c933497d7c531645ccc93741d7e904a06c074650142d3c615e7a3c56ed 256)
invoke-spec-lane with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
Concrete counter examples:
(#((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256)) #((bv #x45447770f4ca9495bd6c41761ac52b346973bb1bf9279674772256af3d42538d 256) (bv #xf7fd277c1eb23a768eb4c2a8ffe0ef1a5b71c7477670c58734aed14d9b5a6462 256)) #((bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc1e698349115fc1a531645ccb9d0e374e904a06c07465014e557a9897a3c56ed 256) (bv #x243e01c933497d7c4b26672dc93741d7933b5660a3913a042d3c615ea7eea483 256))
Spec Produced:
(bv #x7a3c56ed 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x45447770f4ca9495bd6c41761ac52b346973bb1bf9279674772256af3d42538d 256) (bv #xf7fd277c1eb23a768eb4c2a8ffe0ef1a5b71c7477670c58734aed14d9b5a6462 256))
Spec Produced:
(bv #x3d42538d 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x00180045100040401fd8100e1fe8000000000000000000000000000000000000 256) (bv #x002080038000808100000000a0000001e6d8000000000000a15bde28c5583255 256))
Spec Produced:
(bv #x00208003 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11 sym_bv$12)

invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000rm: cannot remove '/tmp/base_5651_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_min_epi32 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5651

base_5651_grammar.rkt
/tmp/base_5651_grammar.rkt
Writing [{ 
"name": "base_5651" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5651_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5651_spec.JSON /tmp/base_5651_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5651 ... 

Grammar:
#<procedure:base_5651>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x00074e66a84880d7b3c276a79854f47b349391190ebd581890b1e44bca5debd2 256)
invoke-spec-lane with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
Concrete counter examples:
(#((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256)) #((bv #x59acf7d92f308c7324efa1559849bda8d2e74d7d8149145b78ac80e63c81b372 256) (bv #xdb6c1456f7e06dc27ba59239b2d429a4ded30a18d36119a3fdc98eae1343c422 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
Spec Produced:
(bv #xca5debd2 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x59acf7d92f308c7324efa1559849bda8d2e74d7d8149145b78ac80e63c81b372 256) (bv #xdb6c1456f7e06dc27ba59239b2d429a4ded30a18d36119a3fdc98eae1343c422 256))
Spec Produced:
(bv #x1343c422 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$13 sym_bv$14)

invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$15 sym_bv$16)

invoke-spec with env: #(sym_bv$15 sym_bv$16)
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 255 224 sym_bv$15) (extract 255 224 sym_bv$16)) (extract 255 224 sym_bv$15) (extract 255 224 sym_bv$16)) (ite (bvsle (extract 223 192 sym_bv$15) (extract 223 192 sym_bv$16)) (extract 223 192 sym_bv$15) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$15 (bv #x8000000000000001000000010000000100000001000000010000000100000001 256)]
 [sym_bv$16 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x8000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x00074e66a84880d7b3c276a79854f47b349391190ebd581890b1e44bca5debd2 256)
invoke-spec-lane with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
Concrete counter examples:
(#((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256)) #((bv #x59acf7d92f308c7324efa1559849bda8d2e74d7d8149145b78ac80e63c81b372 256) (bv #xdb6c1456f7e06dc27ba59239b2d429a4ded30a18d36119a3fdc98eae1343c422 256)) #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5f983dfd0993ee18cf11d2799854f47b34939119275620e690b1e44b0942651c 256) (bv #x00074e66a84880d7b3c276a7d38339fc716d597a0ebd5818186d8096ca5debd2 256))
Spec Produced:
(bv #xca5debd2 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x59acf7d92f308c7324efa1559849bda8d2e74d7d8149145b78ac80e63c81b372 256) (bv #xdb6c1456f7e06dc27ba59239b2d429a4ded30a18d36119a3fdc98eae1343c422 256))
Spec Produced:
(bv #x1343c422 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x8000000000000001000000010000000100000001000000010000000100000001 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #x80000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$17 sym_bv$18)

invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-immrm: cannot remove '/tmp/base_9216_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_srav_epi32 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_rorv_epi32 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_rolv_epi32 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
 (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_9216

base_9216_grammar.rkt
/tmp/base_9216_grammar.rkt
Writing [{ 
"name": "base_9216" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9216_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9216_spec.JSON /tmp/base_9216_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9216 ... 

Grammar:
#<procedure:base_9216>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xffffffff000000000000000000000000ffffffff000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
Concrete counter examples:
(#((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256)) #((bv #xca6afc059207ec35c513b7aaa405d48e14605985894e2b1f9efa685eab9bb469 256) (bv #xa897003cc870ed2e59a15065e4e8e1270cab4b38ac3c8208cb446662dae9457a 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xca6afc059207ec35c513b7aaa405d48e14605985894e2b1f9efa685eab9bb469 256) (bv #xa897003cc870ed2e59a15065e4e8e1270cab4b38ac3c8208cb446662dae9457a 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$19 sym_bv$20)

invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$21 sym_bv$22)

invoke-spec with env: #(sym_bv$21 sym_bv$22)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 255 224 sym_bv$21) (extract 255 224 sym_bv$22)) (bvashr (extract 223 192 sym_bv$21) (extract 223 192 sym_bv$22))) (bvashr (extract 191 160 sym_bv$21) (extract 191 160 sym_bv$22))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$21 (bv #x4000000000000000000000000000000000000000000000000000000000000000 256)]
 [sym_bv$22 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x4000000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x4000000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xffffffff000000000000000000000000ffffffff000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
Concrete counter examples:
(#((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256)) #((bv #xca6afc059207ec35c513b7aaa405d48e14605985894e2b1f9efa685eab9bb469 256) (bv #xa897003cc870ed2e59a15065e4e8e1270cab4b38ac3c8208cb446662dae9457a 256)) #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc3c5971868f768e94563c7635f577901e5a145fd6977ba0962224a865113270b 256) (bv #x1429cacdd382071718dae16476f44d78fcfc4de8eb6f3350a217bbc24cfd457d 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Indexrm: cannot remove '/tmp/base_647_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9

0
invoke-spec-lane with env: #((bv #xca6afc059207ec35c513b7aaa405d48e14605985894e2b1f9efa685eab9bb469 256) (bv #xa897003cc870ed2e59a15065e4e8e1270cab4b38ac3c8208cb446662dae9457a 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000000000000000000000000000000000000000000000000000000000000 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #x40000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$23 sym_bv$24)

invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
invoke-spec-lane with env: #(sym_bv$23 sym_bv$24)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shr '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_647

base_647_grammar.rkt
/tmp/base_647_grammar.rkt
Writing [{ 
"name": "base_647" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_647_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_647_spec.JSON /tmp/base_647_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_647 ... 

Grammar:
#<procedure:base_647>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xdd563ab1fd2773721849f121416288bdf69d52fe7d4f12ea6a3d2373f52f99ae256bdd85b698db57a2051ff01b4291669b9e54907558c9428fb5b064e22935d1 512))
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xfd277372416288bd7d4f12eaf52f99aeb698db571b4291667558c942e22935d1 256)
invoke-spec-lane with env: #((bv #xdd563ab1fd2773721849f121416288bdf69d52fe7d4f12ea6a3d2373f52f99ae256bdd85b698db57a2051ff01b4291669b9e54907558c9428fb5b064e22935d1 512))
Concrete counter examples:
(#((bv #xdd563ab1fd2773721849f121416288bdf69d52fe7d4f12ea6a3d2373f52f99ae256bdd85b698db57a2051ff01b4291669b9e54907558c9428fb5b064e22935d1 512)) #((bv #x0b70c81604281050718a0a36dd2571b92c051ebaf51aab29a26ebe797be7e672f1bcd585bb52138753e899fb5e798a4c16c3b522c464a33a9def2e0765707519 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xdd563ab1fd2773721849f121416288bdf69d52fe7d4f12ea6a3d2373f52f99ae256bdd85b698db57a2051ff01b4291669b9e54907558c9428fb5b064e22935d1 512))
Spec Produced:
(bv #xe22935d1 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0b70c81604281050718a0a36dd2571b92c051ebaf51aab29a26ebe797be7e672f1bcd585bb52138753e899fb5e798a4c16c3b522c464a33a9def2e0765707519 512))
Spec Produced:
(bv #x65707519 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$25)

invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
invoke-spec-lane with env: #(sym_bv$25)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int32x8 '(buf int64 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512rm: cannot remove '/tmp/base_4596_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 5 belonging to target agnostic class _mm512_max_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
)
get-expr-grammar with base_name: base_4596

base_4596_grammar.rkt
/tmp/base_4596_grammar.rkt
Writing [{ 
"name": "base_4596" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4596_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4596_spec.JSON /tmp/base_4596_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4596 ... 

Grammar:
#<procedure:base_4596>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c487df86f3ffad8b97b 512)
invoke-spec-lane with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
Concrete counter examples:
(#((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512)) #((bv #x04c91d6f02f77d846a24df2b789c8fd57f6d0d3981f69aadb97b78c3d8b8d68b8e39cd986c96ecc2379b51d39c3d8740cfc24f72fcc5ee663fd597df79d09ff1 512) (bv #x3edff621fff8c1879ecf60239d8b98544a320606e5ee2e2cda2606f4667c6955c3a197945d628ea70c77663e4e8a41154144efbf7ec233be6f7eec5e75e58ce1 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
Spec Produced:
(bv #x7df86f3ffad8b97b 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x04c91d6f02f77d846a24df2b789c8fd57f6d0d3981f69aadb97b78c3d8b8d68b8e39cd986c96ecc2379b51d39c3d8740cfc24f72fcc5ee663fd597df79d09ff1 512) (bv #x3edff621fff8c1879ecf60239d8b98544a320606e5ee2e2cda2606f4667c6955c3a197945d628ea70c77663e4e8a41154144efbf7ec233be6f7eec5e75e58ce1 512))
Spec Produced:
(bv #x6f7eec5e75e58ce1 64)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$26 sym_bv$27)

invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
invoke-spec-lane with env: #(sym_bv$26 sym_bv$27)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$28 sym_bv$29)

invoke-spec with env: #(sym_bv$28 sym_bv$29)
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 511 448 sym_bv$29) (extract 511 448 sym_bv$28)) (extract 511 448 sym_bv$28) (extract 511 448 sym_bv$29)) (ite (bvsle (extract 447 384 sym_bv$29) (extract 447 384 sym_bv$28)) (extract 447 384 sym_bv$28) ...)) ...) ...) ...) ...) ...) ...)
Verification took 1 seconds

(model
 [sym_bv$28 (bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512)]
 [sym_bv$29 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c487df86f3ffad8b97b 512)
invoke-spec-lane with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
Concrete counter examples:
(#((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512)) #((bv #x04c91d6f02f77d846a24df2b789c8fd57f6d0d3981f69aadb97b78c3d8b8d68b8e39cd986c96ecc2379b51d39c3d8740cfc24f72fcc5ee663fd597df79d09ff1 512) (bv #x3edff621fff8c1879ecf60239d8b98544a320606e5ee2e2cda2606f4667c6955c3a197945d628ea70c77663e4e8a41154144efbf7ec233be6f7eec5e75e58ce1 512)) #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5fb1ea121c7a63863dccb138b877e972778602ab45184c92d3cb4f8447b56e489c6ed96e3d0dbe8d196868650ea2407d79ed375b01793c48ef661d70cb1f974c 512) (bv #xb3d7af0f00633b7feb84b2d160c5e153c033cf4466698590869768398d1eb0658adb26bb2a08531894afdafe8c5b746b775ae9b957908d5a7df86f3ffad8b97b 512))
Spec Produced:
(bv #x7df86f3ffad8b97b 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x04c91d6f02f77d846a24df2b789c8fd57f6d0d3981f69aadb97b78c3d8b8d68b8e39cd986c96ecc2379b51d39c3d8740cfc24f72fcc5ee663fd597df79d09ff1 512) (bv #x3edff621fff8c1879ecf60239d8b98544a320606e5ee2e2cda2606f4667c6955c3a197945d628ea70c77663e4e8a41154144efbf7ec233be6f7eec5e75e58ce1 512))
Spec Produced:
(bv #x6f7eec5e75e58ce1 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$30 sym_bv$31)

invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_8726

base_8726_grammar.rkt
/tmp/base_8726_grammar.rkt
Writing [{ 
"name": "base_8726" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8726_spec.JSON
rm: cannot remove '/tmp/base_8726_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_min_epi64 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8726_spec.JSON /tmp/base_8726_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8726 ... 

Grammar:
#<procedure:base_8726>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc0d83db659d92f8a9fa2df1d314f56d4823d96ac46f57562da20e3af1677ed6bb63630cb2aa75c37ffcfc4ab9959f455a86a81c4cc203fea29f1718b4735405c 512) (bv #xeba395b15a4f4b7da6da4b3ce0e6f9dd7f13a661a00cfda6c6faeca051fbfa707f62a634ca492e1c3144cc5e0f43d4a918481a4ad639422f62d91da99b947303 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xc0d83db659d92f8a9fa2df1d314f56d4823d96ac46f57562c6faeca051fbfa70b63630cb2aa75c37ffcfc4ab9959f455a86a81c4cc203fea29f1718b4735405c 512)
invoke-spec-lane with env: #((bv #xc0d83db659d92f8a9fa2df1d314f56d4823d96ac46f57562da20e3af1677ed6bb63630cb2aa75c37ffcfc4ab9959f455a86a81c4cc203fea29f1718b4735405c 512) (bv #xeba395b15a4f4b7da6da4b3ce0e6f9dd7f13a661a00cfda6c6faeca051fbfa707f62a634ca492e1c3144cc5e0f43d4a918481a4ad639422f62d91da99b947303 512))
Concrete counter examples:
(#((bv #xc0d83db659d92f8a9fa2df1d314f56d4823d96ac46f57562da20e3af1677ed6bb63630cb2aa75c37ffcfc4ab9959f455a86a81c4cc203fea29f1718b4735405c 512) (bv #xeba395b15a4f4b7da6da4b3ce0e6f9dd7f13a661a00cfda6c6faeca051fbfa707f62a634ca492e1c3144cc5e0f43d4a918481a4ad639422f62d91da99b947303 512)) #((bv #x2d1f7b127dbe8ec1bbe9c8b168c6f356fa4fb197290ac6e0b525247ee2efd231705d6fcfe2414c4aba56524188a1ceaa105d1d60ea436070e64a0ef35d48f82a 512) (bv #xcc9f201a570c72f900fc950d4d706aaed48a2cb3221c4b3af0c21a4225cb28909d565f62ccc53caf352508613ca0c15712163b40c2ee24a4a836c8dbe3b5f018 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc0d83db659d92f8a9fa2df1d314f56d4823d96ac46f57562da20e3af1677ed6bb63630cb2aa75c37ffcfc4ab9959f455a86a81c4cc203fea29f1718b4735405c 512) (bv #xeba395b15a4f4b7da6da4b3ce0e6f9dd7f13a661a00cfda6c6faeca051fbfa707f62a634ca492e1c3144cc5e0f43d4a918481a4ad639422f62d91da99b947303 512))
Spec Produced:
(bv #x29f1718b4735405c 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2d1f7b127dbe8ec1bbe9c8b168c6f356fa4fb197290ac6e0b525247ee2efd231705d6fcfe2414c4aba56524188a1ceaa105d1d60ea436070e64a0ef35d48f82a 512) (bv #xcc9f201a570c72f900fc950d4d706aaed48a2cb3221c4b3af0c21a4225cb28909d565f62ccc53caf352508613ca0c15712163b40c2ee24a4a836c8dbe3b5f018 512))
Spec Produced:
(bv #xa836c8dbe3b5f018 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$32 sym_bv$33)

invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-min '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #rm: cannot remove '/tmp/base_913_spec.JSON': No such file or directory
Pruning _mm512_sra_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 8 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srav_epi64 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_rorv_epi64 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_rolv_epi64 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 3
x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_913

base_913_grammar.rkt
/tmp/base_913_grammar.rkt
Writing [{ 
"name": "base_913" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_913_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_913_spec.JSON /tmp/base_913_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_913 ... 

Grammar:
#<procedure:base_913>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Concrete counter examples:
(#((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512)) #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$34 sym_bv$35)

invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$36 sym_bv$37)

invoke-spec with env: #(sym_bv$36 sym_bv$37)
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 448 sym_bv$36) (extract 511 448 sym_bv$37)) (bvashr (extract 447 384 sym_bv$36) (extract 447 384 sym_bv$37))) (bvashr (extract 383 320 sym_bv$36) (extract 383 320 sym_bv$37))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$36 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$37 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512) 512

invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Concrete counter examples:
(#((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512)) #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_rorv_epi32_dsl (lit (bv #x0000000000000040 64)) (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_rorv_epi32_dsl
 (lit (bv #x0000000000000040 64))
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 512
 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$38 sym_bv$39)

invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$40 sym_bv$41)

invoke-spec with env: #(sym_bv$40 sym_bv$41)
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 448 sym_bv$40) (extract 511 448 sym_bv$41)) (bvashr (extract 447 384 sym_bv$40) (extract 447 384 sym_bv$41))) (bvashr (extract 383 320 sym_bv$40) (extract 383 320 sym_bv$41))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$40 (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$41 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Concrete counter examples:
(#((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512)) #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_rolv_epi32_dsl (lit (bv #x0000000000000040 64)) (lit (bv #x0000000000000040 64)) (reg (bv #x0 4)) (union) 512 64)
#t
Is this boolector optimization case #f ?

Contains symbolic union, retry synthesis
Union solution:
(_mm_rolv_epi32_dsl
 (lit (bv #x0000000000000040 64))
 (lit (bv #x0000000000000040 64))
 (reg (bv #x0 4))
 (union)
 512
 64)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Concrete counter examples:
(#((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512)) #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #xaf921c3c885ba591f1709cad559f4b03f232bae2993984a7547335f41fea7ef8724fe1d99543f582754335fcaceb6c402461760c516b0a30a6fce75fc3e94701 512) (bv #xc265b5dc15af117d610017adc0d06cbc634fcfbfacf6e047b8a56ebd4be11b190f1dc341cfd39f1c08a8b61b3f7baba03334626551653bedfa39bd4c81d78086 512)))
Failing lanes examples:
(0 0 0 7 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x89a74737df29f921f01c47a16f0c326fc7b3fa54f279702cb4b81c09ae97efa5f8c5f4829574ca24f276c0b8b40506ce841d6ce812c828dfa53ddca296d71740 512) (bv #xd67af55c43f91f6157009f3aba176321ca87b78dd2fbee924a992ce981d87e6033cddf9d8668a3883368dd3f50d2d956361165c75e79fa4dcc6330ff1f2c1b6d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x928aff0a2eb506b33d9129a1e52d2276e0ed32d3464e6ad70179ac2a0645b22b5055954197f8867bd2b445648062849b842085dfab856ab5aeeac4d66f1b9fbf 512) (bv #x5a717d0961be8391250de3c4fcaf6baa52554ca52bbffff01ed0e6753b9678bcc4fad7d1c0cbd3fcccba7fea2a99e56a9c02ed9f2003e20382fb3ac24a988f55 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #xaf921c3c885ba591f1709cad559f4b03f232bae2993984a7547335f41fea7ef8724fe1d99543f582754335fcaceb6c402461760c516b0a30a6fce75fc3e94701 512) (bv #xc265b5dc15af117d610017adc0d06cbc634fcfbfacf6e047b8a56ebd4be11b190f1dc341cfd39f1c08a8b61b3f7baba03334626551653bedfa39bd4c81d78086 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$42 sym_bv$43)

invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-shr '(buf int64 512) '(buf uint64 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffffrm: cannot remove '/tmp/base_1031_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_add_epi64 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_1031

base_1031_grammar.rkt
/tmp/base_1031_grammar.rkt
Writing [{ 
"name": "base_1031" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1031_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1031_spec.JSON /tmp/base_1031_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1031 ... 

Grammar:
#<procedure:base_1031>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x46ad72d20c84381040885435d505b8917ed0ab7ce153e2f83589af168f95423c9e272f7387b81a6002c76e86f44a4022084256814daaa567e98d77505727e96d 512) (bv #x1e7abf547d3d5e6c505ff99056c0640186399cc772a97d8fb46948a2c778d50984bbea4e586cae8d8415edfd554c3998d1ddd17b5bd1e91158da69e920d2ebdc 512))
(vec-add (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x6528322689c1967c90e84dc62bc61c92050a484453fd6087e9f2f7b9570e174522e319c1e024c8ed86dd5c84499679bada2027fca97c8e784267e13977fad549 512)
invoke-spec-lane with env: #((bv #x46ad72d20c84381040885435d505b8917ed0ab7ce153e2f83589af168f95423c9e272f7387b81a6002c76e86f44a4022084256814daaa567e98d77505727e96d 512) (bv #x1e7abf547d3d5e6c505ff99056c0640186399cc772a97d8fb46948a2c778d50984bbea4e586cae8d8415edfd554c3998d1ddd17b5bd1e91158da69e920d2ebdc 512))
Concrete counter examples:
(#((bv #x46ad72d20c84381040885435d505b8917ed0ab7ce153e2f83589af168f95423c9e272f7387b81a6002c76e86f44a4022084256814daaa567e98d77505727e96d 512) (bv #x1e7abf547d3d5e6c505ff99056c0640186399cc772a97d8fb46948a2c778d50984bbea4e586cae8d8415edfd554c3998d1ddd17b5bd1e91158da69e920d2ebdc 512)) #((bv #xb53a2f5bfc9c769ba3b86a16f0f22cee95ae036985503bc4b68c7a1a194863fc6e8ee28fed3b6b0bebfd5d563048da45b3b10064fb1afa4e0d4028b0566fe50f 512) (bv #x08968e987b961f1534433a8e97d41609769a4b2088b942af99f8e6c70f2a7f79b5f31069b42b62bbd16674aa33aa20316e2526ce807cb5e6636a489f3a6d1ca0 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x46ad72d20c84381040885435d505b8917ed0ab7ce153e2f83589af168f95423c9e272f7387b81a6002c76e86f44a4022084256814daaa567e98d77505727e96d 512) (bv #x1e7abf547d3d5e6c505ff99056c0640186399cc772a97d8fb46948a2c778d50984bbea4e586cae8d8415edfd554c3998d1ddd17b5bd1e91158da69e920d2ebdc 512))
Spec Produced:
(bv #x4267e13977fad549 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb53a2f5bfc9c769ba3b86a16f0f22cee95ae036985503bc4b68c7a1a194863fc6e8ee28fed3b6b0bebfd5d563048da45b3b10064fb1afa4e0d4028b0566fe50f 512) (bv #x08968e987b961f1534433a8e97d41609769a4b2088b942af99f8e6c70f2a7f79b5f31069b42b62bbd16674aa33aa20316e2526ce807cb5e6636a489f3a6d1ca0 512))
Spec Produced:
(bv #x70aa714f90dd01af 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$44 sym_bv$45)

invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_6419_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Pruning _mm512_broadcastmb_epi64 as it has an argument of size 8 which is smaller than 512
Pruning _mm512_cvtepu16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_cvtepu8_epi64 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 11 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_madd52lo_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_madd52hi_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_mullo_epi64 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 5
> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_6419

base_6419_grammar.rkt
/tmp/base_6419_grammar.rkt
Writing [{ 
"name": "base_6419" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6419_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6419_spec.JSON /tmp/base_6419_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6419 ... 

Grammar:
#<procedure:base_6419>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xfd3bea978d0c3a0ba63a7f993012963c6a139709b29f11aece11bafcc6c02692a25e8e696e4bef553a5f23f3f67ded1bc8ccce55f444cb9261e20b095f493d25 512) (bv #x64dc25774d05321594f88bc78a1bda3bd91b012e01729e3b3bb1979e49b051b3f63a49b64a37e49ff8fad4c8b4f7f022cd2ea495c09661a3e7302fae45b8f5c3 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x26a4d8ca668de8e7d95b4ed4188bb7d4e8c0d0a5e50e771aa74f14d7eaef2a161a9662a41f9459cbbb2474cb8c0fcd968ed6af3f607beff6691af49997e5fc2f 512)
invoke-spec-lane with env: #((bv #xfd3bea978d0c3a0ba63a7f993012963c6a139709b29f11aece11bafcc6c02692a25e8e696e4bef553a5f23f3f67ded1bc8ccce55f444cb9261e20b095f493d25 512) (bv #x64dc25774d05321594f88bc78a1bda3bd91b012e01729e3b3bb1979e49b051b3f63a49b64a37e49ff8fad4c8b4f7f022cd2ea495c09661a3e7302fae45b8f5c3 512))
Concrete counter examples:
(#((bv #xfd3bea978d0c3a0ba63a7f993012963c6a139709b29f11aece11bafcc6c02692a25e8e696e4bef553a5f23f3f67ded1bc8ccce55f444cb9261e20b095f493d25 512) (bv #x64dc25774d05321594f88bc78a1bda3bd91b012e01729e3b3bb1979e49b051b3f63a49b64a37e49ff8fad4c8b4f7f022cd2ea495c09661a3e7302fae45b8f5c3 512)) #((bv #x1816065c3222900a6b995769f326b2cce3776bf642811d8c0e4d6cabea2bd9cd04592d6bf9d9cfd0fc73729e35644508e5d304fe7d3524d0a0c983a076f111df 512) (bv #x568d2647cfe7a230569da5631d0403d6b3189b95281f9be00ef4352dc7aabfe663d6988754891f7634e86775451ed0af736e3c628916cc9dcf4dba4889c264d9 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xfd3bea978d0c3a0ba63a7f993012963c6a139709b29f11aece11bafcc6c02692a25e8e696e4bef553a5f23f3f67ded1bc8ccce55f444cb9261e20b095f493d25 512) (bv #x64dc25774d05321594f88bc78a1bda3bd91b012e01729e3b3bb1979e49b051b3f63a49b64a37e49ff8fad4c8b4f7f022cd2ea495c09661a3e7302fae45b8f5c3 512))
Spec Produced:
(bv #x691af49997e5fc2f 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1816065c3222900a6b995769f326b2cce3776bf642811d8c0e4d6cabea2bd9cd04592d6bf9d9cfd0fc73729e35644508e5d304fe7d3524d0a0c983a076f111df 512) (bv #x568d2647cfe7a230569da5631d0403d6b3189b95281f9be00ef4352dc7aabfe663d6988754891f7634e86775451ed0af736e3c628916cc9dcf4dba4889c264d9 512))
Spec Produced:
(bv #xed587372df514207 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$46 sym_bv$47)

invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_6910_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 256
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi64 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-mul '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)
Synthesis step completed!
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_6910

base_6910_grammar.rkt
/tmp/base_6910_grammar.rkt
Writing [{ 
"name": "base_6910" , 
"semantics": [ "(extract sign-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6910_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6910_spec.JSON /tmp/base_6910_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6910 ... 

Grammar:
#<procedure:base_6910>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1836f693fece989bd76dbc06ab9dedfafc50e77343533b69999deadc8c06523d 256))
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x000000001836f693fffffffffece989bffffffffd76dbc06ffffffffab9dedfafffffffffc50e7730000000043533b69ffffffff999deadcffffffff8c06523d 512)
invoke-spec-lane with env: #((bv #x1836f693fece989bd76dbc06ab9dedfafc50e77343533b69999deadc8c06523d 256))
Concrete counter examples:
(#((bv #x1836f693fece989bd76dbc06ab9dedfafc50e77343533b69999deadc8c06523d 256)) #((bv #x46f86b8acaf27639a8525ee6bbe191b7e5546ae9d7043cb42beb3d558c32ea46 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1836f693fece989bd76dbc06ab9dedfafc50e77343533b69999deadc8c06523d 256))
Spec Produced:
(bv #xffffffff8c06523d 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x46f86b8acaf27639a8525ee6bbe191b7e5546ae9d7043cb42beb3d558c32ea46 256))
Spec Produced:
(bv #xffffffff8c32ea46 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$48)

invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
invoke-spec-lane with env: #(sym_bv$48)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int64x8 '(buf int32 256))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:rm: cannot remove '/tmp/base_937_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
get-expr-grammar with base_name: base_937

base_937_grammar.rkt
/tmp/base_937_grammar.rkt
Writing [{ 
"name": "base_937" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_32"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_937_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_937_spec.JSON /tmp/base_937_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_937 ... 

Grammar:
#<procedure:base_937>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb9d4afad 32))
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Spec result
(bv #xb9d4afadb9d4afadb9d4afadb9d4afadb9d4afadb9d4afadb9d4afadb9d4afad 256)
invoke-spec-lane with env: #((bv #xb9d4afad 32))
Concrete counter examples:
(#((bv #xb9d4afad 32)) #((bv #x3cd891cb 32)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb9d4afad 32))
Spec Produced:
(bv #xb9d4afad 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x3cd891cb 32))
Spec Produced:
(bv #x3cd891cb 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$49)

invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
invoke-spec-lane with env: #(sym_bv$49)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int32 32))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
rm: cannot remove '/tmp/base_883_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_883

base_883_grammar.rkt
/tmp/base_883_grammar.rkt
Writing [{ 
"name": "base_883" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_883_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_883_spec.JSON /tmp/base_883_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_883 ... 

Grammar:
#<procedure:base_883>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #f))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #f))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8rm: cannot remove '/tmp/base_4058_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4058

base_4058_grammar.rkt
/tmp/base_4058_grammar.rkt
Writing [{ 
"name": "base_4058" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1073741823, 64]] 
}
] to file /tmp/base_4058_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4058_spec.JSON /tmp/base_4058_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4058 ... 

Grammar:
#<procedure:base_4058>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Spec result
(bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000003fffffff 64) #t))
#(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001rm: cannot remove '/tmp/base_7231_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_andnot_epi64 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_si512 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_epi32 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_and_si512 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi64 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi32 with score: 3 belonging to target agnostic class _mm256_and_si256
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 6
 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_7231

base_7231_grammar.rkt
/tmp/base_7231_grammar.rkt
Writing [{ 
"name": "base_7231" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7231_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7231_spec.JSON /tmp/base_7231_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7231 ... 

Grammar:
#<procedure:base_7231>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4478f3f9c35bd4294310a24282b85c52fe4489fa3e47bfeeaf3aa66f0929fe5e5f42d15c6dd9d4f7a8d56ebb20119d9166ceb469dc48fa7d08639443eab986f7 512) (bv #x8d56155bfd06d22ad4117946ec87c5222136a449a3835f5ed6ce009028dc16455f0b0eb84fdc22424771d9b2fe629d10229e7bbc6b43fee0a5f58f6cf2e1d0c0 512))
(vec-bwand (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x04501159c102d02840102042808044022004804822031f4e860a0000080816445f0200184dd80042005148b220009d10228e30284840fa6000618440e2a180c0 512)
invoke-spec-lane with env: #((bv #x4478f3f9c35bd4294310a24282b85c52fe4489fa3e47bfeeaf3aa66f0929fe5e5f42d15c6dd9d4f7a8d56ebb20119d9166ceb469dc48fa7d08639443eab986f7 512) (bv #x8d56155bfd06d22ad4117946ec87c5222136a449a3835f5ed6ce009028dc16455f0b0eb84fdc22424771d9b2fe629d10229e7bbc6b43fee0a5f58f6cf2e1d0c0 512))
Concrete counter examples:
(#((bv #x4478f3f9c35bd4294310a24282b85c52fe4489fa3e47bfeeaf3aa66f0929fe5e5f42d15c6dd9d4f7a8d56ebb20119d9166ceb469dc48fa7d08639443eab986f7 512) (bv #x8d56155bfd06d22ad4117946ec87c5222136a449a3835f5ed6ce009028dc16455f0b0eb84fdc22424771d9b2fe629d10229e7bbc6b43fee0a5f58f6cf2e1d0c0 512)) #((bv #x0fcf85a7ea15dfb270e36a0b853311f81adbfe9f4b9e65a5a2ce8e68995c52d62ea17caef2330a7ccbe3515a37528354bb12d4afb0ee43446fb3e71129558e0b 512) (bv #x770f162e6507110a8d8798d4e6fb3bc19d86557f490e172a77318aa53ebaea2da58de2e0450e26c03a2b3bd4b09e3640aa86974a07382ccf8f7abaf840550396 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4478f3f9c35bd4294310a24282b85c52fe4489fa3e47bfeeaf3aa66f0929fe5e5f42d15c6dd9d4f7a8d56ebb20119d9166ceb469dc48fa7d08639443eab986f7 512) (bv #x8d56155bfd06d22ad4117946ec87c5222136a449a3835f5ed6ce009028dc16455f0b0eb84fdc22424771d9b2fe629d10229e7bbc6b43fee0a5f58f6cf2e1d0c0 512))
Spec Produced:
(bv #x00618440e2a180c0 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0fcf85a7ea15dfb270e36a0b853311f81adbfe9f4b9e65a5a2ce8e68995c52d62ea17caef2330a7ccbe3515a37528354bb12d4afb0ee43446fb3e71129558e0b 512) (bv #x770f162e6507110a8d8798d4e6fb3bc19d86557f490e172a77318aa53ebaea2da58de2e0450e26c03a2b3bd4b09e3640aa86974a07382ccf8f7abaf840550396 512))
Spec Produced:
(bv #x0f32a21000550202 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$50 sym_bv$51)

invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-bwand '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:rm: cannot remove '/tmp/base_471_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4

(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_471

base_471_grammar.rkt
/tmp/base_471_grammar.rkt
Writing [{ 
"name": "base_471" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_471_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_471_spec.JSON /tmp/base_471_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_471 ... 

Grammar:
#<procedure:base_471>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #t))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #t))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-immrm: cannot remove '/tmp/base_880_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
 (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_880

base_880_grammar.rkt
/tmp/base_880_grammar.rkt
Writing [{ 
"name": "base_880" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[30, 64]] 
}
] to file /tmp/base_880_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_880_spec.JSON /tmp/base_880_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_880 ... 

Grammar:
#<procedure:base_880>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000000000001e 64) #f))
Spec result
(bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000000000001e 64) #f))
#(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #rm: cannot remove '/tmp/base_3317_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_3317

base_3317_grammar.rkt
/tmp/base_3317_grammar.rkt
Writing [{ 
"name": "base_3317" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[2147483647, 64]] 
}
] to file /tmp/base_3317_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3317_spec.JSON /tmp/base_3317_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3317 ... 

Grammar:
#<procedure:base_3317>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Spec result
(bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000007fffffff 64) #t))
#(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffffrm: cannot remove '/tmp/base_6926_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_6926

base_6926_grammar.rkt
/tmp/base_6926_grammar.rkt
Writing [{ 
"name": "base_6926" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[-2147483648, 64]] 
}
] to file /tmp/base_6926_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6926_spec.JSON /tmp/base_6926_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6926 ... 

Grammar:
#<procedure:base_6926>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Spec result
(bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 (int-imm (bv #xffffffff80000000 64) #t))
#(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
Synthesis step completed!
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dslrm: cannot remove '/tmp/base_5167_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_andnot_si256 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm256_and_si256 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5

        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5167

base_5167_grammar.rkt
/tmp/base_5167_grammar.rkt
Writing [{ 
"name": "base_5167" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5167_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5167_spec.JSON /tmp/base_5167_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5167 ... 

Grammar:
#<procedure:base_5167>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collectedrm: cannot remove '/tmp/base_211_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 18
Grammar Number of Shuffle DSL Clauses:	 14
Grammar Number of DSL Compute Clauses:	 8

invoke-spec with env: #((bv #xced49dd80ab81bb93ca98efd4f2a929b5d0703e8d37c1ea79abdab1387a8de21 256) (bv #x12d093154b91dc9a5c8f1752098d3be8c1226533c5fab6628f1914e177edb902 256))
(vec-bwand (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x02d091100a9018981c8906500908128841020120c17816228a19000107a89800 256)
invoke-spec-lane with env: #((bv #xced49dd80ab81bb93ca98efd4f2a929b5d0703e8d37c1ea79abdab1387a8de21 256) (bv #x12d093154b91dc9a5c8f1752098d3be8c1226533c5fab6628f1914e177edb902 256))
Concrete counter examples:
(#((bv #xced49dd80ab81bb93ca98efd4f2a929b5d0703e8d37c1ea79abdab1387a8de21 256) (bv #x12d093154b91dc9a5c8f1752098d3be8c1226533c5fab6628f1914e177edb902 256)) #((bv #xcaa5ad7f9cf85b70ba1fffe89acb0ce90c80339336869ab7bc64640f02adbb31 256) (bv #x3bf3c27760aafecdb70de44eb1880dcba967cb0003c238430b8c0aea47ebe785 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xced49dd80ab81bb93ca98efd4f2a929b5d0703e8d37c1ea79abdab1387a8de21 256) (bv #x12d093154b91dc9a5c8f1752098d3be8c1226533c5fab6628f1914e177edb902 256))
Spec Produced:
(bv #x07a89800 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xcaa5ad7f9cf85b70ba1fffe89acb0ce90c80339336869ab7bc64640f02adbb31 256) (bv #x3bf3c27760aafecdb70de44eb1880dcba967cb0003c238430b8c0aea47ebe785 256))
Spec Produced:
(bv #x02a9a301 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$52 sym_bv$53)

invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
invoke-spec-lane with env: #(sym_bv$52 sym_bv$53)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-bwand '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
get-expr-grammar with base_name: base_211

base_211_grammar.rkt
/tmp/base_211_grammar.rkt
Writing [{ 
"name": "base_211" , 
"semantics": [ "()"] , 
"input_shapes": [[1,8], [1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [1, 32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_8", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_211_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_211_spec.JSON /tmp/base_211_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_211 ... 

Grammar:
#<procedure:base_211>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterativerm: cannot remove '/tmp/base_1738_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
==================================================
Grammar Number of Load DSL Clauses:	 4
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 0

Garbage collected
invoke-spec with env: #((bv #x7d 8) (bv #x19fb39edd4e8e50394351cd4a000e67c47c89d6334e1801f906b1ce984f3a39a 256) (bv #xf261b235a30d7e6d66b3abc5849dc1f3aa8ee0bb3cecb6bab8835c1c35aae59b 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x19fb39edd4e8e50394351cd4a000e67c47c89d6334e1801f906b1ce984f3a39a 256)
invoke-spec-lane with env: #((bv #x7d 8) (bv #x19fb39edd4e8e50394351cd4a000e67c47c89d6334e1801f906b1ce984f3a39a 256) (bv #xf261b235a30d7e6d66b3abc5849dc1f3aa8ee0bb3cecb6bab8835c1c35aae59b 256))
Concrete counter examples:
(#((bv #x7d 8) (bv #x19fb39edd4e8e50394351cd4a000e67c47c89d6334e1801f906b1ce984f3a39a 256) (bv #xf261b235a30d7e6d66b3abc5849dc1f3aa8ee0bb3cecb6bab8835c1c35aae59b 256)) #((bv #x67 8) (bv #xe79f67179589f5194acb396e6f41e9a77f4d9903d391bfaa32253e26a47a9eb2 256) (bv #x1f0cd86bbcf4bbac625ffcd31a3bd7ea28f1e2f5fc6aa20a2c42f232d9653caa 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x7d 8) (bv #x19fb39edd4e8e50394351cd4a000e67c47c89d6334e1801f906b1ce984f3a39a 256) (bv #xf261b235a30d7e6d66b3abc5849dc1f3aa8ee0bb3cecb6bab8835c1c35aae59b 256))
Spec Produced:
(bv #x84f3a39a 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x67 8) (bv #xe79f67179589f5194acb396e6f41e9a77f4d9903d391bfaa32253e26a47a9eb2 256) (bv #x1f0cd86bbcf4bbac625ffcd31a3bd7ea28f1e2f5fc6aa20a2c42f232d9653caa 256))
Spec Produced:
(bv #xa47a9eb2 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$54 sym_bv$55 sym_bv$56)

invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$54 sym_bv$55 sym_bv$56)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
#(#t #(struct:reg (bv #x1 4)) 0)
Synthesis step completed!
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
get-expr-grammar with base_name: base_1738

base_1738_grammar.rkt
/tmp/base_1738_grammar.rkt
Writing [{ 
"name": "base_1738" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [1], 
"output_precision": 1, 
"args": ["SYMBOLIC_BV_1"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1738_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1738_spec.JSON /tmp/base_1738_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1738 ... 

Grammar:
#<procedure:base_1738>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
invoke-spec-lane with env: #((bv #b0 1))
Concrete counter examples:
(#((bv #b0 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
invoke-spec-lane with env: #((bv #b0 1))
Concrete counter examples:
(#((bv #b0 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$57)

invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$58)

invoke-spec with env: #(sym_bv$58)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$58 sym_bv$58) sym_bv$58) sym_bv$58) sym_bv$58) sym_bv$58) sym_bv$58) sym_bv$58)
Verification took 0 seconds

(model
 [sym_bv$58 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x00 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
invoke-spec-lane with env: #((bv #b0 1))
Concrete counter examples:
(#((bv #b0 1)) #((bv #b0 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 3, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 4, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
invoke-spec-lane with env: #((bv #b0 1))
Concrete counter examples:
(#((bv #b0 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 5, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x55 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x55 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$59)

invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$60)

invoke-spec with env: #(sym_bv$60)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$60 sym_bv$60) sym_bv$60) sym_bv$60) sym_bv$60) sym_bv$60) sym_bv$60) sym_bv$60)
Verification took 0 seconds

(model
 [sym_bv$60 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x55 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xff 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #xff 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$61)

invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$62)

invoke-spec with env: #(sym_bv$62)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$62 sym_bv$62) sym_bv$62) sym_bv$62) sym_bv$62) sym_bv$62) sym_bv$62) sym_bv$62)
Verification took 0 seconds

(model
 [sym_bv$62 (bv #b0 1)])
Verification failed :(
#((bv #b0 1))
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
(bv #x00 8)
Verification failed ...
	spec produced: (bv #x00 8) 8 
	synthesized result produced: (bv #xff 8) 8

invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0 1 0)
*********** z3-optimize *****************rm: cannot remove '/tmp/base_8523_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 6, depth-limit 5, and cost-bound 40 ...

Depth Quota exceed, unsynthesizable
Test elapsed time: 
1
(x8 '(buf uint1 1))
#(#f () 1)
Synthesis step completed!
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8523

base_8523_grammar.rkt
/tmp/base_8523_grammar.rkt
Writing [{ 
"name": "base_8523" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_8523_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8523_spec.JSON /tmp/base_8523_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8523 ... 

Grammar:
#<procedure:base_8523>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000001 32) #t))
Spec result
(bv #x0000000100000001000000010000000100000001000000010000000100000001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000001 32) #t))
#(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================rm: cannot remove '/tmp/base_5251_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5251

base_5251_grammar.rkt
/tmp/base_5251_grammar.rkt
Writing [{ 
"name": "base_5251" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 32]] 
}
] to file /tmp/base_5251_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5251_spec.JSON /tmp/base_5251_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5251 ... 

Grammar:
#<procedure:base_5251>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000000 32) #t))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000000 32) #t))
#(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001erm: cannot remove '/tmp/base_9912_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9912

base_9912_grammar.rkt
/tmp/base_9912_grammar.rkt
Writing [{ 
"name": "base_9912" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[32767, 32]] 
}
] to file /tmp/base_9912_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9912_spec.JSON /tmp/base_9912_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9912 ... 

Grammar:
#<procedure:base_9912>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00007fff 32) #t))
Spec result
(bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00007fff 32) #t))
#(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dslrm: cannot remove '/tmp/base_5738_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
 (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5738

base_5738_grammar.rkt
/tmp/base_5738_grammar.rkt
Writing [{ 
"name": "base_5738" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[-32768, 32]] 
}
] to file /tmp/base_5738_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5738_spec.JSON /tmp/base_5738_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5738 ... 

Grammar:
#<procedure:base_5738>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffff8000 32) #t))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #xffff8000 32) #t))
#(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dslrm: cannot remove '/tmp/base_3410_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20

               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_3410

base_3410_grammar.rkt
/tmp/base_3410_grammar.rkt
Writing [{ 
"name": "base_3410" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_3410_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3410_spec.JSON /tmp/base_3410_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3410 ... 

Grammar:
#<procedure:base_3410>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00ff 16) #t))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 (int-imm (bv #x00ff 16) #t))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dslrm: cannot remove '/tmp/base_1517_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20
 (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_1517

base_1517_grammar.rkt
/tmp/base_1517_grammar.rkt
Writing [{ 
"name": "base_1517" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 16]] 
}
] to file /tmp/base_1517_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1517_spec.JSON /tmp/base_1517_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1517 ... 

Grammar:
#<procedure:base_1517>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000 16) #t))
Spec result
(bv #x00000000000000000000000000000000 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000000000000000000000000000000 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00000000000000000000000000000000 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000 16) #t))
#(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x07 8)) <1 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.9
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 6) <8 x i32>
; (reg 7) <1 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 6) <8 x i32>
; (reg 7) <1 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t354, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t355, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t356, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t357, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t358, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t359))), x8(32767)), x8(-32768))), x8((int16)t360)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t356 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t359 maps to reg_7
t360 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 66.403528seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 9

Optimized expression: (int16x8)hydride.node.9((int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp(output.s0.c.ci.cii.cii*8, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 10
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8))
========================================
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x06 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.10
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 6) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 6) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t362, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t364, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t366, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t367, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t369, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t371))), x8(32767)), x8(-32768))), x8((int16)t372)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t366 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t371 maps to reg_7
t372 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 24.059521seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 10

Optimized expression: (int16x8)hydride.node.10((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 32, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 11
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x07 8)) <1 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.11
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 6) <8 x i32>
; (reg 8) <1 x i16>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 7) <1 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 6) <8 x i32>
; (reg 8) <1 x i16>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 7) <1 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t374, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t376, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t378, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t379, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t381, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t383))), x8(32767)), x8(-32768))), x8((int16)t384)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t378 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t383 maps to reg_7
t384 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 20.352361seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 11

Optimized expression: (int16x8)hydride.node.11((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 64, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 12
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.12
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 4) <1 x i1>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 2) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 4) <1 x i1>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 2) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t386, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t388, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t390, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t391, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t393, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t395))), x8(32767)), x8(-32768))), x8((int16)t396)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t390 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t395 maps to reg_7
t396 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 20.164250seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 12

Optimized expression: (int16x8)hydride.node.12((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 96, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 13
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.13
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t398, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t400, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t402, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t403, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t405, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t407))), x8(32767)), x8(-32768))), x8((int16)t408)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t402 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t407 maps to reg_7
t408 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 19.827806seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 13

Optimized expression: (int16x8)hydride.node.13((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 128, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 14
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.14
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t410, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t412, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t414, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t415, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t417, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t419))), x8(32767)), x8(-32768))), x8((int16)t420)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t414 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t419 maps to reg_7
t420 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 20.043747seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 14

Optimized expression: (int16x8)hydride.node.14((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 160, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 15
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.15
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 4) <1 x i1>
; (reg 0) <8 x i32>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t422, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t424, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t426, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t427, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t429, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t431))), x8(32767)), x8(-32768))), x8((int16)t432)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t426 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t431 maps to reg_7
t432 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 19.908073seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 15

Optimized expression: (int16x8)hydride.node.15((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 192, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 16
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8))
========================================
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x00 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x06 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.16
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 4) <1 x i1>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>
; (reg 6) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 3) <1 x i32>
; (reg 7) <1 x i32>
; (reg 1) <1 x i32>
; (reg 8) <1 x i16>
; (reg 0) <8 x i32>
; (reg 4) <1 x i1>
; (reg 2) <8 x i32>
; (reg 5) <8 x i32>
; (reg 6) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t434, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t436, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t438, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t439, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t441, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t443))), x8(32767)), x8(-32768))), x8((int16)t444)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t438 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t443 maps to reg_7
t444 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 19.587643seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 16

Optimized expression: (int16x8)hydride.node.16((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 224, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Starting synthesis for expr: 17
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier), x8((uint32)31)), x8(output_shift + -1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int32 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)) . #(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000 16) #t)) . #(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)) . #(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)) (#(struct:x8 (buf uint1 1)) . #(#f () 1)) (#(struct:x8 (buf int32 32)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-add (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)) (#(struct:vec-mul (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32 0 64) 2)) (#(struct:vec-shr (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)) (#(struct:vec-min (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 1)) (#(struct:vec-max (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)) (#(struct:vec-bwand (buf int32 256) (buf int32 256)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)) . #(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)) (#(struct:x8 (buf int16 16)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:int32x8 (buf int64 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)) (#(struct:vec-shr (buf int64 512) (buf uint64 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)) (#(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)) (#(struct:int32x8 (buf int16 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 0)) (#(struct:vec-sub (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)) (#(struct:vec-sat-add (buf int16 128) (buf int16 128)) . #(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 0)) (#(struct:vec-max (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)) (#(struct:vec-min (buf int16 128) (buf int16 128)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)) (#(struct:int16x8 (buf int32 256)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)) (#(struct:int64x8 (buf int32 256)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) . #(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)) (#(struct:x8 (buf uint8 8)) . #(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)) . #(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)) (#(struct:vec-add (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-max (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)) (#(struct:vec-bwand (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 512) 0)) (#(struct:vec-mul (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 2)) (#(struct:vec-min (buf int64 512) (buf int64 512)) . #(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)) (#(struct:int16x8 (buf uint8 64)) . #(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)) (#(struct:vec-if (buf uint1 8) (buf int32 256) (buf int32 256)) . #(#t #(struct:reg (bv #x1 4)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)) . #(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)) (#(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)) (#(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)) . #(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
Equivalent expression synthesized before, returned stored solution
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
(#(struct:int64x8 #(struct:buffer #<procedure:buffer-fn> int32 256)) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 256)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  512)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   512)
  512
  64)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    512)
   512
   64)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     512)
    512
    64)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      512)
     512
     64)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       512)
      512
      64)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        512)
       512
       64)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         512)
        512
        64)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          512)
         512
         64)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           512)
          512
          64)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            512)
           512
           64)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 (_mm256_min_epi16_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             512)
            512
            64)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  256
  32)
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  (_mm256_min_epi16_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              512)
             512
             64)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   256
   32)
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   (_mm256_min_epi16_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               512)
              512
              64)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    256
    32)
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    (_mm256_min_epi16_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                512)
               512
               64)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     256
     32)
    256
    32)
   128
   16
   32
   0)
  128
  16)
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x00 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x02 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x05 8)) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x06 8)) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 512) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit (bv #x00000000000000000000000000000000 128))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     (_mm256_min_epi16_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl (reg (bv #x00 8)) 256 32 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl (reg (bv #x02 8)) 256 32 64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 512)
                512
                64)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl (reg (bv #x05 8)) 256 32 64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl (reg (bv #x06 8)) 256 32 64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  512)
                 512
                 64)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      256
      32)
     256
     32)
    128
    16
    32
    0)
   128
   16)
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  128
  16)
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'int32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (bv #x00 8))
========================================
; (reg (bv #x07 8)) <1 x i32>
; (reg (bv #x03 8)) <1 x i32>
; (reg (bv #x01 8)) <1 x i32>
; (reg (bv #x02 8)) <8 x i32>
; (reg (bv #x04 8)) <1 x i1>
; (reg (bv #x08 8)) <1 x i16>
; (reg (bv #x06 8)) <8 x i32>
; (reg (bv #x05 8)) <8 x i32>
; (reg (bv #x00 8)) <8 x i32>

(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.17
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 7) <1 x i32>
; (reg 3) <1 x i32>
; (reg 1) <1 x i32>
; (reg 2) <8 x i32>
; (reg 4) <1 x i1>
; (reg 8) <1 x i16>
; (reg 6) <8 x i32>
; (reg 5) <8 x i32>
; (reg 0) <8 x i32>


(_mm512_max_epi16_dsl (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  
(_mm256_min_epi16_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 3)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 0)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 2)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 7)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 5)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(reg 6)  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <1 x i512>
  512  512  );<1 x i512>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 1)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 2)
(vec-shr '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 1)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 0)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-sub '(buf int16 128) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 0)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 0)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 2)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t446, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t448, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select((uint1)t450, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp(t451, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp(t453, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(t455))), x8(32767)), x8(-32768))), x8((int16)t456)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
output_multiplier maps to reg_1
Cast operation into: int64x8
Cast operation into: int64x8
output_shift maps to reg_3
t450 maps to reg_4
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int64x8
t455 maps to reg_7
t456 maps to reg_8
Synthesis completed with return code:	0
Synthesis took 19.721193seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift)) + (int32x8)bitwise_and(select(0 < output_shift, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)])*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8(output_shift + -1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 17

Optimized expression: (int16x8)hydride.node.17((int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_multiplier, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_shift, 0 < output_shift, (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], (int32x8)multiplied[ramp((output.s0.c.ci.cii.cii*8) + 256, 1, 8) aligned(8, 0)], output_shift + -1, int16((uint8)output_zero))
Hydride Function: declare <8 x i32> @hydride.node.0(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2038 = call <8 x i32> @hydride.node.0(<8 x i32> %1981, <8 x i8> %2031, i8 %filter_zero69, i16 %2037) #17
Hydride Function: declare <8 x i32> @hydride.node.1(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2107 = call <8 x i32> @hydride.node.1(<8 x i32> %2050, <8 x i8> %2100, i8 %filter_zero69, i16 %2106) #17
Hydride Function: declare <8 x i32> @hydride.node.2(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2177 = call <8 x i32> @hydride.node.2(<8 x i32> %2120, <8 x i8> %2170, i8 %filter_zero69, i16 %2176) #17
Hydride Function: declare <8 x i32> @hydride.node.3(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2247 = call <8 x i32> @hydride.node.3(<8 x i32> %2190, <8 x i8> %2240, i8 %filter_zero69, i16 %2246) #17
Hydride Function: declare <8 x i32> @hydride.node.4(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2317 = call <8 x i32> @hydride.node.4(<8 x i32> %2260, <8 x i8> %2310, i8 %filter_zero69, i16 %2316) #17
Hydride Function: declare <8 x i32> @hydride.node.5(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2387 = call <8 x i32> @hydride.node.5(<8 x i32> %2330, <8 x i8> %2380, i8 %filter_zero69, i16 %2386) #17
Hydride Function: declare <8 x i32> @hydride.node.6(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2457 = call <8 x i32> @hydride.node.6(<8 x i32> %2400, <8 x i8> %2450, i8 %filter_zero69, i16 %2456) #17
Hydride Function: declare <8 x i32> @hydride.node.7(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2527 = call <8 x i32> @hydride.node.7(<8 x i32> %2470, <8 x i8> %2520, i8 %filter_zero69, i16 %2526) #17
Hydride Function: declare <8 x i32> @hydride.node.8(<8 x i32>, <8 x i8>, i8, i16)

Generating Hydride Call:   %2597 = call <8 x i32> @hydride.node.8(<8 x i32> %2540, <8 x i8> %2590, i8 %filter_zero69, i16 %2596) #17
Hydride Function: declare <8 x i16> @hydride.node.9(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2630 = call <8 x i16> @hydride.node.9(<8 x i32> %2611, i32 %output_multiplier62, <8 x i32> %2616, i32 %output_shift63, i1 %2617, <8 x i32> %2622, <8 x i32> %2627, i32 %2628, i16 %2629) #17
Hydride Function: declare <8 x i16> @hydride.node.10(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2687 = call <8 x i16> @hydride.node.10(<8 x i32> %2665, i32 %output_multiplier62, <8 x i32> %2671, i32 %output_shift63, i1 %2672, <8 x i32> %2678, <8 x i32> %2684, i32 %2685, i16 %2686) #17
Hydride Function: declare <8 x i16> @hydride.node.11(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2744 = call <8 x i16> @hydride.node.11(<8 x i32> %2722, i32 %output_multiplier62, <8 x i32> %2728, i32 %output_shift63, i1 %2729, <8 x i32> %2735, <8 x i32> %2741, i32 %2742, i16 %2743) #17
Hydride Function: declare <8 x i16> @hydride.node.12(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2801 = call <8 x i16> @hydride.node.12(<8 x i32> %2779, i32 %output_multiplier62, <8 x i32> %2785, i32 %output_shift63, i1 %2786, <8 x i32> %2792, <8 x i32> %2798, i32 %2799, i16 %2800) #17
Hydride Function: declare <8 x i16> @hydride.node.13(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2858 = call <8 x i16> @hydride.node.13(<8 x i32> %2836, i32 %output_multiplier62, <8 x i32> %2842, i32 %output_shift63, i1 %2843, <8 x i32> %2849, <8 x i32> %2855, i32 %2856, i16 %2857) #17
Hydride Function: declare <8 x i16> @hydride.node.14(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2915 = call <8 x i16> @hydride.node.14(<8 x i32> %2893, i32 %output_multiplier62, <8 x i32> %2899, i32 %output_shift63, i1 %2900, <8 x i32> %2906, <8 x i32> %2912, i32 %2913, i16 %2914) #17
Hydride Function: declare <8 x i16> @hydride.node.15(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %2972 = call <8 x i16> @hydride.node.15(<8 x i32> %2950, i32 %output_multiplier62, <8 x i32> %2956, i32 %output_shift63, i1 %2957, <8 x i32> %2963, <8 x i32> %2969, i32 %2970, i16 %2971) #17
Hydride Function: declare <8 x i16> @hydride.node.16(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %3029 = call <8 x i16> @hydride.node.16(<8 x i32> %3007, i32 %output_multiplier62, <8 x i32> %3013, i32 %output_shift63, i1 %3014, <8 x i32> %3020, <8 x i32> %3026, i32 %3027, i16 %3028) #17
Hydride Function: declare <8 x i16> @hydride.node.17(<8 x i32>, i32, <8 x i32>, i32, i1, <8 x i32>, <8 x i32>, i32, i16)

Generating Hydride Call:   %3086 = call <8 x i16> @hydride.node.17(<8 x i32> %3064, i32 %output_multiplier62, <8 x i32> %3070, i32 %output_shift63, i1 %3071, <8 x i32> %3077, <8 x i32> %3083, i32 %3084, i16 %3085) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'fully_connected' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
