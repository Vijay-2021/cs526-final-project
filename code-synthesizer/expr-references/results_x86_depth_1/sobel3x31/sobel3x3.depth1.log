mkdir sobel3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g sobel3x3/src/sobel3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o sobel3x3/bin/sobel3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./sobel3x3/bin/sobel3x3_generator \
	-t 0 \
	-o sobel3x3/bin \
	-g sobel3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f sobel3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_233_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_233

base_233_grammar.rkt
/tmp/base_233_grammar.rkt
Writing [{ 
"name": "base_233" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_233_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_233_spec.JSON /tmp/base_233_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_233 ... 

Grammar:
#<procedure:base_233>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xba332d7cec08cba2ea0541b20c30a0bd1b85435df8df1f6e7bb891fccec45a2b 256))
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x00ba0033002d007c00ec000800cb00a200ea0005004100b2000c003000a000bd001b00850043005d00f800df001f006e007b00b8009100fc00ce00c4005a002b 512)
invoke-spec-lane with env: #((bv #xba332d7cec08cba2ea0541b20c30a0bd1b85435df8df1f6e7bb891fccec45a2b 256))
Concrete counter examples:
(#((bv #xba332d7cec08cba2ea0541b20c30a0bd1b85435df8df1f6e7bb891fccec45a2b 256)) #((bv #xde3f06ee6459d11ad3783d2fb46af1ce05a16a52c74b2eaa79d73d61514520ba 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xba332d7cec08cba2ea0541b20c30a0bd1b85435df8df1f6e7bb891fccec45a2b 256))
Spec Produced:
(bv #x002b 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xde3f06ee6459d11ad3783d2fb46af1ce05a16a52c74b2eaa79d73d61514520ba 256))
Spec Produced:
(bv #x00ba 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint16x32 '(buf uint8 256))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 9.319655seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint16x32)hydride.node.0((uint8x32)bounded_input[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.425275seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint16x32)hydride.node.1((uint8x32)bounded_input[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.2
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.432279seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(0, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint16x32)hydride.node.2((uint8x32)bounded_input[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.3
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.367623seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(32, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 3

Optimized expression: (uint16x32)hydride.node.3((uint8x32)bounded_input[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.4
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.532563seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(64, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 4

Optimized expression: (uint16x32)hydride.node.4((uint8x32)bounded_input[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.5
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Starting synthesis for expr: 5
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.646001seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(96, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 5

Optimized expression: (uint16x32)hydride.node.5((uint8x32)bounded_input[ramp(96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.6
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Starting synthesis for expr: 6
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.735508seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(128, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 6

Optimized expression: (uint16x32)hydride.node.6((uint8x32)bounded_input[ramp(128, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.7
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Starting synthesis for expr: 7
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.713816seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(160, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 7

Optimized expression: (uint16x32)hydride.node.7((uint8x32)bounded_input[ramp(160, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.8
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Starting synthesis for expr: 8
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.641940seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(192, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 8

Optimized expression: (uint16x32)hydride.node.8((uint8x32)bounded_input[ramp(192, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.9
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 8.335921seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(224, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 9

Optimized expression: (uint16x32)hydride.node.9((uint8x32)bounded_input[ramp(224, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(uint16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(uint16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.10
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression before InlineLets: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression after InlineLets: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Expression before abstraction: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Input expression to synthesize: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Cast operation into: uint16x32
Synthesis completed with return code:	0
Synthesis took 7.802483seconds ...
Expression after replacae abstraction: uint16x32((uint8x32)bounded_input[ramp(256, 1, 32)])
Generating Call with type: uint16x32 and lanes 32
Ending synthesis for expr: 10

Optimized expression: (uint16x32)hydride.node.10((uint8x32)bounded_input[ramp(256, 1, 32)])
rm: cannot remove '/tmp/base_6875_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6875

base_6875_grammar.rkt
/tmp/base_6875_grammar.rkt
Writing [{ 
"name": "base_6875" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6875_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6875_spec.JSON /tmp/base_6875_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6875 ... 

Grammar:
#<procedure:base_6875>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5ac791d2faac9dbb9fd80a9fe412c6b33da71ccc905d954475cf88215ada48a5 256) (bv #x3a2b49bd81b089b34059219b10ebd30c85ed6f2bc82222e28bac70d952de37ee 256))
(vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x94f2db8f7c5c276ee0312c3af4fd99bfc3948bf7587fb826017bf8faadb88093 256)
invoke-spec-lane with env: #((bv #x5ac791d2faac9dbb9fd80a9fe412c6b33da71ccc905d954475cf88215ada48a5 256) (bv #x3a2b49bd81b089b34059219b10ebd30c85ed6f2bc82222e28bac70d952de37ee 256))
Concrete counter examples:
(#((bv #x5ac791d2faac9dbb9fd80a9fe412c6b33da71ccc905d954475cf88215ada48a5 256) (bv #x3a2b49bd81b089b34059219b10ebd30c85ed6f2bc82222e28bac70d952de37ee 256)) #((bv #xc8b978d3c683592b9da86e647af9b16bf250c036b0e7c067a49a1054ae91c056 256) (bv #xf99897cd81fea2158d71d439bbec4aeb9359b9d88024dbca329e623b703f4928 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5ac791d2faac9dbb9fd80a9fe412c6b33da71ccc905d954475cf88215ada48a5 256) (bv #x3a2b49bd81b089b34059219b10ebd30c85ed6f2bc82222e28bac70d952de37ee 256))
Spec Produced:
(bv #x8093 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc8b978d3c683592b9da86e647af9b16bf250c036b0e7c067a49a1054ae91c056 256) (bv #xf99897cd81fea2158d71d439bbec4aeb9359b9d88024dbca329e623b703f4928 256))
Spec Produced:
(bv #x097e 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1rm: cannot remove '/tmp/base_1410_spec.JSON': No such file or directory
Pruning _mm256_sll_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_srl_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_slli_epi16 as it has an argument of size 8 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-add '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_1410

base_1410_grammar.rkt
/tmp/base_1410_grammar.rkt
Writing [{ 
"name": "base_1410" , 
"semantics": [ "(bvshl zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1410_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1410_spec.JSON /tmp/base_1410_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1410 ... 

Grammar:
#<procedure:base_1410>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
(vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
Concrete counter examples:
(#((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256)) #((bv #xf28b5d30b1bfa515ce4aa6ef7235bea20f3a8c6a566f1a23f739fc1059b1fb83 256) (bv #x9ae5d48603c3ddf860bbbd385410f026443fe5cafe2ad5759ec4c4ffb5a0c2fe 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf28b5d30b1bfa515ce4aa6ef7235bea20f3a8c6a566f1a23f739fc1059b1fb83 256) (bv #x9ae5d48603c3ddf860bbbd385410f026443fe5cafe2ad5759ec4c4ffb5a0c2fe 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$4 sym_bv$5)
(vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvshl (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (bvshl (extract 239 224 sym_bv$4) (extract 239 224 sym_bv$5))) (bvshl (extract 223 208 sym_bv$4) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
(vec-shl (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
Concrete counter examples:
(#((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256)) #((bv #xf28b5d30b1bfa515ce4aa6ef7235bea20f3a8c6a566f1a23f739fc1059b1fb83 256) (bv #x9ae5d48603c3ddf860bbbd385410f026443fe5cafe2ad5759ec4c4ffb5a0c2fe 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1f06818b1a3ae6e3692a7c367e27ae932bd564f5777c25135b638532b2833fc1 256) (bv #x0d348e62e15d31ea08395fe3c576cfcd0376b401cf29d8b431c574d8528d4313 256))
Spec Produced:
(bv #x0000 16)
rm: cannot remove '/tmp/base_954_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf28b5d30b1bfa515ce4aa6ef7235bea20f3a8c6a566f1a23f739fc1059b1fb83 256) (bv #x9ae5d48603c3ddf860bbbd385410f026443fe5cafe2ad5759ec4c4ffb5a0c2fe 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shl '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)
Synthesis step completed!
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_954

base_954_grammar.rkt
/tmp/base_954_grammar.rkt
Writing [{ 
"name": "base_954" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 16]] 
}
] to file /tmp/base_954_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_954_spec.JSON /tmp/base_954_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_954 ... 

Grammar:
#<procedure:base_954>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification failed ...
	spec produced: (bv #x0001000100010001000100010001000100010001000100010001000100010001 256) 256 
	synthesized result produced: (bv #x0000000100000001000000010000000100000001000000010000000100000001 256) 256

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0001 16) #f))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.11
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t684, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t687, 1, 16)] + (uint16x16)input_16[ramp(t691, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 13.245803seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)] + (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 11

Optimized expression: (uint16x16)hydride.node.11((uint16x16)input_16[ramp(((t425 % 16)*(t319 + 32)) + t302, 1, 16)], (uint16x16)input_16[ramp((((t425 + 1) % 16)*(t319 + 32)) + t302, 1, 16)], (uint16x16)input_16[ramp((((t425 + 15) % 16)*(t319 + 32)) + t302, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.12
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Starting synthesis for expr: 12
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t695, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t699, 1, 16)] + (uint16x16)input_16[ramp(t704, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.093213seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 12

Optimized expression: (uint16x16)hydride.node.12((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 16, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 16, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.13
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Starting synthesis for expr: 13
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t709, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t713, 1, 16)] + (uint16x16)input_16[ramp(t718, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.300703seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 13

Optimized expression: (uint16x16)hydride.node.13((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 32, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 32, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.14
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Starting synthesis for expr: 14
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t723, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t727, 1, 16)] + (uint16x16)input_16[ramp(t732, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.901539seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 14

Optimized expression: (uint16x16)hydride.node.14((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 48, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 48, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.15
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Starting synthesis for expr: 15
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t737, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t741, 1, 16)] + (uint16x16)input_16[ramp(t746, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.411657seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 15

Optimized expression: (uint16x16)hydride.node.15((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 64, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 64, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Starting synthesis for expr: 16
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t751, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t755, 1, 16)] + (uint16x16)input_16[ramp(t760, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.045082seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 16

Optimized expression: (uint16x16)hydride.node.16((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 80, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 80, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Starting synthesis for expr: 17
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t765, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t769, 1, 16)] + (uint16x16)input_16[ramp(t774, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.245050seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 17

Optimized expression: (uint16x16)hydride.node.17((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 96, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 96, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_17 from hydride_hash_17.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.18.rkt

Completed writing to file ...
Append [; hydride.node.18
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.18.rkt /tmp/test.ll
Storing synth log map synth_hash_18 to /tmp/hydride_hash_18.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_18 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_18.rkt

Completed writing to file ...
Starting synthesis for expr: 18
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t779, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t783, 1, 16)] + (uint16x16)input_16[ramp(t788, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.035858seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 18

Optimized expression: (uint16x16)hydride.node.18((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 112, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 112, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_18 from hydride_hash_18.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.19.rkt

Completed writing to file ...
Append [; hydride.node.19
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.19.rkt /tmp/test.ll
Storing synth log map synth_hash_19 to /tmp/hydride_hash_19.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_19 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_19.rkt

Completed writing to file ...
Starting synthesis for expr: 19
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t793, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t797, 1, 16)] + (uint16x16)input_16[ramp(t802, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.037411seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)] + (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 19

Optimized expression: (uint16x16)hydride.node.19((uint16x16)input_16[ramp((((t425 % 16)*(t319 + 32)) + t302) + 128, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 1) % 16)*(t319 + 32)) + t302) + 128, 1, 16)], (uint16x16)input_16[ramp(((((t425 + 15) % 16)*(t319 + 32)) + t302) + 128, 1, 16)])
Starting synthesis for expr: 20
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
rm: cannot remove '/tmp/base_9910_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sub_epi16 with score: 5 belonging to target agnostic class _mm_sub_pi16
Adding:  _mm256_hsub_epi16 with score: 5 belonging to target agnostic class _mm256_hsub_epi32
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_19 from hydride_hash_19.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_9910

base_9910_grammar.rkt
/tmp/base_9910_grammar.rkt
Writing [{ 
"name": "base_9910" , 
"semantics": [ "(extract bvsub zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9910_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9910_spec.JSON /tmp/base_9910_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9910 ... 

Grammar:
#<procedure:base_9910>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x53f16b5b56493f43aefd8f3aaa0eda052528b3f5268a4b9dec0ed796c359807b 256) (bv #xa2388c288e282416912d99fae1011c6f46be04b4cc656549c281de09c7b0ac9b 256))
(vec-sub (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xb1b9df33c8211b2d1dd0f540c90dbd96de6aaf415a25e654298df98dfba9d3e0 256)
invoke-spec-lane with env: #((bv #x53f16b5b56493f43aefd8f3aaa0eda052528b3f5268a4b9dec0ed796c359807b 256) (bv #xa2388c288e282416912d99fae1011c6f46be04b4cc656549c281de09c7b0ac9b 256))
Concrete counter examples:
(#((bv #x53f16b5b56493f43aefd8f3aaa0eda052528b3f5268a4b9dec0ed796c359807b 256) (bv #xa2388c288e282416912d99fae1011c6f46be04b4cc656549c281de09c7b0ac9b 256)) #((bv #x154ec96a6722f9fac3d35638af68b9c565ca24903c16aad50513fbcf61660c1b 256) (bv #x70b7bea6f6c7db16abd6e97bf369348c2585aa66302920b7511606c75d3cd5a7 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x53f16b5b56493f43aefd8f3aaa0eda052528b3f5268a4b9dec0ed796c359807b 256) (bv #xa2388c288e282416912d99fae1011c6f46be04b4cc656549c281de09c7b0ac9b 256))
Spec Produced:
(bv #xd3e0 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x154ec96a6722f9fac3d35638af68b9c565ca24903c16aad50513fbcf61660c1b 256) (bv #x70b7bea6f6c7db16abd6e97bf369348c2585aa66302920b7511606c75d3cd5a7 256))
Spec Produced:
(bv #x3674 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_sub_pi16_dsl (regPruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu16 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
 (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-sub '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_355

base_355_grammar.rkt
/tmp/base_355_grammar.rkt
Writing [{ 
"name": "base_355" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_355_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_355_spec.JSON /tmp/base_355_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_355 ... 

Grammar:
#<procedure:base_355>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xd611abeb74fec092f7c02b3ed38ed9f79bea6f6cb481e39fa54a419e8570d3ae 256)
invoke-spec-lane with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
Concrete counter examples:
(#((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256)) #((bv #x02ef04dd9481d7f6d42c167818d7a0096989a78f09935acb994161a4dffea3b5 256) (bv #x5d787fce8066164bdfb8921a26bffce914a8df746474dc4f6b425885a8a129a7 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
Spec Produced:
(bv #xd3ae 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x02ef04dd9481d7f6d42c167818d7a0096989a78f09935acb994161a4dffea3b5 256) (bv #x5d787fce8066164bdfb8921a26bffce914a8df746474dc4f6b425885a8a129a7 256))
Spec Produced:
(bv #xa3b5 16)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$4 sym_bv$5)
(vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 240 sym_bv$5) (extract 255 240 sym_bv$4)) (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (ite (bvule (extract 239 224 sym_bv$5) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256)]
 [sym_bv$5 (bv #x6000010081018101001000000000000400000000000000000000000000000000 256)])
Verification failed :(
#((bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) (bv #x6000010081018101001000000000000400000000000000000000000000000000 256))
invoke-spec with env: #((bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) (bv #x6000010081018101001000000000000400000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x6000a69681018101fe62fe027e02fe0200000000000000000000000000000000 256)
(bv #x6000a69681018101fe62fe027e02fe0200000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x6000a69681018101fe62fe027e02fe0200000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) (bv #x6000010081018101001000000000000400000000000000000000000000000000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x6000a69681018101fe62fe027e02fe0200000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1))
differing-lanes
'(12)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xd611abeb74fec092f7c02b3ed38ed9f79bea6f6cb481e39fa54a419e8570d3ae 256)
invoke-spec-lane with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
Concrete counter examples:
(#((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256)) #((bv #x02ef04dd9481d7f6d42c167818d7a0096989a78f09935acb994161a4dffea3b5 256) (bv #x5d787fce8066164bdfb8921a26bffce914a8df746474dc4f6b425885a8a129a7 256)) #((bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) (bv #x6000010081018101001000000000000400000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 12)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4044abeb74fe4951f7c00eaa385ecfc183e02cc07615b81ca54a419e8570d3ae 256) (bv #xd61149e431b9c09242302b3ed38ed9f79bea6f6cb481e39f65a830bd248f3670 256))
Spec Produced:
(bv #xd3ae 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x02ef04dd9481d7f6d42c167818d7a0096989a78f09935acb994161a4dffea3b5 256) (bv #x5d787fce8066164bdfb8921a26bffce914a8df746474dc4f6b425885a8a129a7 256))
Spec Produced:
(bv #xa3b5 16)
Synthesize by lane...
Lane Index
12
invoke-spec-lane with env: #((bv #x53aea69645184518fe62fe027e02fe0200000000000000000000000000000000 256) (bv #x6000010081018101001000000000000400000000000000000000000000000000 256))
Spec Produced:
(bv #x8101 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-max '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_7678
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu16 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4

base_7678_grammar.rkt
/tmp/base_7678_grammar.rkt
Writing [{ 
"name": "base_7678" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7678_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7678_spec.JSON /tmp/base_7678_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7678 ... 

Grammar:
#<procedure:base_7678>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa99fb45606532e8cc94ab0a48fd01bffb0809496edcf917ebcf57efe44ce221c 256) (bv #xf2ecd8ccb853bf896c452c93f0513579e1f153bf9fd6bf20a3f6a750419f86e5 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xa99fb45606532e8c6c452c938fd01bffb08053bf9fd6917ea3f67efe419f221c 256)
invoke-spec-lane with env: #((bv #xa99fb45606532e8cc94ab0a48fd01bffb0809496edcf917ebcf57efe44ce221c 256) (bv #xf2ecd8ccb853bf896c452c93f0513579e1f153bf9fd6bf20a3f6a750419f86e5 256))
Concrete counter examples:
(#((bv #xa99fb45606532e8cc94ab0a48fd01bffb0809496edcf917ebcf57efe44ce221c 256) (bv #xf2ecd8ccb853bf896c452c93f0513579e1f153bf9fd6bf20a3f6a750419f86e5 256)) #((bv #x8ae520f77cbb6b8d806a87d9c49ccf7e6e1632dbe54cff65e3947ef1413bb0b2 256) (bv #x2c3972943e8e0df867f850a2ce2435bf4f55f1cc7a26747a03c98d34845086cc 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa99fb45606532e8cc94ab0a48fd01bffb0809496edcf917ebcf57efe44ce221c 256) (bv #xf2ecd8ccb853bf896c452c93f0513579e1f153bf9fd6bf20a3f6a750419f86e5 256))
Spec Produced:
(bv #x221c 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8ae520f77cbb6b8d806a87d9c49ccf7e6e1632dbe54cff65e3947ef1413bb0b2 256) (bv #x2c3972943e8e0df867f850a2ce2435bf4f55f1cc7a26747a03c98d34845086cc 256))
Spec Produced:
(bv #x86cc 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-min '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.20
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.20.rkt

Completed writing to file ...
Append [; hydride.node.20
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.20.rkt /tmp/test.ll
Storing synth log map synth_hash_20 to /tmp/hydride_hash_20.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_20 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_20.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 12.579343seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 20

Optimized expression: (uint16x16)hydride.node.20((uint16x16)sobel_y_avg[ramp(0, 1, 16)], (uint16x16)sobel_y_avg[ramp(2, 1, 16)])
Starting synthesis for expr: 21
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_20 from hydride_hash_20.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.21
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.21.rkt

Completed writing to file ...
Append [; hydride.node.21
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.21.rkt /tmp/test.ll
Storing synth log map synth_hash_21 to /tmp/hydride_hash_21.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_21 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_21.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.125309seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 21

Optimized expression: (uint16x16)hydride.node.21((uint16x16)sobel_y_avg[ramp(16, 1, 16)], (uint16x16)sobel_y_avg[ramp(18, 1, 16)])
Starting synthesis for expr: 22
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_21 from hydride_hash_21.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.22.rkt

Completed writing to file ...
Append [; hydride.node.22
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.22.rkt /tmp/test.ll
Storing synth log map synth_hash_22 to /tmp/hydride_hash_22.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_22 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_22.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.792367seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 22

Optimized expression: (uint16x16)hydride.node.22((uint16x16)sobel_y_avg[ramp(32, 1, 16)], (uint16x16)sobel_y_avg[ramp(34, 1, 16)])
Starting synthesis for expr: 23
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_22 from hydride_hash_22.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.23
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.23.rkt

Completed writing to file ...
Append [; hydride.node.23
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.23.rkt /tmp/test.ll
Storing synth log map synth_hash_23 to /tmp/hydride_hash_23.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_23 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_23.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.717601seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 23

Optimized expression: (uint16x16)hydride.node.23((uint16x16)sobel_y_avg[ramp(48, 1, 16)], (uint16x16)sobel_y_avg[ramp(50, 1, 16)])
Starting synthesis for expr: 24
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_23 from hydride_hash_23.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.24
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.24.rkt

Completed writing to file ...
Append [; hydride.node.24
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.24.rkt /tmp/test.ll
Storing synth log map synth_hash_24 to /tmp/hydride_hash_24.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_24 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_24.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.078023seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 24

Optimized expression: (uint16x16)hydride.node.24((uint16x16)sobel_y_avg[ramp(64, 1, 16)], (uint16x16)sobel_y_avg[ramp(66, 1, 16)])
Starting synthesis for expr: 25
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_24 from hydride_hash_24.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.25
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.25.rkt

Completed writing to file ...
Append [; hydride.node.25
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.25.rkt /tmp/test.ll
Storing synth log map synth_hash_25 to /tmp/hydride_hash_25.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_25 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_25.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.251242seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 25

Optimized expression: (uint16x16)hydride.node.25((uint16x16)sobel_y_avg[ramp(80, 1, 16)], (uint16x16)sobel_y_avg[ramp(82, 1, 16)])
Starting synthesis for expr: 26
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_25 from hydride_hash_25.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.26
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.26.rkt

Completed writing to file ...
Append [; hydride.node.26
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.26.rkt /tmp/test.ll
Storing synth log map synth_hash_26 to /tmp/hydride_hash_26.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_26 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_26.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.738930seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 26

Optimized expression: (uint16x16)hydride.node.26((uint16x16)sobel_y_avg[ramp(96, 1, 16)], (uint16x16)sobel_y_avg[ramp(98, 1, 16)])
Starting synthesis for expr: 27
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_26 from hydride_hash_26.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.27
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.27.rkt

Completed writing to file ...
Append [; hydride.node.27
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.27.rkt /tmp/test.ll
Storing synth log map synth_hash_27 to /tmp/hydride_hash_27.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_27 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_27.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.035214seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]) - min((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 27

Optimized expression: (uint16x16)hydride.node.27((uint16x16)sobel_y_avg[ramp(112, 1, 16)], (uint16x16)sobel_y_avg[ramp(114, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_27 from hydride_hash_27.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.28
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.28.rkt

Completed writing to file ...
Append [; hydride.node.28
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.28.rkt /tmp/test.ll
Storing synth log map synth_hash_28 to /tmp/hydride_hash_28.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_28 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_28.rkt

Completed writing to file ...
Starting synthesis for expr: 28
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t821, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t822, 1, 16)] + (uint16x16)input_16[ramp(t823, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.444279seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t239 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t239 + 66, 1, 16)] + (uint16x16)input_16[ramp(t239 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 28

Optimized expression: (uint16x16)hydride.node.28((uint16x16)input_16[ramp(t239 + 65, 1, 16)], (uint16x16)input_16[ramp(t239 + 66, 1, 16)], (uint16x16)input_16[ramp(t239 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_28 from hydride_hash_28.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.29
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.29.rkt

Completed writing to file ...
Append [; hydride.node.29
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.29.rkt /tmp/test.ll
Storing synth log map synth_hash_29 to /tmp/hydride_hash_29.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_29 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_29.rkt

Completed writing to file ...
Starting synthesis for expr: 29
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t826, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t827, 1, 16)] + (uint16x16)input_16[ramp(t828, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.327343seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t240 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t240 + 82, 1, 16)] + (uint16x16)input_16[ramp(t240 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 29

Optimized expression: (uint16x16)hydride.node.29((uint16x16)input_16[ramp(t240 + 81, 1, 16)], (uint16x16)input_16[ramp(t240 + 82, 1, 16)], (uint16x16)input_16[ramp(t240 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_29 from hydride_hash_29.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.30
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.30.rkt

Completed writing to file ...
Append [; hydride.node.30
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.30.rkt /tmp/test.ll
Storing synth log map synth_hash_30 to /tmp/hydride_hash_30.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_30 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_30.rkt

Completed writing to file ...
Starting synthesis for expr: 30
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t831, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t832, 1, 16)] + (uint16x16)input_16[ramp(t833, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.126712seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t241 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t241 + 98, 1, 16)] + (uint16x16)input_16[ramp(t241 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 30

Optimized expression: (uint16x16)hydride.node.30((uint16x16)input_16[ramp(t241 + 97, 1, 16)], (uint16x16)input_16[ramp(t241 + 98, 1, 16)], (uint16x16)input_16[ramp(t241 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_30 from hydride_hash_30.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.31
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.31.rkt

Completed writing to file ...
Append [; hydride.node.31
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.31.rkt /tmp/test.ll
Storing synth log map synth_hash_31 to /tmp/hydride_hash_31.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_31 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_31.rkt

Completed writing to file ...
Starting synthesis for expr: 31
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t836, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t837, 1, 16)] + (uint16x16)input_16[ramp(t838, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.196001seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t242 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t242 + 114, 1, 16)] + (uint16x16)input_16[ramp(t242 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 31

Optimized expression: (uint16x16)hydride.node.31((uint16x16)input_16[ramp(t242 + 113, 1, 16)], (uint16x16)input_16[ramp(t242 + 114, 1, 16)], (uint16x16)input_16[ramp(t242 + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_31 from hydride_hash_31.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.32
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.32.rkt

Completed writing to file ...
Append [; hydride.node.32
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.32.rkt /tmp/test.ll
Storing synth log map synth_hash_32 to /tmp/hydride_hash_32.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_32 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_32.rkt

Completed writing to file ...
Starting synthesis for expr: 32
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t841, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t842, 1, 16)] + (uint16x16)input_16[ramp(t843, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.066637seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t243 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t243 + 66, 1, 16)] + (uint16x16)input_16[ramp(t243 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 32

Optimized expression: (uint16x16)hydride.node.32((uint16x16)input_16[ramp(t243 + 65, 1, 16)], (uint16x16)input_16[ramp(t243 + 66, 1, 16)], (uint16x16)input_16[ramp(t243 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_32 from hydride_hash_32.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.33
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.33.rkt

Completed writing to file ...
Append [; hydride.node.33
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.33.rkt /tmp/test.ll
Storing synth log map synth_hash_33 to /tmp/hydride_hash_33.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_33 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_33.rkt

Completed writing to file ...
Starting synthesis for expr: 33
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t846, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t847, 1, 16)] + (uint16x16)input_16[ramp(t848, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.096810seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t244 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t244 + 82, 1, 16)] + (uint16x16)input_16[ramp(t244 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 33

Optimized expression: (uint16x16)hydride.node.33((uint16x16)input_16[ramp(t244 + 81, 1, 16)], (uint16x16)input_16[ramp(t244 + 82, 1, 16)], (uint16x16)input_16[ramp(t244 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_33 from hydride_hash_33.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.34
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.34.rkt

Completed writing to file ...
Append [; hydride.node.34
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.34.rkt /tmp/test.ll
Storing synth log map synth_hash_34 to /tmp/hydride_hash_34.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_34 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_34.rkt

Completed writing to file ...
Starting synthesis for expr: 34
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t851, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t852, 1, 16)] + (uint16x16)input_16[ramp(t853, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.783842seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t245 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t245 + 98, 1, 16)] + (uint16x16)input_16[ramp(t245 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 34

Optimized expression: (uint16x16)hydride.node.34((uint16x16)input_16[ramp(t245 + 97, 1, 16)], (uint16x16)input_16[ramp(t245 + 98, 1, 16)], (uint16x16)input_16[ramp(t245 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_34 from hydride_hash_34.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.35
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.35.rkt

Completed writing to file ...
Append [; hydride.node.35
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.35.rkt /tmp/test.ll
Storing synth log map synth_hash_35 to /tmp/hydride_hash_35.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_35 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_35.rkt

Completed writing to file ...
Starting synthesis for expr: 35
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t856, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t857, 1, 16)] + (uint16x16)input_16[ramp(t858, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.930281seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t246 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t246 + 114, 1, 16)] + (uint16x16)input_16[ramp(t246 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 35

Optimized expression: (uint16x16)hydride.node.35((uint16x16)input_16[ramp(t246 + 113, 1, 16)], (uint16x16)input_16[ramp(t246 + 114, 1, 16)], (uint16x16)input_16[ramp(t246 + 112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_35 from hydride_hash_35.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.36
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.36.rkt

Completed writing to file ...
Append [; hydride.node.36
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.36.rkt /tmp/test.ll
Storing synth log map synth_hash_36 to /tmp/hydride_hash_36.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_36 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_36.rkt

Completed writing to file ...
Starting synthesis for expr: 36
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t861, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t862, 1, 16)] + (uint16x16)input_16[ramp(t863, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.103769seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 65, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 66, 1, 16)] + (uint16x16)input_16[ramp(t306 + 64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 36

Optimized expression: (uint16x16)hydride.node.36((uint16x16)input_16[ramp(t306 + 65, 1, 16)], (uint16x16)input_16[ramp(t306 + 66, 1, 16)], (uint16x16)input_16[ramp(t306 + 64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_36 from hydride_hash_36.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.37
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.37.rkt

Completed writing to file ...
Append [; hydride.node.37
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.37.rkt /tmp/test.ll
Storing synth log map synth_hash_37 to /tmp/hydride_hash_37.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_37 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_37.rkt

Completed writing to file ...
Starting synthesis for expr: 37
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t864, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t865, 1, 16)] + (uint16x16)input_16[ramp(t866, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.269136seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 81, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 82, 1, 16)] + (uint16x16)input_16[ramp(t306 + 80, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 37

Optimized expression: (uint16x16)hydride.node.37((uint16x16)input_16[ramp(t306 + 81, 1, 16)], (uint16x16)input_16[ramp(t306 + 82, 1, 16)], (uint16x16)input_16[ramp(t306 + 80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_37 from hydride_hash_37.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.38
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.38.rkt

Completed writing to file ...
Append [; hydride.node.38
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.38.rkt /tmp/test.ll
Storing synth log map synth_hash_38 to /tmp/hydride_hash_38.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_38 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_38.rkt

Completed writing to file ...
Starting synthesis for expr: 38
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t867, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t868, 1, 16)] + (uint16x16)input_16[ramp(t869, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.237159seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 97, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 98, 1, 16)] + (uint16x16)input_16[ramp(t306 + 96, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 38

Optimized expression: (uint16x16)hydride.node.38((uint16x16)input_16[ramp(t306 + 97, 1, 16)], (uint16x16)input_16[ramp(t306 + 98, 1, 16)], (uint16x16)input_16[ramp(t306 + 96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_38 from hydride_hash_38.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.39
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.39.rkt

Completed writing to file ...
Append [; hydride.node.39
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.39.rkt /tmp/test.ll
Storing synth log map synth_hash_39 to /tmp/hydride_hash_39.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_39 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_39.rkt

Completed writing to file ...
Starting synthesis for expr: 39
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t870, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t871, 1, 16)] + (uint16x16)input_16[ramp(t872, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.476969seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t306 + 113, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t306 + 114, 1, 16)] + (uint16x16)input_16[ramp(t306 + 112, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 39

Optimized expression: (uint16x16)hydride.node.39((uint16x16)input_16[ramp(t306 + 113, 1, 16)], (uint16x16)input_16[ramp(t306 + 114, 1, 16)], (uint16x16)input_16[ramp(t306 + 112, 1, 16)])
Starting synthesis for expr: 40
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_39 from hydride_hash_39.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.40
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.40.rkt

Completed writing to file ...
Append [; hydride.node.40
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.40.rkt /tmp/test.ll
Storing synth log map synth_hash_40 to /tmp/hydride_hash_40.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_40 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_40.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.915863seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 40

Optimized expression: (uint16x16)hydride.node.40((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Starting synthesis for expr: 41
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_40 from hydride_hash_40.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.41
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.41.rkt

Completed writing to file ...
Append [; hydride.node.41
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.41.rkt /tmp/test.ll
Storing synth log map synth_hash_41 to /tmp/hydride_hash_41.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_41 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_41.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.959201seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 41

Optimized expression: (uint16x16)hydride.node.41((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Starting synthesis for expr: 42
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_41 from hydride_hash_41.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.42
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.42.rkt

Completed writing to file ...
Append [; hydride.node.42
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.42.rkt /tmp/test.ll
Storing synth log map synth_hash_42 to /tmp/hydride_hash_42.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_42 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_42.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.677421seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 42

Optimized expression: (uint16x16)hydride.node.42((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Starting synthesis for expr: 43
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_42 from hydride_hash_42.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.43
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.43.rkt

Completed writing to file ...
Append [; hydride.node.43
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.43.rkt /tmp/test.ll
Storing synth log map synth_hash_43 to /tmp/hydride_hash_43.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_43 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_43.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.971331seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 43

Optimized expression: (uint16x16)hydride.node.43((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
rm: cannot remove '/tmp/base_6185_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_43 from hydride_hash_43.rkt ... 

#hash((#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-min #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(uint8x32 '(buf uint16 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_6185

base_6185_grammar.rkt
/tmp/base_6185_grammar.rkt
Writing [{ 
"name": "base_6185" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6185_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6185_spec.JSON /tmp/base_6185_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_6185 ... 

Grammar:
#<procedure:base_6185>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xc8878b469f2ce08b574433230dbcbb54bb0ed902cc177d15b597ddea6ff40074 256)
invoke-spec-lane with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512))
Concrete counter examples:
(#((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512)) #((bv #x80223a23bd4e33d85db963a50123507c3b9b5092cf62b9035a3882bc8611d2b597e7e561b19ab9175c9b48c39cbf482ff57d76babe0a33ac04db3d33223940bd 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512))
Spec Produced:
(bv #x74 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80223a23bd4e33d85db963a50123507c3b9b5092cf62b9035a3882bc8611d2b597e7e561b19ab9175c9b48c39cbf482ff57d76babe0a33ac04db3d33223940bd 512))
Spec Produced:
(bv #xbd 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$1)

invoke-spec with env: #(sym_bv$1)
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 503 496 sym_bv$1) (extract 487 ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$1 (bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512)])
Verification failed :(
#((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
Verification failed ...
	spec produced: (bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256) 256 
	synthesized result produced: (bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 256) 256

invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
Difference  Predicate
'((0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xc8878b469f2ce08b574433230dbcbb54bb0ed902cc177d15b597ddea6ff40074 256)
invoke-spec-lane with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474rm: cannot remove '/tmp/base_9537_spec.JSON': No such file or directory
 512))
Concrete counter examples:
(#((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512)) #((bv #x80223a23bd4e33d85db963a50123507c3b9b5092cf62b9035a3882bc8611d2b597e7e561b19ab9175c9b48c39cbf482ff57d76babe0a33ac04db3d33223940bd 512)) #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x27c828873f8b6c465f9f662cbbe0fe8bf357024429339823f10d72bc68bbbb54a9bbec0e18d9160215ccab17aa7d8115c9b5f097abdd0cea746fe4f4ad007474 512))
Spec Produced:
(bv #x74 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80223a23bd4e33d85db963a50123507c3b9b5092cf62b9035a3882bc8611d2b597e7e561b19ab9175c9b48c39cbf482ff57d76babe0a33ac04db3d33223940bd 512))
Spec Produced:
(bv #xbd 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2)

invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint8x32 '(buf uint16 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-min '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_9537

base_9537_grammar.rkt
/tmp/base_9537_grammar.rkt
Writing [{ 
"name": "base_9537" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9537_spec.JSON

Completed writing to file ...Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi16 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_min_epu16 with score: 5 belonging to target agnostic class _m_pminub
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1

python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9537_spec.JSON /tmp/base_9537_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_9537 ... 

Grammar:
#<procedure:base_9537>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xab827f7df38745debfb7bbaeab29ccd3a805de045171021bfbbfbb1253b7685e1d87f673cbcc6ba0103d9214c84de0ef12b0562cac852e8456b6fa7132f8cb07 512) (bv #xe09b1bcc820fdc555a8404dac94815a73108a73c2c181e2a925f921bcb8fc04530e9ec4d74f01cc6c5d9bc149d0060d177845e82b5614715379924cf441ddbea 512))
(vec-min (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xab821bcc820f45de5a8404daab2915a73108a73c2c18021b925f921b53b7685e1d87ec4d74f01cc6103d92149d0060d112b0562cac852e84379924cf32f8cb07 512)
invoke-spec-lane with env: #((bv #xab827f7df38745debfb7bbaeab29ccd3a805de045171021bfbbfbb1253b7685e1d87f673cbcc6ba0103d9214c84de0ef12b0562cac852e8456b6fa7132f8cb07 512) (bv #xe09b1bcc820fdc555a8404dac94815a73108a73c2c181e2a925f921bcb8fc04530e9ec4d74f01cc6c5d9bc149d0060d177845e82b5614715379924cf441ddbea 512))
Concrete counter examples:
(#((bv #xab827f7df38745debfb7bbaeab29ccd3a805de045171021bfbbfbb1253b7685e1d87f673cbcc6ba0103d9214c84de0ef12b0562cac852e8456b6fa7132f8cb07 512) (bv #xe09b1bcc820fdc555a8404dac94815a73108a73c2c181e2a925f921bcb8fc04530e9ec4d74f01cc6c5d9bc149d0060d177845e82b5614715379924cf441ddbea 512)) #((bv #x7328dba7fc3aaed84d7e1c6ce3fca349cb692760b1822cb89a9fa98ef31ac8cd0c3316836ffe899136daa7cce4e41fddce889cad5112f9dd110754bb1cbe3b65 512) (bv #xf12b88e02babf579c7a717548c1ae31cd86a15bb4e811ca43fc0a338d3edafb12c48b0117e490e6adf09aee1cc566a325f0326e303494b4ce4be5e84a4f5229f 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xab827f7df38745debfb7bbaeab29ccd3a805de045171021bfbbfbb1253b7685e1d87f673cbcc6ba0103d9214c84de0ef12b0562cac852e8456b6fa7132f8cb07 512) (bv #xe09b1bcc820fdc555a8404dac94815a73108a73c2c181e2a925f921bcb8fc04530e9ec4d74f01cc6c5d9bc149d0060d177845e82b5614715379924cf441ddbea 512))
Spec Produced:
(bv #xcb07 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x7328dba7fc3aaed84d7e1c6ce3fca349cb692760b1822cb89a9fa98ef31ac8cd0c3316836ffe899136daa7cce4e41fddce889cad5112f9dd110754bb1cbe3b65 512) (bv #xf12b88e02babf579c7a717548c1ae31cd86a15bb4e811ca43fc0a338d3edafb12c48b0117e490e6adf09aee1cc566a325f0326e303494b4ce4be5e84a4f5229f 512))
Spec Produced:
(bv #x229f 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$3 sym_bv$4)

invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3rm: cannot remove '/tmp/base_3601_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi16 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 2
 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf uint16 512) '(buf uint16 512))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_3601

base_3601_grammar.rkt
/tmp/base_3601_grammar.rkt
Writing [{ 
"name": "base_3601" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3601_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3601_spec.JSON /tmp/base_3601_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_3601 ... 

Grammar:
#<procedure:base_3601>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xabaf9cd2bd26391c9dc4f863e0e0c72508c6a14740fa0e8e7fe98a83c8a53695eb5b35247dcdd1d7df2ae2969c8a6bafc8102d09d0e464d18c71d16765279869 512) (bv #x1d6fbaaa0e8787097347df9f992911befbfb85fa9e01c171f1488833442241d50b5e06145a2d9348d63a957f6819282d0568c83c0c34f22efae31d4282ae7d88 512))
(vec-add (buffer #<procedure:buffer-fn> 'uint16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xc91e577ccbadc025110bd8027a09d8e304c12741defbcfff713112b60cc7786af6b93b38d7fa651fb564781504a393dccd78f545dd1856ff8754eea9e7d515f1 512)
invoke-spec-lane with env: #((bv #xabaf9cd2bd26391c9dc4f863e0e0c72508c6a14740fa0e8e7fe98a83c8a53695eb5b35247dcdd1d7df2ae2969c8a6bafc8102d09d0e464d18c71d16765279869 512) (bv #x1d6fbaaa0e8787097347df9f992911befbfb85fa9e01c171f1488833442241d50b5e06145a2d9348d63a957f6819282d0568c83c0c34f22efae31d4282ae7d88 512))
Concrete counter examples:
(#((bv #xabaf9cd2bd26391c9dc4f863e0e0c72508c6a14740fa0e8e7fe98a83c8a53695eb5b35247dcdd1d7df2ae2969c8a6bafc8102d09d0e464d18c71d16765279869 512) (bv #x1d6fbaaa0e8787097347df9f992911befbfb85fa9e01c171f1488833442241d50b5e06145a2d9348d63a957f6819282d0568c83c0c34f22efae31d4282ae7d88 512)) #((bv #x9082aa0ff86eb34993d4ea11f575a5aaa39ebc03de1dcf5532817f1f219308f7f0e7e589996cfd62caea2ae34642053320f569bd7f00034838532682d0b69dc4 512) (bv #x5fa0de0e7c2160bb8f28b1fca9f206f7f5bd938739fec3eb72b85604fa22b668aa7470d9b9d860067976e5d3d87367b0cdf17a9114c20ccca7c075eaae4edc26 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xabaf9cd2bd26391c9dc4f863e0e0c72508c6a14740fa0e8e7fe98a83c8a53695eb5b35247dcdd1d7df2ae2969c8a6bafc8102d09d0e464d18c71d16765279869 512) (bv #x1d6fbaaa0e8787097347df9f992911befbfb85fa9e01c171f1488833442241d50b5e06145a2d9348d63a957f6819282d0568c83c0c34f22efae31d4282ae7d88 512))
Spec Produced:
(bv #x15f1 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9082aa0ff86eb34993d4ea11f575a5aaa39ebc03de1dcf5532817f1f219308f7f0e7e589996cfd62caea2ae34642053320f569bd7f00034838532682d0b69dc4 512) (bv #x5fa0de0e7c2160bb8f28b1fca9f206f7f5bd938739fec3eb72b85604fa22b668aa7470d9b9d860067976e5d3d87367b0cdf17a9114c20ccca7c075eaae4edc26 512))
Spec Produced:
(bv #x79ea 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$5 sym_bv$6)

invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-add '(buf uint16 512) '(buf uint16 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4051

base_4051_grammar.rkt
/tmp/base_4051_grammar.rkt
Writing [{ 
"name": "base_4051" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_4051_spec.JSON
rm: cannot remove '/tmp/base_4051_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4051_spec.JSON /tmp/base_4051_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_4051 ... 

Grammar:
#<procedure:base_4051>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x00ff 16) #f))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x00ff 16) #f))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512))
 (x32 (int-imm (bv #x00ff 16) #f)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
 512
 16)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 512 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.44
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.44.rkt

Completed writing to file ...
Append [; hydride.node.44
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.44.rkt /tmp/test.ll
Storing synth log map synth_hash_44 to /tmp/hydride_hash_44.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_44 (hash 
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_44.rkt

Completed writing to file ...
Starting synthesis for expr: 44
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t873, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 13.278648seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 44

Optimized expression: (uint8x32)hydride.node.44((uint16x32)sobel_x[ramp(0, 1, 32)], (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_44 from hydride_hash_44.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(uint8x32 '(buf uint16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-min '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512))
 (x32 (int-imm (bv #x00ff 16) #f)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
 512
 16)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 512 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.45
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.45.rkt

Completed writing to file ...
Append [; hydride.node.45
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.45.rkt /tmp/test.ll
Storing synth log map synth_hash_45 to /tmp/hydride_hash_45.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_45 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_45.rkt

Completed writing to file ...
Starting synthesis for expr: 45
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t876, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 7.901831seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 45

Optimized expression: (uint8x32)hydride.node.45((uint16x32)sobel_x[ramp(32, 1, 32)], (uint16x32)sobel_y[ramp(((output.s0.x.x*64) - t341) + 96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_45 from hydride_hash_45.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.46
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.46.rkt

Completed writing to file ...
Append [; hydride.node.46
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.46.rkt /tmp/test.ll
Storing synth log map synth_hash_46 to /tmp/hydride_hash_46.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_46 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_46.rkt

Completed writing to file ...
Starting synthesis for expr: 46
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t891, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t892, 1, 16)] + (uint16x16)input_16[ramp(t893, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.941446seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -62, 1, 16)] + (uint16x16)input_16[ramp(t432 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 46

Optimized expression: (uint16x16)hydride.node.46((uint16x16)input_16[ramp(t432 + -63, 1, 16)], (uint16x16)input_16[ramp(t432 + -62, 1, 16)], (uint16x16)input_16[ramp(t432 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_46 from hydride_hash_46.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.47
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.47.rkt

Completed writing to file ...
Append [; hydride.node.47
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.47.rkt /tmp/test.ll
Storing synth log map synth_hash_47 to /tmp/hydride_hash_47.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_47 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_47.rkt

Completed writing to file ...
Starting synthesis for expr: 47
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t894, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t895, 1, 16)] + (uint16x16)input_16[ramp(t896, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.331407seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -46, 1, 16)] + (uint16x16)input_16[ramp(t432 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 47

Optimized expression: (uint16x16)hydride.node.47((uint16x16)input_16[ramp(t432 + -47, 1, 16)], (uint16x16)input_16[ramp(t432 + -46, 1, 16)], (uint16x16)input_16[ramp(t432 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_47 from hydride_hash_47.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.48
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.48.rkt

Completed writing to file ...
Append [; hydride.node.48
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.48.rkt /tmp/test.ll
Storing synth log map synth_hash_48 to /tmp/hydride_hash_48.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_48 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_48.rkt

Completed writing to file ...
Starting synthesis for expr: 48
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t897, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t898, 1, 16)] + (uint16x16)input_16[ramp(t899, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.119522seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -30, 1, 16)] + (uint16x16)input_16[ramp(t432 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 48

Optimized expression: (uint16x16)hydride.node.48((uint16x16)input_16[ramp(t432 + -31, 1, 16)], (uint16x16)input_16[ramp(t432 + -30, 1, 16)], (uint16x16)input_16[ramp(t432 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_48 from hydride_hash_48.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.49
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.49.rkt

Completed writing to file ...
Append [; hydride.node.49
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.49.rkt /tmp/test.ll
Storing synth log map synth_hash_49 to /tmp/hydride_hash_49.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_49 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_49.rkt

Completed writing to file ...
Starting synthesis for expr: 49
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t900, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t901, 1, 16)] + (uint16x16)input_16[ramp(t902, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.290395seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t432 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t432 + -14, 1, 16)] + (uint16x16)input_16[ramp(t432 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 49

Optimized expression: (uint16x16)hydride.node.49((uint16x16)input_16[ramp(t432 + -15, 1, 16)], (uint16x16)input_16[ramp(t432 + -14, 1, 16)], (uint16x16)input_16[ramp(t432 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_49 from hydride_hash_49.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.50
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.50.rkt

Completed writing to file ...
Append [; hydride.node.50
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.50.rkt /tmp/test.ll
Storing synth log map synth_hash_50 to /tmp/hydride_hash_50.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_50 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_50.rkt

Completed writing to file ...
Starting synthesis for expr: 50
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t903, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t904, 1, 16)] + (uint16x16)input_16[ramp(t905, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.326323seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -62, 1, 16)] + (uint16x16)input_16[ramp(t433 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 50

Optimized expression: (uint16x16)hydride.node.50((uint16x16)input_16[ramp(t433 + -63, 1, 16)], (uint16x16)input_16[ramp(t433 + -62, 1, 16)], (uint16x16)input_16[ramp(t433 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_50 from hydride_hash_50.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.51
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.51.rkt

Completed writing to file ...
Append [; hydride.node.51
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.51.rkt /tmp/test.ll
Storing synth log map synth_hash_51 to /tmp/hydride_hash_51.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_51 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_51.rkt

Completed writing to file ...
Starting synthesis for expr: 51
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t906, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t907, 1, 16)] + (uint16x16)input_16[ramp(t908, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.175117seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -46, 1, 16)] + (uint16x16)input_16[ramp(t433 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 51

Optimized expression: (uint16x16)hydride.node.51((uint16x16)input_16[ramp(t433 + -47, 1, 16)], (uint16x16)input_16[ramp(t433 + -46, 1, 16)], (uint16x16)input_16[ramp(t433 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_51 from hydride_hash_51.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.52
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.52.rkt

Completed writing to file ...
Append [; hydride.node.52
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.52.rkt /tmp/test.ll
Storing synth log map synth_hash_52 to /tmp/hydride_hash_52.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_52 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_52.rkt

Completed writing to file ...
Starting synthesis for expr: 52
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t909, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t910, 1, 16)] + (uint16x16)input_16[ramp(t911, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.028184seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -30, 1, 16)] + (uint16x16)input_16[ramp(t433 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 52

Optimized expression: (uint16x16)hydride.node.52((uint16x16)input_16[ramp(t433 + -31, 1, 16)], (uint16x16)input_16[ramp(t433 + -30, 1, 16)], (uint16x16)input_16[ramp(t433 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_52 from hydride_hash_52.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.53
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.53.rkt

Completed writing to file ...
Append [; hydride.node.53
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.53.rkt /tmp/test.ll
Storing synth log map synth_hash_53 to /tmp/hydride_hash_53.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_53 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_53.rkt

Completed writing to file ...
Starting synthesis for expr: 53
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t912, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t913, 1, 16)] + (uint16x16)input_16[ramp(t914, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.181072seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t433 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t433 + -14, 1, 16)] + (uint16x16)input_16[ramp(t433 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 53

Optimized expression: (uint16x16)hydride.node.53((uint16x16)input_16[ramp(t433 + -15, 1, 16)], (uint16x16)input_16[ramp(t433 + -14, 1, 16)], (uint16x16)input_16[ramp(t433 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_53 from hydride_hash_53.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.54
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.54.rkt

Completed writing to file ...
Append [; hydride.node.54
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.54.rkt /tmp/test.ll
Storing synth log map synth_hash_54 to /tmp/hydride_hash_54.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_54 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_54.rkt

Completed writing to file ...
Starting synthesis for expr: 54
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t915, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t916, 1, 16)] + (uint16x16)input_16[ramp(t917, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.116415seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -63, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -62, 1, 16)] + (uint16x16)input_16[ramp(t434 + -64, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 54

Optimized expression: (uint16x16)hydride.node.54((uint16x16)input_16[ramp(t434 + -63, 1, 16)], (uint16x16)input_16[ramp(t434 + -62, 1, 16)], (uint16x16)input_16[ramp(t434 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_54 from hydride_hash_54.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.55
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.55.rkt

Completed writing to file ...
Append [; hydride.node.55
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.55.rkt /tmp/test.ll
Storing synth log map synth_hash_55 to /tmp/hydride_hash_55.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_55 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_55.rkt

Completed writing to file ...
Starting synthesis for expr: 55
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t918, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t919, 1, 16)] + (uint16x16)input_16[ramp(t920, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.975939seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -47, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -46, 1, 16)] + (uint16x16)input_16[ramp(t434 + -48, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 55

Optimized expression: (uint16x16)hydride.node.55((uint16x16)input_16[ramp(t434 + -47, 1, 16)], (uint16x16)input_16[ramp(t434 + -46, 1, 16)], (uint16x16)input_16[ramp(t434 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_55 from hydride_hash_55.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.56
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.56.rkt

Completed writing to file ...
Append [; hydride.node.56
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.56.rkt /tmp/test.ll
Storing synth log map synth_hash_56 to /tmp/hydride_hash_56.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_56 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_56.rkt

Completed writing to file ...
Starting synthesis for expr: 56
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t921, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t922, 1, 16)] + (uint16x16)input_16[ramp(t923, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.032352seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -31, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -30, 1, 16)] + (uint16x16)input_16[ramp(t434 + -32, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 56

Optimized expression: (uint16x16)hydride.node.56((uint16x16)input_16[ramp(t434 + -31, 1, 16)], (uint16x16)input_16[ramp(t434 + -30, 1, 16)], (uint16x16)input_16[ramp(t434 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_56 from hydride_hash_56.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.57
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.57.rkt

Completed writing to file ...
Append [; hydride.node.57
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.57.rkt /tmp/test.ll
Storing synth log map synth_hash_57 to /tmp/hydride_hash_57.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_57 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_57.rkt

Completed writing to file ...
Starting synthesis for expr: 57
Expression before lower intrinsic: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Expression after InlineLets: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Expression before abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Input expression to synthesize: ((uint16x16)shift_left((uint16x16)input_16[ramp(t924, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t925, 1, 16)] + (uint16x16)input_16[ramp(t926, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.219397seconds ...
Expression after replacae abstraction: ((uint16x16)shift_left((uint16x16)input_16[ramp(t434 + -15, 1, 16)], x16((uint16)1)) + ((uint16x16)input_16[ramp(t434 + -14, 1, 16)] + (uint16x16)input_16[ramp(t434 + -16, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 57

Optimized expression: (uint16x16)hydride.node.57((uint16x16)input_16[ramp(t434 + -15, 1, 16)], (uint16x16)input_16[ramp(t434 + -14, 1, 16)], (uint16x16)input_16[ramp(t434 + -16, 1, 16)])
Starting synthesis for expr: 58
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_57 from hydride_hash_57.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.58
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.58.rkt

Completed writing to file ...
Append [; hydride.node.58
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.58.rkt /tmp/test.ll
Storing synth log map synth_hash_58 to /tmp/hydride_hash_58.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_58 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_58.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.734058seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 58

Optimized expression: (uint16x16)hydride.node.58((uint16x16)sobel_x_avg[ramp(0, 1, 16)], (uint16x16)sobel_x_avg[ramp(128, 1, 16)])
Starting synthesis for expr: 59
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_58 from hydride_hash_58.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.59
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.59.rkt

Completed writing to file ...
Append [; hydride.node.59
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.59.rkt /tmp/test.ll
Storing synth log map synth_hash_59 to /tmp/hydride_hash_59.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_59 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_59.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.987698seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 59

Optimized expression: (uint16x16)hydride.node.59((uint16x16)sobel_x_avg[ramp(16, 1, 16)], (uint16x16)sobel_x_avg[ramp(144, 1, 16)])
Starting synthesis for expr: 60
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_59 from hydride_hash_59.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.60
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.60.rkt

Completed writing to file ...
Append [; hydride.node.60
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.60.rkt /tmp/test.ll
Storing synth log map synth_hash_60 to /tmp/hydride_hash_60.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_60 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_60.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.005275seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 60

Optimized expression: (uint16x16)hydride.node.60((uint16x16)sobel_x_avg[ramp(32, 1, 16)], (uint16x16)sobel_x_avg[ramp(160, 1, 16)])
Starting synthesis for expr: 61
Expression before lower intrinsic: (uint16x16)absd((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
Lower Intrinsic on call: absd
Lowered Expression: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_60 from hydride_hash_60.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:vec-min #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sub
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-sub '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-max '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 256 16) #(struct:_m_pminub_dsl #(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm_sub_pi16_dsl
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 256 16)
 (_m_pminub_dsl (reg (bv #x00 8)) (reg (bv #x01 8)) 256 16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-sub
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256))
 (vec-min
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.61
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.61.rkt

Completed writing to file ...
Append [; hydride.node.61
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm_sub_pi16_dsl 
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 0)  256  16  );<16 x i16>
  
(_m_pminub_dsl 
(reg 0)  
(reg 1)  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.61.rkt /tmp/test.ll
Storing synth log map synth_hash_61 to /tmp/hydride_hash_61.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_61 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_61.rkt

Completed writing to file ...
Expression before InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression after InlineLets: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Expression before abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Input expression to synthesize: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.996830seconds ...
Expression after replacae abstraction: (max((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]) - min((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 61

Optimized expression: (uint16x16)hydride.node.61((uint16x16)sobel_x_avg[ramp(48, 1, 16)], (uint16x16)sobel_x_avg[ramp(176, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_61 from hydride_hash_61.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(uint8x32 '(buf uint16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-min '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512))
 (x32 (int-imm (bv #x00ff 16) #f)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
 512
 16)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 512 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.62
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.62.rkt

Completed writing to file ...
Append [; hydride.node.62
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.62.rkt /tmp/test.ll
Storing synth log map synth_hash_62 to /tmp/hydride_hash_62.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_62 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_62.rkt

Completed writing to file ...
Starting synthesis for expr: 62
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t927, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 7.793391seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(0, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 62

Optimized expression: (uint8x32)hydride.node.62((uint16x32)sobel_x[ramp(0, 1, 32)], (uint16x32)sobel_y[ramp(t345 + -64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_62 from hydride_hash_62.rkt ... 

#hash((#(struct:vec-add (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:vec-min (buf uint16 512) (buf uint16 512)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 16) 1)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-sub (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm_sub_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-max (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:vec-shl (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:vec-min (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)) (#(struct:uint8x32 (buf uint16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)) . #(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
here
(#(struct:vec-min #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(uint8x32 '(buf uint16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512)) #(struct:x32 #(struct:int-imm (bv #x00ff 16) #f)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-min '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512) #(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-add '(buf uint16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 512)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x32 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 512)
  (buffer #<procedure:buffer-fn> 'uint16 512))
 (x32 (int-imm (bv #x00ff 16) #f)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
 512
 16)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 512 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x00 8)) 512 16)
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512))
  512
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-min
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 512)
   (buffer #<procedure:buffer-fn> 'uint16 512))
  (x32 (int-imm (bv #x00ff 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 512)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <32 x i16>
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.63
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.63.rkt

Completed writing to file ...
Append [; hydride.node.63
; (reg 1) <32 x i16>
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl 
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) ; <32 x i16>
  512  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.63.rkt /tmp/test.ll
Storing synth log map synth_hash_63 to /tmp/hydride_hash_63.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_63 (hash 
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-min '(buf uint16 512) '(buf uint16 512)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 16) 1)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-sub '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-shl '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(uint8x32 '(buf uint16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)))
] to file /tmp/hydride_hash_63.rkt

Completed writing to file ...
Starting synthesis for expr: 63
Expression before lower intrinsic: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression before InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression after InlineLets: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Expression before abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Input expression to synthesize: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t928, 1, 32)], x32((uint16)255)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.175768seconds ...
Expression after replacae abstraction: uint8x32(min((uint16x32)sobel_x[ramp(32, 1, 32)] + (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)], x32((uint16)255)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 63

Optimized expression: (uint8x32)hydride.node.63((uint16x32)sobel_x[ramp(32, 1, 32)], (uint16x32)sobel_y[ramp(t345 + -32, 1, 32)])
Hydride Function: declare <32 x i16> @hydride.node.0(<32 x i8>)

Generating Hydride Call:   %3241 = call <32 x i16> @hydride.node.0(<32 x i8> %3240) #17
Hydride Function: declare <32 x i16> @hydride.node.1(<32 x i8>)

Generating Hydride Call:   %3250 = call <32 x i16> @hydride.node.1(<32 x i8> %3249) #17
Hydride Function: declare <32 x i16> @hydride.node.2(<32 x i8>)

Generating Hydride Call:   %4299 = call <32 x i16> @hydride.node.2(<32 x i8> %4298) #17
Hydride Function: declare <32 x i16> @hydride.node.3(<32 x i8>)

Generating Hydride Call:   %4308 = call <32 x i16> @hydride.node.3(<32 x i8> %4307) #17
Hydride Function: declare <32 x i16> @hydride.node.4(<32 x i8>)

Generating Hydride Call:   %4317 = call <32 x i16> @hydride.node.4(<32 x i8> %4316) #17
Hydride Function: declare <32 x i16> @hydride.node.5(<32 x i8>)

Generating Hydride Call:   %4326 = call <32 x i16> @hydride.node.5(<32 x i8> %4325) #17
Hydride Function: declare <32 x i16> @hydride.node.6(<32 x i8>)

Generating Hydride Call:   %4335 = call <32 x i16> @hydride.node.6(<32 x i8> %4334) #17
Hydride Function: declare <32 x i16> @hydride.node.7(<32 x i8>)

Generating Hydride Call:   %4344 = call <32 x i16> @hydride.node.7(<32 x i8> %4343) #17
Hydride Function: declare <32 x i16> @hydride.node.8(<32 x i8>)

Generating Hydride Call:   %4353 = call <32 x i16> @hydride.node.8(<32 x i8> %4352) #17
Hydride Function: declare <32 x i16> @hydride.node.9(<32 x i8>)

Generating Hydride Call:   %4362 = call <32 x i16> @hydride.node.9(<32 x i8> %4361) #17
Hydride Function: declare <32 x i16> @hydride.node.10(<32 x i8>)

Generating Hydride Call:   %4371 = call <32 x i16> @hydride.node.10(<32 x i8> %4370) #17
Hydride Function: declare <16 x i16> @hydride.node.11(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4455 = call <16 x i16> @hydride.node.11(<16 x i16> %4432, <16 x i16> %4443, <16 x i16> %4454) #17
Hydride Function: declare <16 x i16> @hydride.node.12(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4492 = call <16 x i16> @hydride.node.12(<16 x i16> %4467, <16 x i16> %4479, <16 x i16> %4491) #17
Hydride Function: declare <16 x i16> @hydride.node.13(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4530 = call <16 x i16> @hydride.node.13(<16 x i16> %4505, <16 x i16> %4517, <16 x i16> %4529) #17
Hydride Function: declare <16 x i16> @hydride.node.14(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4568 = call <16 x i16> @hydride.node.14(<16 x i16> %4543, <16 x i16> %4555, <16 x i16> %4567) #17
Hydride Function: declare <16 x i16> @hydride.node.15(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4606 = call <16 x i16> @hydride.node.15(<16 x i16> %4581, <16 x i16> %4593, <16 x i16> %4605) #17
Hydride Function: declare <16 x i16> @hydride.node.16(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4644 = call <16 x i16> @hydride.node.16(<16 x i16> %4619, <16 x i16> %4631, <16 x i16> %4643) #17
Hydride Function: declare <16 x i16> @hydride.node.17(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4682 = call <16 x i16> @hydride.node.17(<16 x i16> %4657, <16 x i16> %4669, <16 x i16> %4681) #17
Hydride Function: declare <16 x i16> @hydride.node.18(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4720 = call <16 x i16> @hydride.node.18(<16 x i16> %4695, <16 x i16> %4707, <16 x i16> %4719) #17
Hydride Function: declare <16 x i16> @hydride.node.19(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4758 = call <16 x i16> @hydride.node.19(<16 x i16> %4733, <16 x i16> %4745, <16 x i16> %4757) #17
Hydride Function: declare <16 x i16> @hydride.node.20(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4766 = call <16 x i16> @hydride.node.20(<16 x i16> %4762, <16 x i16> %4765) #17
Hydride Function: declare <16 x i16> @hydride.node.21(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4778 = call <16 x i16> @hydride.node.21(<16 x i16> %4774, <16 x i16> %4777) #17
Hydride Function: declare <16 x i16> @hydride.node.22(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4791 = call <16 x i16> @hydride.node.22(<16 x i16> %4787, <16 x i16> %4790) #17
Hydride Function: declare <16 x i16> @hydride.node.23(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4804 = call <16 x i16> @hydride.node.23(<16 x i16> %4800, <16 x i16> %4803) #17
Hydride Function: declare <16 x i16> @hydride.node.24(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4817 = call <16 x i16> @hydride.node.24(<16 x i16> %4813, <16 x i16> %4816) #17
Hydride Function: declare <16 x i16> @hydride.node.25(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4830 = call <16 x i16> @hydride.node.25(<16 x i16> %4826, <16 x i16> %4829) #17
Hydride Function: declare <16 x i16> @hydride.node.26(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4843 = call <16 x i16> @hydride.node.26(<16 x i16> %4839, <16 x i16> %4842) #17
Hydride Function: declare <16 x i16> @hydride.node.27(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %4856 = call <16 x i16> @hydride.node.27(<16 x i16> %4852, <16 x i16> %4855) #17
Hydride Function: declare <16 x i16> @hydride.node.28(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4892 = call <16 x i16> @hydride.node.28(<16 x i16> %4881, <16 x i16> %4886, <16 x i16> %4891) #17
Hydride Function: declare <16 x i16> @hydride.node.29(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4910 = call <16 x i16> @hydride.node.29(<16 x i16> %4899, <16 x i16> %4904, <16 x i16> %4909) #17
Hydride Function: declare <16 x i16> @hydride.node.30(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4929 = call <16 x i16> @hydride.node.30(<16 x i16> %4918, <16 x i16> %4923, <16 x i16> %4928) #17
Hydride Function: declare <16 x i16> @hydride.node.31(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4948 = call <16 x i16> @hydride.node.31(<16 x i16> %4937, <16 x i16> %4942, <16 x i16> %4947) #17
Hydride Function: declare <16 x i16> @hydride.node.32(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4967 = call <16 x i16> @hydride.node.32(<16 x i16> %4956, <16 x i16> %4961, <16 x i16> %4966) #17
Hydride Function: declare <16 x i16> @hydride.node.33(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %4986 = call <16 x i16> @hydride.node.33(<16 x i16> %4975, <16 x i16> %4980, <16 x i16> %4985) #17
Hydride Function: declare <16 x i16> @hydride.node.34(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5005 = call <16 x i16> @hydride.node.34(<16 x i16> %4994, <16 x i16> %4999, <16 x i16> %5004) #17
Hydride Function: declare <16 x i16> @hydride.node.35(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5024 = call <16 x i16> @hydride.node.35(<16 x i16> %5013, <16 x i16> %5018, <16 x i16> %5023) #17
Hydride Function: declare <16 x i16> @hydride.node.36(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5043 = call <16 x i16> @hydride.node.36(<16 x i16> %5032, <16 x i16> %5037, <16 x i16> %5042) #17
Hydride Function: declare <16 x i16> @hydride.node.37(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5061 = call <16 x i16> @hydride.node.37(<16 x i16> %5050, <16 x i16> %5055, <16 x i16> %5060) #17
Hydride Function: declare <16 x i16> @hydride.node.38(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5079 = call <16 x i16> @hydride.node.38(<16 x i16> %5068, <16 x i16> %5073, <16 x i16> %5078) #17
Hydride Function: declare <16 x i16> @hydride.node.39(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5097 = call <16 x i16> @hydride.node.39(<16 x i16> %5086, <16 x i16> %5091, <16 x i16> %5096) #17
Hydride Function: declare <16 x i16> @hydride.node.40(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5105 = call <16 x i16> @hydride.node.40(<16 x i16> %5101, <16 x i16> %5104) #17
Hydride Function: declare <16 x i16> @hydride.node.41(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5113 = call <16 x i16> @hydride.node.41(<16 x i16> %5109, <16 x i16> %5112) #17
Hydride Function: declare <16 x i16> @hydride.node.42(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5122 = call <16 x i16> @hydride.node.42(<16 x i16> %5118, <16 x i16> %5121) #17
Hydride Function: declare <16 x i16> @hydride.node.43(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5131 = call <16 x i16> @hydride.node.43(<16 x i16> %5127, <16 x i16> %5130) #17
Hydride Function: declare <32 x i8> @hydride.node.44(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5144 = call <32 x i8> @hydride.node.44(<32 x i16> %5135, <32 x i16> %5143) #17
Hydride Function: declare <32 x i8> @hydride.node.45(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5162 = call <32 x i8> @hydride.node.45(<32 x i16> %5153, <32 x i16> %5161) #17
Hydride Function: declare <16 x i16> @hydride.node.46(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5198 = call <16 x i16> @hydride.node.46(<16 x i16> %5187, <16 x i16> %5192, <16 x i16> %5197) #17
Hydride Function: declare <16 x i16> @hydride.node.47(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5215 = call <16 x i16> @hydride.node.47(<16 x i16> %5204, <16 x i16> %5209, <16 x i16> %5214) #17
Hydride Function: declare <16 x i16> @hydride.node.48(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5233 = call <16 x i16> @hydride.node.48(<16 x i16> %5222, <16 x i16> %5227, <16 x i16> %5232) #17
Hydride Function: declare <16 x i16> @hydride.node.49(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5251 = call <16 x i16> @hydride.node.49(<16 x i16> %5240, <16 x i16> %5245, <16 x i16> %5250) #17
Hydride Function: declare <16 x i16> @hydride.node.50(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5269 = call <16 x i16> @hydride.node.50(<16 x i16> %5258, <16 x i16> %5263, <16 x i16> %5268) #17
Hydride Function: declare <16 x i16> @hydride.node.51(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5287 = call <16 x i16> @hydride.node.51(<16 x i16> %5276, <16 x i16> %5281, <16 x i16> %5286) #17
Hydride Function: declare <16 x i16> @hydride.node.52(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5305 = call <16 x i16> @hydride.node.52(<16 x i16> %5294, <16 x i16> %5299, <16 x i16> %5304) #17
Hydride Function: declare <16 x i16> @hydride.node.53(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5323 = call <16 x i16> @hydride.node.53(<16 x i16> %5312, <16 x i16> %5317, <16 x i16> %5322) #17
Hydride Function: declare <16 x i16> @hydride.node.54(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5341 = call <16 x i16> @hydride.node.54(<16 x i16> %5330, <16 x i16> %5335, <16 x i16> %5340) #17
Hydride Function: declare <16 x i16> @hydride.node.55(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5359 = call <16 x i16> @hydride.node.55(<16 x i16> %5348, <16 x i16> %5353, <16 x i16> %5358) #17
Hydride Function: declare <16 x i16> @hydride.node.56(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5377 = call <16 x i16> @hydride.node.56(<16 x i16> %5366, <16 x i16> %5371, <16 x i16> %5376) #17
Hydride Function: declare <16 x i16> @hydride.node.57(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %5395 = call <16 x i16> @hydride.node.57(<16 x i16> %5384, <16 x i16> %5389, <16 x i16> %5394) #17
Hydride Function: declare <16 x i16> @hydride.node.58(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5403 = call <16 x i16> @hydride.node.58(<16 x i16> %5399, <16 x i16> %5402) #17
Hydride Function: declare <16 x i16> @hydride.node.59(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5411 = call <16 x i16> @hydride.node.59(<16 x i16> %5407, <16 x i16> %5410) #17
Hydride Function: declare <16 x i16> @hydride.node.60(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5420 = call <16 x i16> @hydride.node.60(<16 x i16> %5416, <16 x i16> %5419) #17
Hydride Function: declare <16 x i16> @hydride.node.61(<16 x i16>, <16 x i16>)

Generating Hydride Call:   %5429 = call <16 x i16> @hydride.node.61(<16 x i16> %5425, <16 x i16> %5428) #17
Hydride Function: declare <32 x i8> @hydride.node.62(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5439 = call <32 x i8> @hydride.node.62(<32 x i16> %5433, <32 x i16> %5438) #17
Hydride Function: declare <32 x i8> @hydride.node.63(<32 x i16>, <32 x i16>)

Generating Hydride Call:   %5452 = call <32 x i8> @hydride.node.63(<32 x i16> %5446, <32 x i16> %5451) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'sobel3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
