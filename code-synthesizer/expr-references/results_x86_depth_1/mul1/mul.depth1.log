mkdir mul/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g mul/src/mul_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o mul/bin/mul_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./mul/bin/mul_generator \
	-t 0 \
	-o mul/bin \
	-g mul \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f mul target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)rounding_shift_right((int32x8)rounding_mul_shift_right((int32x8)widening_mul((int16x8)shift_left(int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)]), x8((uint16)6)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8)shift_left(int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)]), x8((uint16)6)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier), x8((uint32)31)), x8((uint32)t9)), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: ((int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier), x8((uint32)31)), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint32)0 < (uint32)t9, x8(1), x8(0)), (int32x8)shift_right((int32x8)rounding_mul_shift_right((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier), x8((uint32)31)), x8((uint32)t9 - (uint32)1))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64))))
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: int32x8(max(min((int64x8)rounding_shift_right((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((uint64)31)), x8((int64)2147483647)), x8((int64)-2147483648)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int64x8)shift_right((int64x8)rounding_halving_add((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((int64)1073741823)), x8((uint64)30))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int64x8)shift_right((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and((int64x8)widening_mul((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)), x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int64x8((int32x8)widening_mul((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64), (int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))*int64x8(x8(output_multiplier)))
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64))))
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint32)0 < (uint32)t9, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9 - (uint32)1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression after InlineLets: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint32)0 < (uint32)t9, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9 - (uint32)1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Expression before abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint32)0 < (uint32)t9, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9 - (uint32)1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Input expression to synthesize: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t66, 1, 8)])*x8((int16)64)) + x8((int16)t67)))*int32x8(((int16x8((uint8x8)input2[ramp(t69, 1, 8)])*x8((int16)64)) + x8((int16)t70)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t72, 1, 8)])*x8((int16)64)) + x8((int16)t73)))*int32x8(((int16x8((uint8x8)input2[ramp(t75, 1, 8)])*x8((int16)64)) + x8((int16)t76)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint1)t78, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t79, 1, 8)])*x8((int16)64)) + x8((int16)t80)))*int32x8(((int16x8((uint8x8)input2[ramp(t82, 1, 8)])*x8((int16)64)) + x8((int16)t83)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t85, 1, 8)])*x8((int16)64)) + x8((int16)t86)))*int32x8(((int16x8((uint8x8)input2[ramp(t88, 1, 8)])*x8((int16)64)) + x8((int16)t89)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147#hash((#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x0e 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x11 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x0f 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x0b 8)) (#(struct:buffer #<procedure:buffer-fn> uint32 32) . (bv #x13 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x12 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x0d 8)) (#(struct:buffer #<procedure:buffer-fn> uint1 1) . (bv #x0a 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 64) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x10 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x0c 8)) (#(struct:buffer #<procedure:buffer-fn> int32 32) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint32 32) . (bv #x09 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x14 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x08 8)))
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(rm: cannot remove '/tmp/base_3621_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 18
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 19
struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x8 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-max '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_3621

base_3621_grammar.rkt
/tmp/base_3621_grammar.rkt
Writing [{ 
"name": "base_3621" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3621_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3621_spec.JSON /tmp/base_3621_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3621 ... 

Grammar:
#<procedure:base_3621>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x60bade3759282267e2952c5311262c59 128)
invoke-spec-lane with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
Concrete counter examples:
(#((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128)) #((bv #x8af84a2c70f551dfe59328ca60ae50ee 128) (bv #xf219c9e510b136b0eda86e3402c96a77 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
Spec Produced:
(bv #x2c59 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8af84a2c70f551dfe59328ca60ae50ee 128) (bv #xf219c9e510b136b0eda86e3402c96a77 128))
Spec Produced:
(bv #x6a77 16)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 127 112 sym_bv$3) (extract 127 112 sym_bv$2)) (extract 127 112 sym_bv$2) (extract 127 112 sym_bv$3)) (ite (bvsle (extract 111 96 sym_bv$3) (extract 111 96 sym_bv$2)) (extract 111 96 sym_bv$2) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x4000fffefffefffe000efffefffefffe 128)]
 [sym_bv$3 (bv #x00000000000000000010000000000000 128)])
Verification failed :(
#((bv #x4000fffefffefffe000efffefffefffe 128) (bv #x00000000000000000010000000000000 128))
invoke-spec with env: #((bv #x4000fffefffefffe000efffefffefffe 128) (bv #x00000000000000000010000000000000 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x40000000000000000010000000000000 128)
(bv #x40000000000000000010000000000000 128)
Verification failed ...
	spec produced: (bv #x40000000000000000010000000000000 128) 128 
	synthesized result produced: (bv #x00000000000000000010000000000000 128) 128

invoke-spec with env: #((bv #x4000fffefffefffe000efffefffefffe 128) (bv #x00000000000000000010000000000000 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x40000000000000000010000000000000 128)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
(vec-max (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x60bade3759282267e2952c5311262c59 128)
invoke-spec-lane with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
Concrete counter examples:
(#((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128)) #((bv #x8af84a2c70f551dfe59328ca60ae50ee 128) (bv #xf219c9e510b136b0eda86e3402c96a77 128)) #((bv #x4000fffefffefffe000efffefffefffe 128) (bv #x00000000000000000010000000000000 128)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x3fedbf3e5928157ed31803fbdfb0cbdf 128) (bv #x60bade3744bb2267e2952c5311262c59 128))
Spec Produced:
(bv #x2c59 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8af84a2c70f551dfe59328ca60ae50ee 128) (bv #xf219c9e510b136b0eda86e3402c96a77 128))
Spec Produced:
(bv #x6a77 16)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000fffefffefffe000efffefffefffe 128) (bv #x00000000000000000010000000000000 128))
Spec Produced:
(bv #x4000 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) rm: cannot remove '/tmp/base_3979_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_min_epi16 with score: 5 belonging to target agnostic class _mm256_min_epi16
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 21
#(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x8 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-min '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_3979

base_3979_grammar.rkt
/tmp/base_3979_grammar.rkt
Writing [{ 
"name": "base_3979" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3979_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3979_spec.JSON /tmp/base_3979_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3979 ... 

Grammar:
#<procedure:base_3979>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6ddb5c1006cf21a507b3c0f863ca4148 128) (bv #x3599523fcb3bd511c3f32e8c9f6ea624 128))
(vec-min (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x3599523fcb3bd511c3f3c0f89f6ea624 128)
invoke-spec-lane with env: #((bv #x6ddb5c1006cf21a507b3c0f863ca4148 128) (bv #x3599523fcb3bd511c3f32e8c9f6ea624 128))
Concrete counter examples:
(#((bv #x6ddb5c1006cf21a507b3c0f863ca4148 128) (bv #x3599523fcb3bd511c3f32e8c9f6ea624 128)) #((bv #x9f7f6ca812e9327be8d86fc322c0856a 128) (bv #xa82391e16200b40138978615ff99ab51 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6ddb5c1006cf21a507b3c0f863ca4148 128) (bv #x3599523fcb3bd511c3f32e8c9f6ea624 128))
Spec Produced:
(bv #xa624 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9f7f6ca812e9327be8d86fc322c0856a 128) (bv #xa82391e16200b40138978615ff99ab51 128))
Spec Produced:
(bv #x856a 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(rm: cannot remove '/tmp/base_3715_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 6
Num Broadcasts: 19
Num Computes: 15
17 < 18
Adding:  _mm_hadd_epi16 with score: 5 belonging to target agnostic class _mm_hadd_epi16
Adding:  _mm_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm_adds_epi16 with score: 5 belonging to target agnostic class _m_paddsb
Adding:  _mm_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm_hadds_epi16 with score: 5 belonging to target agnostic class _mm_hadds_epi16
Adding:  _mm_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 25
struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-sat-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_3715

base_3715_grammar.rkt
/tmp/base_3715_grammar.rkt
Writing [{ 
"name": "base_3715" , 
"semantics": [ "(extract bvadd sign-extend #<procedure:bvaddnsw> #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3715_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3715_spec.JSON /tmp/base_3715_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3715 ... 

Grammar:
#<procedure:base_3715>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x14577ffff6dd7fff594268e5d6f36665 128)
invoke-spec-lane with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
Concrete counter examples:
(#((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128)) #((bv #x9c676f371ba1dd4a3e6f169c53fac514 128) (bv #xddbcede58fb79abf3ea4b7e83205c92c 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
Spec Produced:
(bv #x6665 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9c676f371ba1dd4a3e6f169c53fac514 128) (bv #xddbcede58fb79abf3ea4b7e83205c92c 128))
Spec Produced:
(bv #x8e40 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$10 sym_bv$11)
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (&& (bvslt (bv #x0000 16) (extract 127 112 sym_bv$10)) (&& (bvslt (bv #x0000 16) (extract 127 112 sym_bv$11)) (bvslt (bvadd (bv #x7fff 16) (bvneg (extract 127 112 sym_bv$11))) (extract 127 112 sym_bv$10)))) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$10 (bv #xe2336000609c80000e518000a0008000 128)]
 [sym_bv$11 (bv #xaaf96000608480001b7d800190008000 128)])
Verification failed :(
#((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
invoke-spec with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
Verification failed ...
	spec produced: (bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128) 128 
	synthesized result produced: (bv #x8d2cc000c120000029ce000130000000 128) 128

invoke-spec with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x8d2c7fff7fff7fff29ce7fff7fff7fff 128)
Difference  Predicate
'((1 1 1 0 1 1 1 0))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x14577ffff6dd7fff594268e5d6f36665 128)
invoke-spec-lane with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
Concrete counter examples:
(#((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128)) #((bv #x9c676f371ba1dd4a3e6f169c53fac514 128) (bv #xddbcede58fb79abf3ea4b7e83205c92c 128)) #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x215fc1e9103523b36e22029d96a51440 128) (bv #xf2f89ce9e6a86c9eeb206648404e5225 128))
Spec Produced:
(bv #x6665 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9c676f371ba1dd4a3e6f169c53fac514 128) (bv #xddbcede58fb79abf3ea4b7e83205c92c 128))
Spec Produced:
(bv #x8e40 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xe2336000609c80000e518000a0008000 128) (bv #xaaf96000608480001b7d800190008000 128))
Spec Produced:
(bv #x7fff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-sat-add '(buf int16 128) '(buf int16 128))
#(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 16) 1)
Synthesis step completed!
Solution
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
(_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-addrm: cannot remove '/tmp/base_4545_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 12
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm256_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 12
 #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int16x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_4545

base_4545_grammar.rkt
/tmp/base_4545_grammar.rkt
Writing [{ 
"name": "base_4545" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4545_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4545_spec.JSON /tmp/base_4545_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4545 ... 

Grammar:
#<procedure:base_4545>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6c598a7ebcb2a455269c73341ff6132b13bb017d62cf7ca97d9c7061b2411ec9 256))
(int16x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x8a7ea4557334132b017d7ca970611ec9 128)
invoke-spec-lane with env: #((bv #x6c598a7ebcb2a455269c73341ff6132b13bb017d62cf7ca97d9c7061b2411ec9 256))
Concrete counter examples:
(#((bv #x6c598a7ebcb2a455269c73341ff6132b13bb017d62cf7ca97d9c7061b2411ec9 256)) #((bv #x1f63d163a7ce8c1237cce33b54d3b0a7abc80a9b1bc354ce8818a8af92d6b160 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6c598a7ebcb2a455269c73341ff6132b13bb017d62cf7ca97d9c7061b2411ec9 256))
Spec Produced:
(bv #x1ec9 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1f63d163a7ce8c1237cce33b54d3b0a7abc80a9b1bc354ce8818a8af92d6b160 256))
Spec Produced:
(bv #xb160 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$14)

invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x8 '(buf int32 256))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_6292_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi32 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x8 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-max '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6292

base_6292_grammar.rkt
/tmp/base_6292_grammar.rkt
Writing [{ 
"name": "base_6292" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6292_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6292_spec.JSON /tmp/base_6292_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6292 ... 

Grammar:
#<procedure:base_6292>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb087b6e4d67eb1c9a36a7abdce2844e9f4a84504ec50030bfd446bdd041cec3b 256) (bv #x9979dffe2aa436104478f74a78f64ed05b9d8a0fbce2cc81fe293032f57089b5 256))
(vec-max (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xb087b6e42aa436104478f74a78f64ed05b9d8a0fec50030bfe293032041cec3b 256)
invoke-spec-lane with env: #((bv #xb087b6e4d67eb1c9a36a7abdce2844e9f4a84504ec50030bfd446bdd041cec3b 256) (bv #x9979dffe2aa436104478f74a78f64ed05b9d8a0fbce2cc81fe293032f57089b5 256))
Concrete counter examples:
(#((bv #xb087b6e4d67eb1c9a36a7abdce2844e9f4a84504ec50030bfd446bdd041cec3b 256) (bv #x9979dffe2aa436104478f74a78f64ed05b9d8a0fbce2cc81fe293032f57089b5 256)) #((bv #x063acbaeca87bdf8a8cb94384752af3646e11a1c9a148daceeb22002c4f98ec2 256) (bv #xb566aa705ea941e89b67c188bceb876eaa787526438b7e15a4e45ebe4aee87e5 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb087b6e4d67eb1c9a36a7abdce2844e9f4a84504ec50030bfd446bdd041cec3b 256) (bv #x9979dffe2aa436104478f74a78f64ed05b9d8a0fbce2cc81fe293032f57089b5 256))
Spec Produced:
(bv #x041cec3b 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x063acbaeca87bdf8a8cb94384752af3646e11a1c9a148daceeb22002c4f98ec2 256) (bv #xb566aa705ea941e89b67c188bceb876eaa787526438b7e15a4e45ebe4aee87e5 256))
Spec Produced:
(bv #x4aee87e5 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$15 sym_bv$16)

invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-max '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-immrm: cannot remove '/tmp/base_1027_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_min_epi32 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
 (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))) #(struct:x8 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-min '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_1027

base_1027_grammar.rkt
/tmp/base_1027_grammar.rkt
Writing [{ 
"name": "base_1027" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1027_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1027_spec.JSON /tmp/base_1027_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_1027 ... 

Grammar:
#<procedure:base_1027>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x9d290acae9091786a85c76df1dd8e0e162c51aed0b660aafb384701d5ffe2936 256) (bv #x4e4d42d002ea1300fc6e036b8bbd350a6b2d46743157944d0ca7a7683309d35a 256))
(vec-min (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x9d290acae9091786a85c76df8bbd350a62c51aed0b660aafb384701d3309d35a 256)
invoke-spec-lane with env: #((bv #x9d290acae9091786a85c76df1dd8e0e162c51aed0b660aafb384701d5ffe2936 256) (bv #x4e4d42d002ea1300fc6e036b8bbd350a6b2d46743157944d0ca7a7683309d35a 256))
Concrete counter examples:
(#((bv #x9d290acae9091786a85c76df1dd8e0e162c51aed0b660aafb384701d5ffe2936 256) (bv #x4e4d42d002ea1300fc6e036b8bbd350a6b2d46743157944d0ca7a7683309d35a 256)) #((bv #x0dbaaa32d8fca2a13c017fbfe5b972bd1d228f88b7ce9b2faa6fa1ca03758531 256) (bv #xc695465a66195a1772de4050f8be6d6062a16fffc1cee3c930e9d9b143f21107 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x9d290acae9091786a85c76df1dd8e0e162c51aed0b660aafb384701d5ffe2936 256) (bv #x4e4d42d002ea1300fc6e036b8bbd350a6b2d46743157944d0ca7a7683309d35a 256))
Spec Produced:
(bv #x3309d35a 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0dbaaa32d8fca2a13c017fbfe5b972bd1d228f88b7ce9b2faa6fa1ca03758531 256) (bv #xc695465a66195a1772de4050f8be6d6062a16fffc1cee3c930e9d9b143f21107 256))
Spec Produced:
(bv #x03758531 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$17 sym_bv$18)

invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32)
Cost
4
here
(#(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))) #(struct:vec-bwand #(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #frm: cannot remove '/tmp/base_2686_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi32 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi32 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-add '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_2686

base_2686_grammar.rkt
/tmp/base_2686_grammar.rkt
Writing [{ 
"name": "base_2686" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2686_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2686_spec.JSON /tmp/base_2686_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2686 ... 

Grammar:
#<procedure:base_2686>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa43efe3d9cb58507b9d7519cc2a2deb946cbaafbdecf78dcaa6e3b520943505b 256) (bv #x1545609a653218c8773406e979d11249838bd0802eff503ba4a8c2b530f884a9 256))
(vec-add (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xb9845ed701e79dcf310b58853c73f102ca577b7b0dcec9174f16fe073a3bd504 256)
invoke-spec-lane with env: #((bv #xa43efe3d9cb58507b9d7519cc2a2deb946cbaafbdecf78dcaa6e3b520943505b 256) (bv #x1545609a653218c8773406e979d11249838bd0802eff503ba4a8c2b530f884a9 256))
Concrete counter examples:
(#((bv #xa43efe3d9cb58507b9d7519cc2a2deb946cbaafbdecf78dcaa6e3b520943505b 256) (bv #x1545609a653218c8773406e979d11249838bd0802eff503ba4a8c2b530f884a9 256)) #((bv #xfde2ca055567c140002d1eeb2430bee134fce4ff2743ecc115eec4651f6b7b16 256) (bv #xc08e78289e534123ae5c101c764c1fec1653e219a85c78919fb63239f32b1436 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa43efe3d9cb58507b9d7519cc2a2deb946cbaafbdecf78dcaa6e3b520943505b 256) (bv #x1545609a653218c8773406e979d11249838bd0802eff503ba4a8c2b530f884a9 256))
Spec Produced:
(bv #x3a3bd504 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfde2ca055567c140002d1eeb2430bee134fce4ff2743ecc115eec4651f6b7b16 256) (bv #xc08e78289e534123ae5c101c764c1fec1653e219a85c78919fb63239f32b1436 256))
Spec Produced:
(bv #x12968f4c 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)rm: cannot remove '/tmp/base_2606_spec.JSON': No such file or directory

#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$19 sym_bv$20)

invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
invoke-spec-lane with env: #(sym_bv$19 sym_bv$20)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32)
Cost
4
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'uint32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'uint32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf uint32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_2606

base_2606_grammar.rkt
/tmp/base_2606_grammar.rkt
Writing [{ 
"name": "base_2606" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2606_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2606_spec.JSON /tmp/base_2606_grammar.rkt 8 0Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_srav_epi32 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_rorv_epi32 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_rolv_epi32 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6

Generated Grammar File
Dynamically importing from base_2606 ... 

Grammar:
#<procedure:base_2606>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'uint32 256))
Spec result
(bv #xffffffff00000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
Concrete counter examples:
(#((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256)) #((bv #x25473f5b73a4ff21c446edf51657f42641dbb810af25f801e3ab23d78772842d 256) (bv #xcfd61a664923b1fff4d6f0f4937f816aecd062271e44b6f50260646dbbb736c7 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x25473f5b73a4ff21c446edf51657f42641dbb810af25f801e3ab23d78772842d 256) (bv #xcfd61a664923b1fff4d6f0f4937f816aecd062271e44b6f50260646dbbb736c7 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x0 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x0 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$21 sym_bv$22)

invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
invoke-spec-lane with env: #(sym_bv$21 sym_bv$22)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$23 sym_bv$24)

invoke-spec with env: #(sym_bv$23 sym_bv$24)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'uint32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 255 224 sym_bv$23) (extract 255 224 sym_bv$24)) (bvashr (extract 223 192 sym_bv$23) (extract 223 192 sym_bv$24))) (bvashr (extract 191 160 sym_bv$23) (extract 191 160 sym_bv$24))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$23 (bv #x4000000600000006000000060000000600000006000000060000000600000006 256)]
 [sym_bv$24 (bv #x0000000400000004000000040000000400000004000000040000000400000004 256)])
Verification failed :(
#((bv #x4000000600000006000000060000000600000006000000060000000600000006 256) (bv #x0000000400000004000000040000000400000004000000040000000400000004 256))
invoke-spec with env: #((bv #x4000000600000006000000060000000600000006000000060000000600000006 256) (bv #x0000000400000004000000040000000400000004000000040000000400000004 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'uint32 256))
Spec result
(bv #x0400000000000000000000000000000000000000000000000000000000000000 256)
(bv #x0400000000000000000000000000000000000000000000000000000000000000 256)
Verification failed ...
	spec produced: (bv #x0400000000000000000000000000000000000000000000000000000000000000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #x4000000600000006000000060000000600000006000000060000000600000006 256) (bv #x0000000400000004000000040000000400000004000000040000000400000004 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'uint32 256))
Spec result
(bv #x0400000000000000000000000000000000000000000000000000000000000000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'uint32 256))
Spec result
(bv #xffffffff00000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
Concrete counter examples:
(#((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256)) #((bv #x25473f5b73a4ff21c446edf51657f42641dbb810af25f801e3ab23d78772842d 256) (bv #xcfd61a664923b1fff4d6f0f4937f816aecd062271e44b6f50260646dbbb736c7 256)) #((bv #x4000000600000006000000060000000600000006000000060000000600000006 256) (bv #x0000000400000004000000040000000400000004000000040000000400000004 256)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa686ba2a563a7d986822c9412229d8683308979045c4240b1a28f9b0230482bf 256) (bv #x965a7f9cbb9a7637df597bf8939874360379249f4debe1afe277833e23dee07f 256))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x25473f5b73a4ff21c446edf51657f42641dbb810af25f801e3ab23d78772842d 256) (bv #xcfd61a664923b1fff4d6f0f4937f816aecd062271e44b6f50260646dbbb736c7 256))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000600000006000000060000000600000006000000060000000600000006 256) (bv #x0000000400000004000000040000000400000004000000040000000400000004 256))
Spec Produced:
(bv #x04000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$25 sym_bv$26)

invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
invoke-spec-lane with env: #(sym_bv$25 sym_bv$26)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shr '(buf int32 256) '(buf uint32 256))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 256 32 32) 1)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_8074_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_8074

base_8074_grammar.rkt
/tmp/base_8074_grammar.rkt
Writing [{ 
"name": "base_8074" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8074_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8074_spec.JSON /tmp/base_8074_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8074 ... 

Grammar:
#<procedure:base_8074>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x40b5798c253d6a13cc7d19e296672dfd8bbac2a6deda0534dcfec16a25ca5a5964ff65fd15615d3e36b7712db6a9ff37d8d0470cde2c7526d458f5941bc66464 512))
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x253d6a1396672dfddeda053425ca5a5915615d3eb6a9ff37de2c75261bc66464 256)
invoke-spec-lane with env: #((bv #x40b5798c253d6a13cc7d19e296672dfd8bbac2a6deda0534dcfec16a25ca5a5964ff65fd15615d3e36b7712db6a9ff37d8d0470cde2c7526d458f5941bc66464 512))
Concrete counter examples:
(#((bv #x40b5798c253d6a13cc7d19e296672dfd8bbac2a6deda0534dcfec16a25ca5a5964ff65fd15615d3e36b7712db6a9ff37d8d0470cde2c7526d458f5941bc66464 512)) #((bv #x84baaefbbadaf579d7681278ed497fc82ec4bed739bf88b8eb72f63a21b699154da5fd9bf1efaac80c89ee950aa5da51e116eda7b2a491dda5ccdc3214d7453e 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x40b5798c253d6a13cc7d19e296672dfd8bbac2a6deda0534dcfec16a25ca5a5964ff65fd15615d3e36b7712db6a9ff37d8d0470cde2c7526d458f5941bc66464 512))
Spec Produced:
(bv #x1bc66464 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5658_spec.JSON': No such file or directory
#((bv #x84baaefbbadaf579d7681278ed497fc82ec4bed739bf88b8eb72f63a21b699154da5fd9bf1efaac80c89ee950aa5da51e116eda7b2a491dda5ccdc3214d7453e 512))
Spec Produced:
(bv #x14d7453e 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$27)

invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
invoke-spec-lane with env: #(sym_bv$27)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int32x8 '(buf int64 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_5658

base_5658_grammar.rkt
/tmp/base_5658_grammar.rkt
Writing [{ 
"name": "base_5658" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5658_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5658_spec.JSON /tmp/base_5658_grammar.rkt 8 0Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi64 with score: 5 belonging to target agnostic class _mm512_max_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1

Generated Grammar File
Dynamically importing from base_5658 ... 

Grammar:
#<procedure:base_5658>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x45c894f1c14a404e27e32ad362f7e2f8576db453f4eeb43f243f63736f30490a78f2a9e5c27a543619f265a3193b93a26c4346bcd507740336cb9051e70fd22d 512)
invoke-spec-lane with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
Concrete counter examples:
(#((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512)) #((bv #x4f88755ba965e58ff969110b4f7df5c24406fb57233a46b879cae3e3ab0ca26a3f9cc9f66f55dfe47cd826f5fa9c3936de9fdd551701537dc296c80f5754bf57 512) (bv #x7c93d11289afd0ab672a3901d91c8a1f2680c5e7208dd72d154f9b3f60df67ca06e58cefb7aa6a54cdc0d226886ae57680d40c4e439d33c5ca19bc7e4d1d5d6c 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
Spec Produced:
(bv #x36cb9051e70fd22d 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4f88755ba965e58ff969110b4f7df5c24406fb57233a46b879cae3e3ab0ca26a3f9cc9f66f55dfe47cd826f5fa9c3936de9fdd551701537dc296c80f5754bf57 512) (bv #x7c93d11289afd0ab672a3901d91c8a1f2680c5e7208dd72d154f9b3f60df67ca06e58cefb7aa6a54cdc0d226886ae57680d40c4e439d33c5ca19bc7e4d1d5d6c 512))
Spec Produced:
(bv #xca19bc7e4d1d5d6c 64)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$28 sym_bv$29)

invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$30 sym_bv$31)

invoke-spec with env: #(sym_bv$30 sym_bv$31)
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 511 448 sym_bv$31) (extract 511 448 sym_bv$30)) (extract 511 448 sym_bv$30) (extract 511 448 sym_bv$31)) (ite (bvsle (extract 447 384 sym_bv$31) (extract 447 384 sym_bv$30)) (extract 447 384 sym_bv$30) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$30 (bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512)]
 [sym_bv$31 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
(vec-max (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x45c894f1c14a404e27e32ad362f7e2f8576db453f4eeb43f243f63736f30490a78f2a9e5c27a543619f265a3193b93a26c4346bcd507740336cb9051e70fd22d 512)
invoke-spec-lane with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
Concrete counter examples:
(#((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512)) #((bv #x4f88755ba965e58ff969110b4f7df5c24406fb57233a46b879cae3e3ab0ca26a3f9cc9f66f55dfe47cd826f5fa9c3936de9fdd551701537dc296c80f5754bf57 512) (bv #x7c93d11289afd0ab672a3901d91c8a1f2680c5e7208dd72d154f9b3f60df67ca06e58cefb7aa6a54cdc0d226886ae57680d40c4e439d33c5ca19bc7e4d1d5d6c 512)) #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe27d06c331e07ea727e32ad362f7e2f8b76b61952b8e6011243f63736f30490ac6a73efa3eaeebda19f265a3193b93a26c4346bcd507740315b26a874b874651 512) (bv #x45c894f1c14a404ea6d64047a623289f576db453f4eeb43ffa72aa02404fbc3078f2a9e5c27a5436e9ed3752241c5a75d10e0817ff0acd8236cb9051e70fd22d 512))
Spec Produced:
(bv #x36cb9051e70fd22d 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4f88755ba965e58ff969110b4f7df5c24406fb57233a46b879cae3e3ab0ca26a3f9cc9f66f55dfe47cd826f5fa9c3936de9fdd551701537dc296c80f5754bf57 512) (bv #x7c93d11289afd0ab672a3901d91c8a1f2680c5e7208dd72d154f9b3f60df67ca06e58cefb7aa6a54cdc0d226886ae57680d40c4e439d33c5ca19bc7e4d1d5d6c 512))
Spec Produced:
(bv #xca19bc7e4d1d5d6c 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x4000000000000000fffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffefffffffffffffffe 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$32 sym_bv$33)

invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
invoke-spec-lane with env: #(sym_bv$32 sym_bv$33)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expressionrm: cannot remove '/tmp/base_4544_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_min_epi64 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1

(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_4544

base_4544_grammar.rkt
/tmp/base_4544_grammar.rkt
Writing [{ 
"name": "base_4544" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4544_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4544_spec.JSON /tmp/base_4544_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4544 ... 

Grammar:
#<procedure:base_4544>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xc0b32c7214ebb489048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b46bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512)
invoke-spec-lane with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
Concrete counter examples:
(#((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512)) #((bv #x28328da63bf93bc9d07722116f34e64d4f6617d5d800769acb756f81422234c3170a5d6b3c643f93711b707821ff109c8e2cf721bc1ac8620ebee1c96f324e18 512) (bv #x5ba0004f10a1a3a46fa8e283678601afc3dec7fa153df40f86c031137aee12af1e144f7c96b0b28729f66c6e18891dca97d7c7ee85527dcf76413a625462ed2e 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
Spec Produced:
(bv #xb8ee4e1655350a88 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x28328da63bf93bc9d07722116f34e64d4f6617d5d800769acb756f81422234c3170a5d6b3c643f93711b707821ff109c8e2cf721bc1ac8620ebee1c96f324e18 512) (bv #x5ba0004f10a1a3a46fa8e283678601afc3dec7fa153df40f86c031137aee12af1e144f7c96b0b28729f66c6e18891dca97d7c7ee85527dcf76413a625462ed2e 512))
Spec Produced:
(bv #x0ebee1c96f324e18 64)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$34 sym_bv$35)

invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$36 sym_bv$37)

invoke-spec with env: #(sym_bv$36 sym_bv$37)
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 511 448 sym_bv$36) (extract 511 448 sym_bv$37)) (extract 511 448 sym_bv$36) (extract 511 448 sym_bv$37)) (ite (bvsle (extract 447 384 sym_bv$36) (extract 447 384 sym_bv$37)) (extract 447 384 sym_bv$36) ...)) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$36 (bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512)]
 [sym_bv$37 (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512)] ...)
Verification failed :(
#((bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512))
invoke-spec with env: #((bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x13279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512)
(bv #x13279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512)
Verification failed ...
	spec produced: (bv #x13279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) 512 
	synthesized result produced: (bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) 512

invoke-spec with env: #((bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x13279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
(vec-min (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #xc0b32c7214ebb489048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b46bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512)
invoke-spec-lane with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
Concrete counter examples:
(#((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512)) #((bv #x28328da63bf93bc9d07722116f34e64d4f6617d5d800769acb756f81422234c3170a5d6b3c643f93711b707821ff109c8e2cf721bc1ac8620ebee1c96f324e18 512) (bv #x5ba0004f10a1a3a46fa8e283678601afc3dec7fa153df40f86c031137aee12af1e144f7c96b0b28729f66c6e18891dca97d7c7ee85527dcf76413a625462ed2e 512)) #((bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc0b32c7214ebb48916f5e4032fd76e3e6240e41c75f020c84b97fc6e8fce6395bdf3bb7e26b13c318d7c9db1e01fa14486ed36a755aa71e8b8ee4e1655350a88 512) (bv #x3063147308f5d032048799237c9f91cbbeb7d0fd8e2ade06a7f7401fa9f80b465f81558b4fffa0298eeebffd107465dc6365886ed2c1bc6e2a5e9fce5be11532 512))
Spec Produced:
(bv #xb8ee4e1655350a88 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x28328da63bf93bc9d07722116f34e64d4f6617d5d800769acb756f81422234c3170a5d6b3c643f93711b707821ff109c8e2cf721bc1ac8620ebee1c96f324e18 512) (bv #x5ba0004f10a1a3a46fa8e283678601afc3dec7fa153df40f86c031137aee12af1e144f7c96b0b28729f66c6e18891dca97d7c7ee85527dcf76413a625462ed2e 512))
Spec Produced:
(bv #x0ebee1c96f324e18 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x33279a13236b6f038800840000004840a2995cdd93a8dd8b822000010000739e800000000000000080000000000000008000000000000800a4814094e2007410 512) (bv #x13279a13236b6f038808040000011400198ab6d789d2aecac0200020000839cedf81bddae45e1d5ad1a70f940cc4840880000000000800001101844566003840 512))
Spec Produced:
(bv #x13279a13236b6f03 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$38 sym_bv$39)

invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 64) 1)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 rm: cannot remove '/tmp/base_2181_spec.JSON': No such file or directory
Pruning _mm512_sra_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 8 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srav_epi64 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_rorv_epi64 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_rolv_epi64 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 3
16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_2181

base_2181_grammar.rkt
/tmp/base_2181_grammar.rkt
Writing [{ 
"name": "base_2181" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2181_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2181_spec.JSON /tmp/base_2181_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2181 ... 

Grammar:
#<procedure:base_2181>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
Concrete counter examples:
(#((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512)) #((bv #xf8f3a7594b308dbb1de887fe43c6cca5d9ebb8a5b6a14d4f1584f3f4645d13f2a177505cd8d8adc5384792c3c0a1e664abc60209e8f4864a0a76250ea0f25ab7 512) (bv #x48eb50ffa70e8b242a332dddd4d9c41fc6db4762744efa6151a4847911631db7584a6296b38b7c9fa010296dfb4b0bcda8597cae3a169e8963a1530e18295081 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf8f3a7594b308dbb1de887fe43c6cca5d9ebb8a5b6a14d4f1584f3f4645d13f2a177505cd8d8adc5384792c3c0a1e664abc60209e8f4864a0a76250ea0f25ab7 512) (bv #x48eb50ffa70e8b242a332dddd4d9c41fc6db4762744efa6151a4847911631db7584a6296b38b7c9fa010296dfb4b0bcda8597cae3a169e8963a1530e18295081 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$40 sym_bv$41)

invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
invoke-spec-lane with env: #(sym_bv$40 sym_bv$41)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$42 sym_bv$43)

invoke-spec with env: #(sym_bv$42 sym_bv$43)
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 448 sym_bv$42) (extract 511 448 sym_bv$43)) (bvashr (extract 447 384 sym_bv$42) (extract 447 384 sym_bv$43))) (bvashr (extract 383 320 sym_bv$42) (extract 383 320 sym_bv$43))) (bvashr (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$42 (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$43 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 1))
differing-lanes
'(7)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'uint64 512))
Spec result
(bv #xffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
Concrete counter examples:
(#((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512)) #((bv #xf8f3a7594b308dbb1de887fe43c6cca5d9ebb8a5b6a14d4f1584f3f4645d13f2a177505cd8d8adc5384792c3c0a1e664abc60209e8f4864a0a76250ea0f25ab7 512) (bv #x48eb50ffa70e8b242a332dddd4d9c41fc6db4762744efa6151a4847911631db7584a6296b38b7c9fa010296dfb4b0bcda8597cae3a169e8963a1530e18295081 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 7)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xcc286d0d6fd9c4e71fdefd4a05de547ad6a9610dd009c3cbf2c9437fb6d49ef736555312486773774ee0ef1aea0a750bf6c837b461dd68118378abfc44e7d7c8 512) (bv #xdac541ab54fa63a350ca03706fe36290b84981364aa313c8e39879fe32127266511ff8a1952783e9469a90aee7bdf43410708c13636043a2b1a1fbc251ae073d 512))
Spec Produced:
(bv #xffffffffffffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf8f3a7594b308dbb1de887fe43c6cca5d9ebb8a5b6a14d4f1584f3f4645d13f2a177505cd8d8adc5384792c3c0a1e664abc60209e8f4864a0a76250ea0f25ab7 512) (bv #x48eb50ffa70e8b242a332dddd4d9c41fc6db4762744efa6151a4847911631db7584a6296b38b7c9fa010296dfb4b0bcda8597cae3a169e8963a1530e18295081 512))
Spec Produced:
(bv #x0000000000000000 64)
Synthesize by lane...
Lane Index
7
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000000000000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$44 sym_bv$45)

invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-shr '(buf int64 512) '(buf uint64 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040rm: cannot remove '/tmp/base_2061_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_add_epi64 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 64)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 1)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_2061

base_2061_grammar.rkt
/tmp/base_2061_grammar.rkt
Writing [{ 
"name": "base_2061" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2061_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2061_spec.JSON /tmp/base_2061_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2061 ... 

Grammar:
#<procedure:base_2061>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xae641cfcf4dce624853fee7d8c722aa649e7617674f8b8793f160e1ef93638e7faade32206810e2dbfd29f6923c41f9c259e2879ca4704c295c4ecb3f03981c5 512) (bv #x616b3add3786e171c3a7964fcd7d5282e95b6a2d24fd2b98c482e079f14c486e488e0650e80b6d7cc76c0b658de9cc31f6956d03865efa0276454b668ad5ff5a 512))
(vec-add (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x0fcf57da2c63c79548e784cd59ef7d283342cba399f5e4110398ee98ea828155433be972ee8c7ba9873eaaceb1adebcd1c33957d50a5fec40c0a381a7b0f811f 512)
invoke-spec-lane with env: #((bv #xae641cfcf4dce624853fee7d8c722aa649e7617674f8b8793f160e1ef93638e7faade32206810e2dbfd29f6923c41f9c259e2879ca4704c295c4ecb3f03981c5 512) (bv #x616b3add3786e171c3a7964fcd7d5282e95b6a2d24fd2b98c482e079f14c486e488e0650e80b6d7cc76c0b658de9cc31f6956d03865efa0276454b668ad5ff5a 512))
Concrete counter examples:
(#((bv #xae641cfcf4dce624853fee7d8c722aa649e7617674f8b8793f160e1ef93638e7faade32206810e2dbfd29f6923c41f9c259e2879ca4704c295c4ecb3f03981c5 512) (bv #x616b3add3786e171c3a7964fcd7d5282e95b6a2d24fd2b98c482e079f14c486e488e0650e80b6d7cc76c0b658de9cc31f6956d03865efa0276454b668ad5ff5a 512)) #((bv #x93d2e4df077857913e98ab7b9519a527f794897f7930f9fc2d8e6e32a0277452e034273bedc1e0aff8e271e9c17e4b043dbf85a0fd63cb5f1d222d82dc0058cc 512) (bv #x5b903349471d609fad1a23f793b16308a883166ace58bc2fb2ce75998c9eeabbbe55d846b0dda89459013ae4b0607246c08c3f9b38259f103d32c470d3ac45e3 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xae641cfcf4dce624853fee7d8c722aa649e7617674f8b8793f160e1ef93638e7faade32206810e2dbfd29f6923c41f9c259e2879ca4704c295c4ecb3f03981c5 512) (bv #x616b3add3786e171c3a7964fcd7d5282e95b6a2d24fd2b98c482e079f14c486e488e0650e80b6d7cc76c0b658de9cc31f6956d03865efa0276454b668ad5ff5a 512))
Spec Produced:
(bv #x0c0a381a7b0f811f 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x93d2e4df077857913e98ab7b9519a527f794897f7930f9fc2d8e6e32a0277452e034273bedc1e0aff8e271e9c17e4b043dbf85a0fd63cb5f1d222d82dc0058cc 512) (bv #x5b903349471d609fad1a23f793b16308a883166ace58bc2fb2ce75998c9eeabbbe55d846b0dda89459013ae4b0607246c08c3f9b38259f103d32c470d3ac45e3 512))
Spec Produced:
(bv #x5a54f1f3afac9eaf 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$46 sym_bv$47)

invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solutionrm: cannot remove '/tmp/base_3568_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Pruning _mm512_broadcastmb_epi64 as it has an argument of size 8 which is smaller than 512
Pruning _mm512_cvtepu16_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu32_epi64 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_cvtepu8_epi64 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 11 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_madd52lo_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_madd52hi_epu64 with score: 5 belonging to target agnostic class _mm512_madd52lo_epu64
Adding:  _mm512_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_mullo_epi64 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 5

Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_3568

base_3568_grammar.rkt
/tmp/base_3568_grammar.rkt
Writing [{ 
"name": "base_3568" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3568_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3568_spec.JSON /tmp/base_3568_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3568 ... 

Grammar:
#<procedure:base_3568>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x4d5eb67cde84c5a02f884f958a8353540cfa2734173fa4f17ad947722c74a008ed73b7f70bbe7323c15df4187724e76d264a26bce820ad11a523d5c5cac6cd74 512) (bv #xb9d5c4baf12cd55107fc21e27e5ee76e46febc95d68b0bda184660348c8ea2874d8024c77c323eb89e3d78d88516907b0f0ce265c85907045b8c6199ba0e467c 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x95a4f5c477f0a7a0c7d505a1f5769a1873b66f108d23d03a9f52df2c633574384b670595019b3b28b009d0258546815f36b74992f8272b444c0ee7ba18d13c30 512rm: cannot remove '/tmp/base_1143_spec.JSON': No such file or directory
)
invoke-spec-lane with env: #((bv #x4d5eb67cde84c5a02f884f958a8353540cfa2734173fa4f17ad947722c74a008ed73b7f70bbe7323c15df4187724e76d264a26bce820ad11a523d5c5cac6cd74 512) (bv #xb9d5c4baf12cd55107fc21e27e5ee76e46febc95d68b0bda184660348c8ea2874d8024c77c323eb89e3d78d88516907b0f0ce265c85907045b8c6199ba0e467c 512))
Concrete counter examples:
(#((bv #x4d5eb67cde84c5a02f884f958a8353540cfa2734173fa4f17ad947722c74a008ed73b7f70bbe7323c15df4187724e76d264a26bce820ad11a523d5c5cac6cd74 512) (bv #xb9d5c4baf12cd55107fc21e27e5ee76e46febc95d68b0bda184660348c8ea2874d8024c77c323eb89e3d78d88516907b0f0ce265c85907045b8c6199ba0e467c 512)) #((bv #xc0cf4ce7e3687babd8e7758a5769f8c0831bd49e39f486a4ba920375c4ea293557378360c4b00fcf1cf9c5b7047c1a5896c2c5d83a970bb420bf697b9a25033c 512) (bv #xf7c2c718e94d925dbe720ee25af67616d2f5b3190c4f60189f797e83117873f9b62b6d1ad0b3ba484e7697a48b67ff5a6c5f99a73b1a076fe375d0be7f79ccff 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x4d5eb67cde84c5a02f884f958a8353540cfa2734173fa4f17ad947722c74a008ed73b7f70bbe7323c15df4187724e76d264a26bce820ad11a523d5c5cac6cd74 512) (bv #xb9d5c4baf12cd55107fc21e27e5ee76e46febc95d68b0bda184660348c8ea2874d8024c77c323eb89e3d78d88516907b0f0ce265c85907045b8c6199ba0e467c 512))
Spec Produced:
(bv #x4c0ee7ba18d13c30 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xc0cf4ce7e3687babd8e7758a5769f8c0831bd49e39f486a4ba920375c4ea293557378360c4b00fcf1cf9c5b7047c1a5896c2c5d83a970bb420bf697b9a25033c 512) (bv #xf7c2c718e94d925dbe720ee25af67616d2f5b3190c4f60189f797e83117873f9b62b6d1ad0b3ba484e7697a48b67ff5a6c5f99a73b1a076fe375d0be7f79ccff 512))
Spec Produced:
(bv #x7c21ef9554ce08c4 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$48 sym_bv$49)

invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
invoke-spec-lane with env: #(sym_bv$48 sym_bv$49)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-mul '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 64 0 128) 1)
Synthesis step completed!
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_1143

base_1143_grammar.rkt
/tmp/base_1143_grammar.rkt
Writing [{ 
"name": "base_1143" , 
"semantics": [ "(extract sign-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1143_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1143_spec.JSON /tmp/base_1143_grammar.rkt 8 0Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi8_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi16_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 256
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi64 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
rm: cannot remove '/tmp/base_5595_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi16_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu16_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_mullo_epi32 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm256_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
Adding:  _mm256_dpbusds_epi32 with score: 6 belonging to target agnostic class _mm_dpbusds_epi32
Adding:  _mm256_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm256_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm256_dpbusd_epi32 with score: 6 belonging to target agnostic class _mm256_dpbusd_epi32
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 11

Generated Grammar File
Dynamically importing from base_1143 ... 

Grammar:
#<procedure:base_1143>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x2e6ff5d3d5be5cb4debe063373be7299ac5d6d48665e5982d3c8bc98121d6590 256))
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x000000002e6ff5d3ffffffffd5be5cb4ffffffffdebe06330000000073be7299ffffffffac5d6d4800000000665e5982ffffffffd3c8bc9800000000121d6590 512)
invoke-spec-lane with env: #((bv #x2e6ff5d3d5be5cb4debe063373be7299ac5d6d48665e5982d3c8bc98121d6590 256))
Concrete counter examples:
(#((bv #x2e6ff5d3d5be5cb4debe063373be7299ac5d6d48665e5982d3c8bc98121d6590 256)) #((bv #x135603088a7e55fb61fbe823e49be050f6f677144acb1f020ff9bb0f62bc3bab 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x2e6ff5d3d5be5cb4debe063373be7299ac5d6d48665e5982d3c8bc98121d6590 256))
Spec Produced:
(bv #x00000000121d6590 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x135603088a7e55fb61fbe823e49be050f6f677144acb1f020ff9bb0f62bc3bab 256))
Spec Produced:
(bv #x0000000062bc3bab 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$50)

invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
invoke-spec-lane with env: #(sym_bv$50)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int64x8 '(buf int32 256))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 32 64) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5595

base_5595_grammar.rkt
/tmp/base_5595_grammar.rkt
Writing [{ 
"name": "base_5595" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5595_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5595_spec.JSON /tmp/base_5595_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5595 ... 

Grammar:
#<procedure:base_5595>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x0413b1daeee5cfeb07081d54a6d0b2a2541174689c874b7449ed3662567cdaf6 256)
invoke-spec-lane with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
Concrete counter examples:
(#((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256)) #((bv #x07cb45a931369741fac15c6bc71e928a10bc6cc99949d1d485421630ede04503 256) (bv #x87c9503249d665ff669def523fddd4c676ac537da64d94f6bb42044dc5299094 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
Spec Produced:
(bv #x567cdaf6 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x07cb45a931369741fac15c6bc71e928a10bc6cc99949d1d485421630ede04503 256) (bv #x87c9503249d665ff669def523fddd4c676ac537da64d94f6bb42044dc5299094 256))
Spec Produced:
(bv #x08f495bc 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_mul_epu32_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_mul_epu32_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$51 sym_bv$52)

invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
invoke-spec-lane with env: #(sym_bv$51 sym_bv$52)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$53 sym_bv$54)

invoke-spec with env: #(sym_bv$53 sym_bv$54)
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (bvmul (extract 255 224 sym_bv$53) (extract 255 224 sym_bv$54)) (bvmul (extract 223 192 sym_bv$53) (extract 223 192 sym_bv$54))) (bvmul (extract 191 160 sym_bv$53) (extract 191 160 sym_bv$54))) (bvmul (extract ...) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$53 (bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256)]
 [sym_bv$54 (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256)])
Verification failed :(
#((bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256) (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256))
invoke-spec with env: #((bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256) (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xdc3c5559bb0b0eb0ffffff4a9bec0d707fff7ff9362d2d10fffdfff95477483f 256)
(bv #xdc3c5559bb0b0eb0ffffff4a9bec0d707fff7ff9362d2d10fffdfff95477483f 256)
Verification failed ...
	spec produced: (bv #xdc3c5559bb0b0eb0ffffff4a9bec0d707fff7ff9362d2d10fffdfff95477483f 256) 256 
	synthesized result produced: (bv #x8418c03cbb0b0eb0d35361a29bec0d70442523c3362d2d10a00430425477483f 256) 256

invoke-spec with env: #((bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256) (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #xdc3c5559bb0b0eb0ffffff4a9bec0d707fff7ff9362d2d10fffdfff95477483f 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 128
Pruning _mm256_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x4 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastd_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24
 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x0413b1daeee5cfeb07081d54a6d0b2a2541174689c874b7449ed3662567cdaf6 256)
invoke-spec-lane with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
Concrete counter examples:
(#((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256)) #((bv #x07cb45a931369741fac15c6bc71e928a10bc6cc99949d1d485421630ede04503 256) (bv #x87c9503249d665ff669def523fddd4c676ac537da64d94f6bb42044dc5299094 256)) #((bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256) (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6c2231ebaf80564b93968e5ed29c5b516c5e4302ddbfbec2ea67ab823f52c922 256) (bv #x5d7a250eaaf2e8e14792f176fae13c02b913ec3472d821fae81f8171cbfe074b 256))
Spec Produced:
(bv #x567cdaf6 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x07cb45a931369741fac15c6bc71e928a10bc6cc99949d1d485421630ede04503 256) (bv #x87c9503249d665ff669def523fddd4c676ac537da64d94f6bb42044dc5299094 256))
Spec Produced:
(bv #x08f495bc 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x6d3a01e787adf215400000ebdd3455b580000003dadb112cfffe0003f12b0ec9 256) (bv #xc49a86bff93d6ff0c8fcbb5ef4913db0ffffd5534fb5ef4c38e15553a9db7ac7 256))
Spec Produced:
(bv #xfffdfff9 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$55 sym_bv$56)

invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
verify-across-lanes returned #t ... 

Test elapsed time: 
6
(vec-mul '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 32 0 64) 3)
Synthesis step completed!
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_8358

base_8358_grammar.rkt
/tmp/base_8358_grammar.rkt
Writing [{ 
"name": "base_8358" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8358_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8358_spec.JSON /tmp/base_8358_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8358 ... 

Grammar:
#<procedure:base_8358>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xfffff31affffdead00003c4dffffb97100005867ffffbc4500003032ffffd03c 256)
invoke-spec-lane with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
Concrete counter examples:
(#((bv #xf31adead3c4db9715867bc453032d03c 128)) #((bv #x523fadaeae75922596bfc000fedc1f00 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
Spec Produced:
(bv #xffffd03c 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x523fadaeae75922596bfc000fedc1f00 128))
Spec Produced:
(bv #x00001f00 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 64 16 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 64 16 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$57)

invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
invoke-spec-lane with env: #(sym_bv$57)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$58)

invoke-spec with env: #(sym_bv$58)
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (sign-extend (extract 127 112 sym_bv$58) (bitvector 32)) (sign-extend (extract 111 96 sym_bv$58) (bitvector 32))) (sign-extend (extract 95 80 sym_bv$58) (bitvector 32))) (sign-extend (extract 79 64 sym_bv$58) ...)) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$58 (bv #x0000000000000000ffffffff00008000 128)])
Verification failed :(
#((bv #x0000000000000000ffffffff00008000 128))
invoke-spec with env: #((bv #x0000000000000000ffffffff00008000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256)
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256) 256 
	synthesized result produced: (bv #xffffffffffffffffffffffffffffffff0000000000000000ffffffffffff8000 256) 256

invoke-spec with env: #((bv #x0000000000000000ffffffff00008000 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x00000000000000000000000000000000ffffffffffffffff00000000ffff8000 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xfffff31affffdead00003c4dffffb97100005867ffffbc4500003032ffffd03c 256)
invoke-spec-lane with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
Concrete counter examples:
(#((bv #xf31adead3c4db9715867bc453032d03c 128)) #((bv #x523fadaeae75922596bfc000fedc1f00 128)) #((bv #x0000000000000000ffffffff00008000 128)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf31adead3c4db9715867bc453032d03c 128))
Spec Produced:
(bv #xffffd03c 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x523fadaeae75922596bfc000fedc1f00 128))
Spec Produced:
(bv #x00001f00 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x0000000000000000ffffffff00008000 128))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$59)
rm: cannot remove '/tmp/base_2755_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 3
Num Broadcasts: 22
Num Computes: 15
Adding:  _mm_hadd_epi16 with score: 5 belonging to target agnostic class _mm_hadd_epi16
Adding:  _mm_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 23

invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
invoke-spec-lane with env: #(sym_bv$59)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int32x8 '(buf int16 128))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 16 32) 1)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_2755

base_2755_grammar.rkt
/tmp/base_2755_grammar.rkt
Writing [{ 
"name": "base_2755" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2755_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2755_spec.JSON /tmp/base_2755_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2755 ... 

Grammar:
#<procedure:base_2755>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xbf4f4c7bcbe0b608ea9b87e13c089523 128) (bv #x21cb47af4b48e0c3302ade2606eecf36 128))
(vec-add (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #xe11a942a172896cb1ac5660742f66459 128)
invoke-spec-lane with env: #((bv #xbf4f4c7bcbe0b608ea9b87e13c089523 128) (bv #x21cb47af4b48e0c3302ade2606eecf36 128))
Concrete counter examples:
(#((bv #xbf4f4c7bcbe0b608ea9b87e13c089523 128) (bv #x21cb47af4b48e0c3302ade2606eecf36 128)) #((bv #x55943044a784d2d4785688b35dfe9240 128) (bv #xc30ccacbc3ad2d4349ba80b7673e682b 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xbf4f4c7bcbe0b608ea9b87e13c089523 128) (bv #x21cb47af4b48e0c3302ade2606eecf36 128))
Spec Produced:
(bv #x6459 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x55943044a784d2d4785688b35dfe9240 128) (bv #xc30ccacbc3ad2d4349ba80b7673e682b 128))
Spec Produced:
(bv #xfa6b 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$60 sym_bv$61)

invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
invoke-spec-lane with env: #(sym_bv$60 sym_bv$61)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-add '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16) 1)
Synthesis step completed!
Solution
(_mm256_add_epi8_dslrm: cannot remove '/tmp/base_4556_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 22
Actual Compute ops 8
Num Broadcasts: 17
Num Computes: 15
13 < 18
Adding:  _mm_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm_mullo_epi16 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm_mulhi_epi16 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm_mulhrs_epi16 with score: 6 belonging to target agnostic class _mm_mulhrs_pi16
Adding:  _mm_mulhi_epu16 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm_maddubs_epi16 with score: 6 belonging to target agnostic class _mm_maddubs_pi16
Adding:  _mm_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi64_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 25
 (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_4556

base_4556_grammar.rkt
/tmp/base_4556_grammar.rkt
Writing [{ 
"name": "base_4556" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4556_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4556_spec.JSON /tmp/base_4556_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4556 ... 

Grammar:
#<procedure:base_4556>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xc3abdd99df8bb0a34e6b156add3e4541 128) (bv #x59123afdd35e1da8d5c7492df0b6bfda 128))
(vec-mul (buffer #<procedure:buffer-fn> 'int16 128) (buffer #<procedure:buffer-fn> 'int16 128))
Spec result
(bv #x3506aa35a60a61f8fc2dfda26a14785a 128)
invoke-spec-lane with env: #((bv #xc3abdd99df8bb0a34e6b156add3e4541 128) (bv #x59123afdd35e1da8d5c7492df0b6bfda 128))
Concrete counter examples:
(#((bv #xc3abdd99df8bb0a34e6b156add3e4541 128) (bv #x59123afdd35e1da8d5c7492df0b6bfda 128)) #((bv #x07b1e4dcc64d24d3ffbd1ae3c8452706 128) (bv #x42f74894cb8cb341d5832b561fa71932 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xc3abdd99df8bb0a34e6b156add3e4541 128) (bv #x59123afdd35e1da8d5c7492df0b6bfda 128))
Spec Produced:
(bv #x785a 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x07b1e4dcc64d24d3ffbd1ae3c8452706 128) (bv #x42f74894cb8cb341d5832b561fa71932 128))
Spec Produced:
(bv #x352c 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$62 sym_bv$63)

invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
invoke-spec-lane with env: #(sym_bv$62 sym_bv$63)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-mul '(buf int16 128) '(buf int16 128))
#(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 16 0 32) 1)
Synthesis step completed!
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
get-expr-grammar with base_name: base_6442

base_6442_grammar.rkt
/tmp/base_6442_grammar.rktrm: cannot remove '/tmp/base_6442_spec.JSON': No such file or directory
Pruning _mm_set1_epi16 as it has an argument of size 16 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 15
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 15

Writing [{ 
"name": "base_6442" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,8]], 
"output_shape": [1 , 8], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6442_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6442_spec.JSON /tmp/base_6442_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6442 ... 

Grammar:
#<procedure:base_6442>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xcab3f021c39eee98 64))
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Spec result
(bv #x00ca00b300f0002100c3009e00ee0098 128)
invoke-spec-lane with env: #((bv #xcab3f021c39eee98 64))
Concrete counter examples:
(#((bv #xcab3f021c39eee98 64)) #((bv #xb05f6cae4b379fee 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xcab3f021c39eee98 64))
Spec Produced:
(bv #x0098 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb05f6cae4b379fee 64))
Spec Produced:
(bv #x00ee 16)
Synthesize by lane...
Z3 Synthesized Solution
(interleave-vectors_dsl (union) (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Contains symbolic union, retry synthesis
Union solution:
(interleave-vectors_dsl (union) (reg (bv #x0 4)) 64 8)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xcab3f021c39eee98 64))
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Spec result
(bv #x00ca00b300f0002100c3009e00ee0098 128)
invoke-spec-lane with env: #((bv #xcab3f021c39eee98 64))
Concrete counter examples:
(#((bv #xcab3f021c39eee98 64)) #((bv #xb05f6cae4b379fee 64)) #((bv #x9cc9fbef55ebb8d6 64)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xcab3f021c39eee98 64))
Spec Produced:
(bv #x0098 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb05f6cae4b379fee 64))
Spec Produced:
(bv #x00ee 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x9cc9fbef55ebb8d6 64))
Spec Produced:
(bv #x00b8 16)
Synthesize by lane...
Z3 Synthesized Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$64)

invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
invoke-spec-lane with env: #(sym_bv$64)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x8 '(buf uint8 64))
#(#t #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0 4)) 64 8) 0)
Synthesis step completed!
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x00rm: cannot remove '/tmp/base_5240_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20
rm: cannot remove '/tmp/base_3991_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_set1_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20
 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5240

base_5240_grammar.rkt
/tmp/base_5240_grammar.rkt
Writing [{ 
"name": "base_5240" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[64, 16]] 
}
] to file /tmp/base_5240_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5240_spec.JSON /tmp/base_5240_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5240 ... 

Grammar:
#<procedure:base_5240>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0040 16) #t))
Spec result
(bv #x00400040004000400040004000400040 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0040 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0040 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00400040004000400040004000400040 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00400040004000400040004000400040 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 (int-imm (bv #x0040 16) #t))
#(#t #(struct:lit (bv #x00400040004000400040004000400040 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x00 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
get-expr-grammar with base_name: base_3991

base_3991_grammar.rkt
/tmp/base_3991_grammar.rkt
Writing [{ 
"name": "base_3991" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_16"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3991_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3991_spec.JSON /tmp/base_3991_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_3991 ... 

Grammar:
#<procedure:base_3991>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x074e 16))
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Spec result
(bv #x074e074e074e074e074e074e074e074e 128)
invoke-spec-lane with env: #((bv #x074e 16))
Concrete counter examples:
(#((bv #x074e 16)) #((bv #xe859 16)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x074e 16))
Spec Produced:
(bv #x074e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xe859 16))
Spec Produced:
(bv #xe859 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$65)

invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int16 16))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 16) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x00 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x00 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x02 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x02 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x02 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x02 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x02 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x00 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
   128
   16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(int64x8
 (vec-mul
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x02 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x00 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
    128
    16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32
 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solutionrm: cannot remove '/tmp/base_4531_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
get-expr-grammar with base_name: base_4531

base_4531_grammar.rkt
/tmp/base_4531_grammar.rkt
Writing [{ 
"name": "base_4531" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_32"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4531_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4531_spec.JSON /tmp/base_4531_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_4531 ... 

Grammar:
#<procedure:base_4531>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb0ed81d9 32))
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Spec result
(bv #xb0ed81d9b0ed81d9b0ed81d9b0ed81d9b0ed81d9b0ed81d9b0ed81d9b0ed81d9 256)
invoke-spec-lane with env: #((bv #xb0ed81d9 32))
Concrete counter examples:
(#((bv #xb0ed81d9 32)) #((bv #xf316395c 32)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb0ed81d9 32))
Spec Produced:
(bv #xb0ed81d9 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf316395c 32))
Spec Produced:
(bv #xf316395c 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$66)

invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
invoke-spec-lane with env: #(sym_bv$66)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 '(buf int32 32))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dslrm: cannot remove '/tmp/base_5443_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
 #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8
  (vec-mul
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x02 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
     128
     16)
    128
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x00 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
     128
     16)
    128
    16
    32)
   256
   32
   0
   64)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5443

base_5443_grammar.rkt
/tmp/base_5443_grammar.rkt
Writing [{ 
"name": "base_5443" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_5443_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5443_spec.JSON /tmp/base_5443_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5443 ... 

Grammar:
#<procedure:base_5443>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #f))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #f))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8
   (vec-mul
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x02 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
      128
      16)
     128
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x00 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
      128
      16)
     128
     16
     32)
    256
    32
    0
    64)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expressionrm: cannot remove '/tmp/base_9837_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4

(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9837

base_9837_grammar.rkt
/tmp/base_9837_grammar.rkt
Writing [{ 
"name": "base_9837" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1073741823, 64]] 
}
] to file /tmp/base_9837_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9837_spec.JSON /tmp/base_9837_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9837 ... 

Grammar:
#<procedure:base_9837>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Spec result
(bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000003fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 (int-imm (bv #x000000003fffffff 64) #t))
#(#t #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 1)
Synthesis step completed!
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8
    (vec-mul
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x02 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
       128
       16)
      128
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x00 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
       128
       16)
      128
      16
      32)
     256
     32
     0
     64)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-immrm: cannot remove '/tmp/base_6492_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i64x4 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i64x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastq_epi64 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi64 as it has an argument of size 64 which is smaller than 512
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_andnot_epi64 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_si512 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_epi32 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_and_si512 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi64 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi32 with score: 3 belonging to target agnostic class _mm256_and_si256
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 6
 (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_6492

base_6492_grammar.rkt
/tmp/base_6492_grammar.rkt
Writing [{ 
"name": "base_6492" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [64, 64], 
"output_precision": 64, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6492_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6492_spec.JSON /tmp/base_6492_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6492 ... 

Grammar:
#<procedure:base_6492>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5d9284fe349b6c92630a5e4fc34b55c754546a8befe7ea635ad9a979fed56ea5c04ffca9950f3cb2c6379289a1e2caf808079db2a8537f9b95442865e3e306c2 512) (bv #xb2e8de7b18f65c204eb14036140f65af325feb03930a9613aa58ea57a02a246e961205aa31dc15a4ef88f12c7cf83327c0957a1635b61711ff4120127ebc4f35 512))
(vec-bwand (buffer #<procedure:buffer-fn> 'int64 512) (buffer #<procedure:buffer-fn> 'int64 512))
Spec result
(bv #x1080847a10924c0042004006000b458710546a03830282030a58a851a0002424800204a8110c14a0c600900820e0022000051812201217119540200062a00600 512)
invoke-spec-lane with env: #((bv #x5d9284fe349b6c92630a5e4fc34b55c754546a8befe7ea635ad9a979fed56ea5c04ffca9950f3cb2c6379289a1e2caf808079db2a8537f9b95442865e3e306c2 512) (bv #xb2e8de7b18f65c204eb14036140f65af325feb03930a9613aa58ea57a02a246e961205aa31dc15a4ef88f12c7cf83327c0957a1635b61711ff4120127ebc4f35 512))
Concrete counter examples:
(#((bv #x5d9284fe349b6c92630a5e4fc34b55c754546a8befe7ea635ad9a979fed56ea5c04ffca9950f3cb2c6379289a1e2caf808079db2a8537f9b95442865e3e306c2 512) (bv #xb2e8de7b18f65c204eb14036140f65af325feb03930a9613aa58ea57a02a246e961205aa31dc15a4ef88f12c7cf83327c0957a1635b61711ff4120127ebc4f35 512)) #((bv #xf91180a9ff532a8377631ec3d05d6d2cac07ce9e080f4cf60d8ca6b78f2bda32bb09c1956239ce977f66beba2b348ace1918f30c9d283986c432d92702c953b2 512) (bv #x406b712cf637d833378bdd700ccaaf5217ff9a1a4c491f24942e92acff34ff10f0fbc36350d924403bada12457ea6419fed422afd4713a260a7280bdd88bf5ce 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5d9284fe349b6c92630a5e4fc34b55c754546a8befe7ea635ad9a979fed56ea5c04ffca9950f3cb2c6379289a1e2caf808079db2a8537f9b95442865e3e306c2 512) (bv #xb2e8de7b18f65c204eb14036140f65af325feb03930a9613aa58ea57a02a246e961205aa31dc15a4ef88f12c7cf83327c0957a1635b61711ff4120127ebc4f35 512))
Spec Produced:
(bv #x9540200062a00600 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf91180a9ff532a8377631ec3d05d6d2cac07ce9e080f4cf60d8ca6b78f2bda32bb09c1956239ce977f66beba2b348ace1918f30c9d283986c432d92702c953b2 512) (bv #x406b712cf637d833378bdd700ccaaf5217ff9a1a4c491f24942e92acff34ff10f0fbc36350d924403bada12457ea6419fed422afd4713a260a7280bdd88bf5ce 512))
Spec Produced:
(bv #x0032802500895182 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$67 sym_bv$68)

invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
invoke-spec-lane with env: #(sym_bv$67 sym_bv$68)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-bwand '(buf int64 512) '(buf int64 512))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32) 1)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x05 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x05 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x05 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x05 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x07 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x07 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x07 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x07 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x07 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x05 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
   128
   16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(int64x8
 (vec-mul
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x07 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x05 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
    128
    16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32
 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8
  (vec-mul
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x07 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
     128
     16)
    128
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x05 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
     128
     16)
    128
    16
    32)
   256
   32
   0
   64)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8167

base_8167_grammar.rkt
/tmp/base_8167_grammar.rkt
Writing [{ 
"name": "base_8167" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 64]] 
}
] to file /tmp/base_8167_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8167_spec.JSON /tmp/base_8167_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8167 ... 

Grammar:
#<procedure:base_8167>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000000000000001 64) #t))
Spec result
(bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000000000001 64)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000000000000001 64) #t))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8
   (vec-mul
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x07 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
      128
      16)
     128
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x05 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
      128
      16)
     128
     16
     32)
    256
    32
    0
    64)
   256
   32
   64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8
    (vec-mul
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x07 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
       128
       16)
      128
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x05 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
       128
       16)
      128
      16
      32)
     256
     32
     0
     64)
    256
    32
    64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8
     (vec-mul
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_mulhi_pi16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x07 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
        128
        16)
       128
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x05 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
        128
        16)
       128
       16
       32)
      256
      32
      0
      64)
     256
     32
     64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8
      (vec-mul
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_mulhi_pi16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x07 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
         128
         16)
        128
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x05 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
         128
         16)
        128
        16
        32)
       256
       32
       0
       64)
      256
      32
      64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8
     (vec-mul
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8
       (vec-mul
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_mulhi_pi16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x07 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
          128
          16)
         128
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x05 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
          128
          16)
         128
         16
         32)
        256
        32
        0
        64)
       256
       32
       64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_mulhi_pi16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x02 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
        128
        16)
       128
       16
       32)
      (_mm256_cvtepi8_epi32_dslrm: cannot remove '/tmp/base_6683_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4

       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x00 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
        128
        16)
       128
       16
       32)
      256
      32
      0
      64)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_6683

base_6683_grammar.rkt
/tmp/base_6683_grammar.rkt
Writing [{ 
"name": "base_6683" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[30, 64]] 
}
] to file /tmp/base_6683_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6683_spec.JSON /tmp/base_6683_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_6683 ... 

Grammar:
#<procedure:base_6683>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000000000001e 64) #f))
Spec result
(bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000000000001e 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000000000001e 64) #f))
#(#t #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8
      (vec-mul
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8
        (vec-mul
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_mulhi_pi16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x07 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
           128
           16)
          128
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x05 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
           128
           16)
          128
          16
          32)
         256
         32
         0
         64)
        256
        32
        64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_mulhi_pi16_dsl
       (EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x02 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
         128
         16)
        128
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x00 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
         128
         16)
        128
        16
        32)
       256
       32
       0
       64)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9514

base_9514_grammar.rkt
/tmp/base_9514_grammar.rkt
Writing [{ 
"name": "base_9514" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[2147483647, 64]] 
}
] to file /tmp/base_9514_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9514_spec.JSON /tmp/base_9514_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9514 ... 

Grammar:
#<procedure:base_9514>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Spec result
(bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x000000007fffffff 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x000000007fffffff 64) #t))
#(#t #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8
       (vec-mul
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8
         (vec-mul
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_mulhi_pi16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x07 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
            128
            16)
           128
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x05 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
            128
            16)
           128
           16
           32)
          256
          32
          0
          64)
         256
         32
        rm: cannot remove '/tmp/base_2430_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 4
 64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_mulhi_pi16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x02 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
          128
          16)
         128
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x00 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
          128
          16)
         128
         16
         32)
        256
        32
        0
        64)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_2430

base_2430_grammar.rkt
/tmp/base_2430_grammar.rkt
Writing [{ 
"name": "base_2430" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 64, 
"args": [], 
"spec_invokation": "",
"imms": [[-2147483648, 64]] 
}
] to file /tmp/base_2430_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2430_spec.JSON /tmp/base_2430_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2430 ... 

Grammar:
#<procedure:base_2430>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Spec result
(bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffffffff80000000 64)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #xffffffff80000000 64) #t))
#(#t #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8
        (vec-mul
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8
          (vec-mul
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_mulhi_pi16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x07 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
             128
             16)
            128
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x05 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
             128
             16)
            128
            16
            32)
           256
           32
           0
           64)
          256
          32
          64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_mulhi_pi16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x02 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
           128
           16)
          128
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x00 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
           128
           16)
          128
          16
          32)
         256
         32
         0
         64)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8
         (vec-mul
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8
           (vec-mul
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_mulhi_pi16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x07 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
              128
              16)
             128
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
        rm: cannot remove '/tmp/base_4111_spec.JSON': No such file or directory
       (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x05 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
              128
              16)
             128
             16
             32)
            256
            32
            0
            64)
           256
           32
           64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_mulhi_pi16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x02 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
            128
            16)
           128
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x00 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
            128
            16)
           128
           16
           32)
          256
          32
          0
          64)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Hashed expression
(x8 '(buf uint32 32))
Leaves are bitvectors of sizes:
(32)
get-expr-grammar with base_name: base_4111

base_4111_grammar.rkt
/tmp/base_4111_grammar.rkt
Writing [{ 
"name": "base_4111" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_32"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4111_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4111_spec.JSON /tmp/base_4111_grammar.rkt 8 0Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

Generated Grammar File
Dynamically importing from base_4111 ... 

Grammar:
#<procedure:base_4111>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1b2f5678 32))
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Spec result
(bv #x1b2f56781b2f56781b2f56781b2f56781b2f56781b2f56781b2f56781b2f5678 256)
invoke-spec-lane with env: #((bv #x1b2f5678 32))
Concrete counter examples:
(#((bv #x1b2f5678 32)) #((bv #xebb6bf97 32)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1b2f5678 32))
Spec Produced:
(bv #x1b2f5678 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xebb6bf97 32))
Spec Produced:
(bv #xebb6bf97 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$69)

invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
invoke-spec-lane with env: #(sym_bv$69)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 '(buf uint32 32))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 32) 1)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint32 32)
Sub-expression Synthesis completed:
(reg (bv #x09 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x09 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8
          (vec-mul
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8
            (vec-mul
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_mulhi_pi16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x07 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
               128
               16)
              128
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x05 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
               128
               16)
              128
              16
              32)
             256
             32
             0
             64)
            256
            32
            64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_mulhi_pi16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x02 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
             128
             16)
            128
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x00 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
             128
             16)
            128
            16
            32)
           256
           32
           0
           64)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
here
(#(struct:vec-if #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t))) #(struct:vec-shr #(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-immrm: cannot remove '/tmp/base_5934_spec.JSON': No such file or directory
Pruning _mm256_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm256_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_andnot_si256 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm256_and_si256 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
 (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32))))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-bwand '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5934

base_5934_grammar.rkt
/tmp/base_5934_grammar.rkt
Writing [{ 
"name": "base_5934" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5934_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5934_spec.JSON /tmp/base_5934_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5934 ... 

Grammar:
#<procedure:base_5934>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x42b99c75c587435f282a8b2b93d7f4deb9a60c65485e6e7bf8dd765c381de8aa 256) (bv #x24f9b795fd53eeffa3df0b978e2d9af6f5b63142d65056bebd364a9ac3781df1 256))
(vec-bwand (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x00b99415c503425f200a0b03820590d6b1a600404050463ab8144218001808a0 256)
invoke-spec-lane with env: #((bv #x42b99c75c587435f282a8b2b93d7f4deb9a60c65485e6e7bf8dd765c381de8aa 256) (bv #x24f9b795fd53eeffa3df0b978e2d9af6f5b63142d65056bebd364a9ac3781df1 256))
Concrete counter examples:
(#((bv #x42b99c75c587435f282a8b2b93d7f4deb9a60c65485e6e7bf8dd765c381de8aa 256) (bv #x24f9b795fd53eeffa3df0b978e2d9af6f5b63142d65056bebd364a9ac3781df1 256)) #((bv #x168f923cac7213959579f0a9aa600a4850c39ce898b8d38f55e8a661c354f69f 256) (bv #xc91a145d33526668e6b981c1c77d4b12b0e9169982d4ae9bfb11e108184a1a34 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x42b99c75c587435f282a8b2b93d7f4deb9a60c65485e6e7bf8dd765c381de8aa 256) (bv #x24f9b795fd53eeffa3df0b978e2d9af6f5b63142d65056bebd364a9ac3781df1 256))
Spec Produced:
(bv #x001808a0 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x168f923cac7213959579f0a9aa600a4850c39ce898b8d38f55e8a661c354f69f 256) (bv #xc91a145d33526668e6b981c1c77d4b12b0e9169982d4ae9bfb11e108184a1a34 256))
Spec Produced:
(bv #x00401214 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$70 sym_bv$71)

invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
invoke-spec-lane with env: #(sym_bv$70 sym_bv$71)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-bwand '(buf int32 256) '(buf int32 256))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 256) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256)
Cost
4
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_5349_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 18
Grammar Number of Shuffle DSL Clauses:	 14
Grammar Number of DSL Compute Clauses:	 8
> uint1 1)) #(struct:x8 #(struct:int-imm (bv #x00000001 32) #t)) #(struct:x8 #(struct:int-imm (bv #x00000000 32) #t)))
=======================================
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-if
 (buffer #<procedure:buffer-fn> 'uint1 8)
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(8 256 256)
get-expr-grammar with base_name: base_5349

base_5349_grammar.rkt
/tmp/base_5349_grammar.rkt
Writing [{ 
"name": "base_5349" , 
"semantics": [ "()"] , 
"input_shapes": [[1,8], [1,8], [1,8]], 
"output_shape": [1 , 8], 
"input_precision": [1, 32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_8", "SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5349_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5349_spec.JSON /tmp/base_5349_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5349 ... 

Grammar:
#<procedure:base_5349>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) #(struct:reg (bv #x2 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x76 8) (bv #x3d3f0a952f26d4c57779190a5524943bd04ebab628334029fb7ba159ddb9cc34 256) (bv #x63455a2d95bc3dca6cd755850c2c1a7b7ae3709036c96511fd65b937f5c10a6c 256))
(vec-if (buffer #<procedure:buffer-fn> 'uint1 8) (buffer #<procedure:buffer-fn> 'int32 256) (buffer #<procedure:buffer-fn> 'int32 256))
Spec result
(bv #x3d3f0a952f26d4c57779190a5524943bd04ebab628334029fb7ba159ddb9cc34 256)
invoke-spec-lane with env: #((bv #x76 8) (bv #x3d3f0a952f26d4c57779190a5524943bd04ebab628334029fb7ba159ddb9cc34 256) (bv #x63455a2d95bc3dca6cd755850c2c1a7b7ae3709036c96511fd65b937f5c10a6c 256))
Concrete counter examples:
(#((bv #x76 8) (bv #x3d3f0a952f26d4c57779190a5524943bd04ebab628334029fb7ba159ddb9cc34 256) (bv #x63455a2d95bc3dca6cd755850c2c1a7b7ae3709036c96511fd65b937f5c10a6c 256)) #((bv #x94 8) (bv #x5c0881ff4432279db039c7376e2d99abf22c7d85871b99aaa8ec7cf19a102897 256) (bv #x2b2c8c86dd3b2e88fc72135607ad3cfa3da0e059ca7b7152f0069276e89cdfee 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x76 8) (bv #x3d3f0a952f26d4c57779190a5524943bd04ebab628334029fb7ba159ddb9cc34 256) (bv #x63455a2d95bc3dca6cd755850c2c1a7b7ae3709036c96511fd65b937f5c10a6c 256))
Spec Produced:
(bv #xddb9cc34 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x94 8) (bv #x5c0881ff4432279db039c7376e2d99abf22c7d85871b99aaa8ec7cf19a102897 256) (bv #x2b2c8c86dd3b2e88fc72135607ad3cfa3da0e059ca7b7152f0069276e89cdfee 256))
Spec Produced:
(bv #x9a102897 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$72 sym_bv$73 sym_bv$74)

invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
invoke-spec-lane with env: #(sym_bv$72 sym_bv$73 sym_bv$74)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256))
#(#t #(struct:reg (bv #x1 4)) 0)
Synthesis step completed!
Solution
(reg (bv #x1 4))
(reg (bv #x1 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint1 1))
=======================================rm: cannot remove '/tmp/base_849_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
==================================================
Grammar Number of Load DSL Clauses:	 4
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 0

(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Hashed expression
(x8 '(buf uint1 1))
Leaves are bitvectors of sizes:
(1)
get-expr-grammar with base_name: base_849

base_849_grammar.rkt
/tmp/base_849_grammar.rkt
Writing [{ 
"name": "base_849" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 8], 
"input_precision": [1], 
"output_precision": 1, 
"args": ["SYMBOLIC_BV_1"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_849_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_849_spec.JSON /tmp/base_849_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_849 ... 

Grammar:
#<procedure:base_849>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 2, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x55 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x55 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$75)

invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
invoke-spec-lane with env: #(sym_bv$75)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$76)

invoke-spec with env: #(sym_bv$76)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$76 sym_bv$76) sym_bv$76) sym_bv$76) sym_bv$76) sym_bv$76) sym_bv$76) sym_bv$76)
Verification took 0 seconds

(model
 [sym_bv$76 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x55 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xff 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #xff 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$77)

invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
invoke-spec-lane with env: #(sym_bv$77)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$78)

invoke-spec with env: #(sym_bv$78)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$78 sym_bv$78) sym_bv$78) sym_bv$78) sym_bv$78) sym_bv$78) sym_bv$78) sym_bv$78)
Verification took 0 seconds

(model
 [sym_bv$78 (bv #b0 1)])
Verification failed :(
#((bv #b0 1))
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
(bv #x00 8)
Verification failed ...
	spec produced: (bv #x00 8) 8 
	synthesized result produced: (bv #xff 8) 8

invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0 1 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 3, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x55 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x55 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$79)

invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
invoke-spec-lane with env: #(sym_bv$79)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$80)

invoke-spec with env: #(sym_bv$80)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$80 sym_bv$80) sym_bv$80) sym_bv$80) sym_bv$80) sym_bv$80) sym_bv$80) sym_bv$80)
Verification took 0 seconds

(model
 [sym_bv$80 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x55 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xff 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #xff 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$81)

invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
invoke-spec-lane with env: #(sym_bv$81)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$82)

invoke-spec with env: #(sym_bv$82)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$82 sym_bv$82) sym_bv$82) sym_bv$82) sym_bv$82) sym_bv$82) sym_bv$82) sym_bv$82)
Verification took 0 seconds

(model
 [sym_bv$82 (bv #b0 1)])
Verification failed :(
#((bv #b0 1))
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
(bv #x00 8)
Verification failed ...
	spec produced: (bv #x00 8) 8 
	synthesized result produced: (bv #xff 8) 8

invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0 1 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 4, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x55 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x55 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$83)

invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
invoke-spec-lane with env: #(sym_bv$83)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$84)

invoke-spec with env: #(sym_bv$84)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$84 sym_bv$84) sym_bv$84) sym_bv$84) sym_bv$84) sym_bv$84) sym_bv$84) sym_bv$84)
Verification took 0 seconds

(model
 [sym_bv$84 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x55 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xff 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #xff 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$85)

invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
invoke-spec-lane with env: #(sym_bv$85)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$86)

invoke-spec with env: #(sym_bv$86)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$86 sym_bv$86) sym_bv$86) sym_bv$86) sym_bv$86) sym_bv$86) sym_bv$86) sym_bv$86)
Verification took 0 seconds

(model
 [sym_bv$86 (bv #b0 1)])
Verification failed :(
#((bv #b0 1))
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
(bv #x00 8)
Verification failed ...
	spec produced: (bv #x00 8) 8 
	synthesized result produced: (bv #xff 8) 8

invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0 1 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 5, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x55 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x55 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$87)

invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
invoke-spec-lane with env: #(sym_bv$87)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$88)

invoke-spec with env: #(sym_bv$88)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$88 sym_bv$88) sym_bv$88) sym_bv$88) sym_bv$88) sym_bv$88) sym_bv$88) sym_bv$88)
Verification took 0 seconds

(model
 [sym_bv$88 (bv #b1 1)])
Verification failed :(
#((bv #b1 1))
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
(bv #xff 8)
Verification failed ...
	spec produced: (bv #xff 8) 8 
	synthesized result produced: (bv #x55 8) 8

invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
Difference  Predicate
'((0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xff 8))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #xff 8))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$89)

invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
invoke-spec-lane with env: #(sym_bv$89)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$90)

invoke-spec with env: #(sym_bv$90)
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(concat (concat (concat (concat (concat (concat (concat sym_bv$90 sym_bv$90) sym_bv$90) sym_bv$90) sym_bv$90) sym_bv$90) sym_bv$90) sym_bv$90)
Verification took 0 seconds

(model
 [sym_bv$90 (bv #b0 1)])
Verification failed :(
#((bv #b0 1))
invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
(bv #x00 8)
Verification failed ...
	spec produced: (bv #x00 8) 8 
	synthesized result produced: (bv #xff 8) 8

invoke-spec with env: #((bv #b0 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #x00 8)
Difference  Predicate
'((1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #b1 1))
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Spec result
(bv #xff 8)
invoke-spec-lane with env: #((bv #b1 1))
Concrete counter examples:
(#((bv #b1 1)) #((bv #b1 1)) #((bv #b1 1)) #((bv #b0 1)))
Failing lanes examples:
(0 0 1 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #b1 1))
Spec Produced:
(bv #b1 1)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #b0 1))
Spec Produced:
(bv #b0 1)
Synthesize by lane...
#f
Is this boolector optimization case #f ?

Synthesizing solution with depth 6, depth-limit 5, and cost-bound 40 ...

Depth Quota exceed, unsynthesizable
Test elapsed time: 
2
(x8 '(buf uint1 1))
#(#f () 0)
Synthesis step completed!
Unsatisfiable
'()
Cost
4
here
(#(struct:buffer #<procedurerm: cannot remove '/tmp/base_5279_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
rm: cannot remove '/tmp/base_5401_spec.JSON': No such file or directory
:buffer-fn> uint1 1))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint1 1)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint1 1)
Sub-expression Synthesis completed:
(reg (bv #x0a 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0a 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint1 1))
Sub-expression Synthesis completed:
()
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5279

base_5279_grammar.rkt
/tmp/base_5279_grammar.rkt
Writing [{ 
"name": "base_5279" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_5279_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5279_spec.JSON /tmp/base_5279_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_5279 ... 

Grammar:
#<procedure:base_5279>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000001 32) #t))
Spec result
(bv #x0000000100000001000000010000000100000001000000010000000100000001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000001 32) #t))
#(#t #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
()
=======================================
(x8 (int-imm (bv #x00000000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00000000 32) #t))
Hashed expression
(x8 (int-imm (bv #x00000000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5401

base_5401_grammar.rkt
/tmp/base_5401_grammar.rkt
Writing [{ 
"name": "base_5401" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 32]] 
}
] to file /tmp/base_5401_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5401_spec.JSON /tmp/base_5401_grammar.rkt 8 0EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

Generated Grammar File
Dynamically importing from base_5401 ... 

Grammar:
#<procedure:base_5401>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00000000 32) #t))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00000000 32) #t))
#(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00000000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(() #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-if
 (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
 (x8 (int-imm (bv #x00000001 32) #t))
 (x8 (int-imm (bv #x00000000 32) #t)))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
========================================
here
(#(struct:int32x8 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> uint32 32)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'uint32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'uint32 256))
Hashed expression
(vec-shr '(buf int32 256) '(buf uint32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 256
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32)
Cost
16
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(int32x8 '(buf int64 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t))) #(struct:x8 #(struct:int-imm (bv #xffffffff80000000 64) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-max '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f))) #(struct:x8 #(struct:int-imm (bv #x000000007fffffff 64) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-min '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:x8 #(struct:int-imm (bv #x000000000000001e 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))) #(struct:vec-shr #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x0b 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0b 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x0b 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x0b 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x0c 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0c 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x0b 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x0b 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x0d 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0d 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x0d 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x0d 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x0e 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0e 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x0d 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x0d 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x0d 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x0b 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
   128
   16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(int64x8
 (vec-mul
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x0d 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x0b 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
    128
    16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32
 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8
  (vec-mul
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x0d 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
     128
     16)
    128
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x0b 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
     128
     16)
    128
    16
    32)
   256
   32
   0
   64)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-mul
  (int64x8
   (vec-mul
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x0d 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
      128
      16)
     128
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x0b 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
      128
      16)
     128
     16
     32)
    256
    32
    0
    64)
   256
   32
   64)
  512
  64
  0
  128)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (int64x8
    (vec-mul
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #f)))
 (vec-shr
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x0d 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
       128
       16)
      128
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x0b 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
       128
       16)
      128
      16
      32)
     256
     32
     0
     64)
    256
    32
    64)
   512
   64
   0
   128)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 512
 64)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'uint64 512))
Hashed expression
(vec-shr '(buf int64 512) '(buf uint64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (reg (bv #x1 4))
 (lit (bv #xffffffffffffffff 64))
 (reg (bv #x0 4))
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))) #(struct:vec-bwand #(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-add '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64)
Cost
4
here
(#(struct:vec-mul #(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:int64x8 #(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))) #(struct:int64x8 #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-mul '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
(_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128)
Cost
8
here
(#(struct:vec-mul #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x8 #(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 256)
 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(vec-mul '(buf int32 256) '(buf int32 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x0f 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0f 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x0f 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x0f 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x10 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x10 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x0f 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x0f 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
here
(#(struct:vec-add #(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int32x8 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(int32x8 '(buf int16 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32)
Cost
4
here
(#(struct:vec-mul #(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t))) #(struct:x8 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-add '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16)
Cost
4
here
(#(struct:int16x8 #(struct:buffer #<procedure:buffer-fn> uint8 64)) #(struct:x8 #(struct:int-imm (bv #x0040 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 128)
 (buffer #<procedure:buffer-fn> 'int16 128))
Hashed expression
(vec-mul '(buf int16 128) '(buf int16 128))
Leaves are bitvectors of sizes:
(128 128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Hashed expression
(int16x8 '(buf uint8 64))
Leaves are bitvectors of sizes:
(64)
Equivalent expression synthesized before, returned stored solution
Solution
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
(interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint8 64))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 64)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 64)
Sub-expression Synthesis completed:
(reg (bv #x11 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x11 8)))
========================================
Original Halide Sub-Expression:
(int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
Sub-expression Synthesis completed:
(interleave-vectors_dsl
 (lit (bv #x0000000000000000 64))
 (reg (bv #x11 8))
 64
 8)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0040 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0040 16) #t))
Hashed expression
(x8 (int-imm (bv #x0040 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x00400040004000400040004000400040 128))
(lit (bv #x00400040004000400040004000400040 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0040 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00400040004000400040004000400040 128))
========================================
Synthesized-leaves
(#(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
 (x8 (int-imm (bv #x0040 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (interleave-vectors_dsl
  (lit (bv #x0000000000000000 64))
  (reg (bv #x11 8))
  64
  8)
 (lit (bv #x00400040004000400040004000400040 128))
 128
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x12 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x12 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
  (x8 (int-imm (bv #x0040 16) #t)))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (interleave-vectors_dsl
   (lit (bv #x0000000000000000 64))
   (reg (bv #x11 8))
   64
   8)
  (lit (bv #x00400040004000400040004000400040 128))
  128
  16
  0
  32)
 (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
 128
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-add
  (vec-mul
   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
   (x8 (int-imm (bv #x0040 16) #t)))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (interleave-vectors_dsl
    (lit (bv #x0000000000000000 64))
    (reg (bv #x11 8))
    64
    8)
   (lit (bv #x00400040004000400040004000400040 128))
   128
   16
   0
   32)
  (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
  128
  16)
 128
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x8
  (vec-add
   (vec-mul
    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
    (x8 (int-imm (bv #x0040 16) #t)))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x11 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
   128
   16)
  128
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (interleave-vectors_dsl
     (lit (bv #x0000000000000000 64))
     (reg (bv #x0f 8))
     64
     8)
    (lit (bv #x00400040004000400040004000400040 128))
    128
    16
    0
    32)
   (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
   128
   16)
  128
  16
  32)
 256
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64))
========================================
Original Halide Sub-Expression:
(int64x8
 (vec-mul
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x8
   (vec-add
    (vec-mul
     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
     (x8 (int-imm (bv #x0040 16) #t)))
    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x11 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
    128
    16)
   128
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (interleave-vectors_dsl
      (lit (bv #x0000000000000000 64))
      (reg (bv #x0f 8))
      64
      8)
     (lit (bv #x00400040004000400040004000400040 128))
     128
     16
     0
     32)
    (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
    128
    16)
   128
   16
   32)
  256
  32
  0
  64)
 256
 32
 64)
========================================
here
(#(struct:x8 #(struct:buffer #<procedure:buffer-fn> int32 32)))
=======================================
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(int64x8 (buffer #<procedure:buffer-fn> 'int32 256))
Hashed expression
(int64x8 '(buf int32 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Hashed expression
(x8 '(buf int32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int32 32)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32))
========================================
Original Halide Sub-Expression:
(int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
 256
 32
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int64x8
  (vec-mul
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x8
    (vec-add
     (vec-mul
      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
      (x8 (int-imm (bv #x0040 16) #t)))
     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
  256
  32
  64)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x11 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
     128
     16)
    128
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_mulhi_pi16_dsl
      (interleave-vectors_dsl
       (lit (bv #x0000000000000000 64))
       (reg (bv #x0f 8))
       64
       8)
      (lit (bv #x00400040004000400040004000400040 128))
      128
      16
      0
      32)
     (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
     128
     16)
    128
    16
    32)
   256
   32
   0
   64)
  256
  32
  64)
 512
 64
 0
 128)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (int64x8
   (vec-mul
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x8
     (vec-add
      (vec-mul
       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
       (x8 (int-imm (bv #x0040 16) #t)))
      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
   256
   32
   64)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x11 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
      128
      16)
     128
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_mulhi_pi16_dsl
       (interleave-vectors_dsl
        (lit (bv #x0000000000000000 64))
        (reg (bv #x0f 8))
        64
        8)
       (lit (bv #x00400040004000400040004000400040 128))
       128
       16
       0
       32)
      (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
      128
      16)
     128
     16
     32)
    256
    32
    0
    64)
   256
   32
   64)
  512
  64
  0
  128)
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 32)
========================================
here
(#(struct:x8 #(struct:int-imm (bv #x000000003fffffff 64) #t)) #(struct:x8 #(struct:int-imm (bv #x0000000000000001 64) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int64 512)
 (buffer #<procedure:buffer-fn> 'int64 512))
Hashed expression
(vec-bwand '(buf int64 512) '(buf int64 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
()
=======================================
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
(lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000003fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x8 (int-imm (bv #x000000003fffffff 64) #t))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (int64x8
    (vec-mul
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x8
      (vec-add
       (vec-mul
        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
        (x8 (int-imm (bv #x0040 16) #t)))
       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (vec-bwand
  (x8 (int-imm (bv #x000000003fffffff 64) #t))
  (x8 (int-imm (bv #x0000000000000001 64) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (lit
   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  32)
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
    256
    32
    64)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x11 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
       128
       16)
      128
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_mulhi_pi16_dsl
        (interleave-vectors_dsl
         (lit (bv #x0000000000000000 64))
         (reg (bv #x0f 8))
         64
         8)
        (lit (bv #x00400040004000400040004000400040 128))
        128
        16
        0
        32)
       (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
       128
       16)
      128
      16
      32)
     256
     32
     0
     64)
    256
    32
    64)
   512
   64
   0
   128)
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  512
  32)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #t))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (int64x8
     (vec-mul
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (vec-bwand
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #t))))
 (x8 (int-imm (bv #x0000000000000001 64) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   32)
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_mulhi_pi16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x11 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
        128
        16)
       128
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x0f 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
        128
        16)
       128
       16
       32)
      256
      32
      0
      64)
     256
     32
     64)
    512
    64
    0
    128)
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   512
   32)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000000000000001 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Hashed expression
(x8 (int-imm (bv #x0000000000000001 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
Cost
5
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000000000000001 64) #f))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (int64x8
      (vec-mul
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (vec-bwand
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #t))))
  (x8 (int-imm (bv #x0000000000000001 64) #t)))
 (x8 (int-imm (bv #x0000000000000001 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    32)
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_mulhi_pi16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x11 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
         128
         16)
        128
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x0f 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
         128
         16)
        128
        16
        32)
       256
       32
       0
       64)
      256
      32
      64)
     512
     64
     0
     128)
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    512
    32)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (int64x8
     (vec-mul
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x8
       (vec-add
        (vec-mul
         (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
         (x8 (int-imm (bv #x0040 16) #t)))
        (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
    (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
   (x8 (int-imm (bv #x0000000000000001 64) #f)))
  (vec-shr
   (x8 (int-imm (bv #x000000003fffffff 64) #t))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (int64x8
       (vec-mul
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (vec-bwand
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #t))))
   (x8 (int-imm (bv #x0000000000000001 64) #t)))
  (x8 (int-imm (bv #x0000000000000001 64) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     32)
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_mulhi_pi16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x11 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
          128
          16)
         128
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x0f 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
          128
          16)
         128
         16
         32)
        256
        32
        0
        64)
       256
       32
       64)
      512
      64
      0
      128)
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     512
     32)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (lit
    (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
     256
     32
     64)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_mulhi_pi16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x0d 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
        128
        16)
       128
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_mulhi_pi16_dsl
         (interleave-vectors_dsl
          (lit (bv #x0000000000000000 64))
          (reg (bv #x0b 8))
          64
          8)
         (lit (bv #x00400040004000400040004000400040 128))
         128
         16
         0
         32)
        (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
        128
        16)
       128
       16
       32)
      256
      32
      0
      64)
     256
     32
     64)
    512
    64
    0
    128)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  512
  64)
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000000000001e 64) #f))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Hashed expression
(x8 (int-imm (bv #x000000000000001e 64) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
(lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000000000001e 64) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (int64x8
      (vec-mul
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x8
        (vec-add
         (vec-mul
          (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
          (x8 (int-imm (bv #x0040 16) #t)))
         (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
     (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
    (x8 (int-imm (bv #x0000000000000001 64) #f)))
   (vec-shr
    (x8 (int-imm (bv #x000000003fffffff 64) #t))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (int64x8
        (vec-mul
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (vec-bwand
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #t))))
    (x8 (int-imm (bv #x0000000000000001 64) #t)))
   (x8 (int-imm (bv #x0000000000000001 64) #f))))
 (x8 (int-imm (bv #x000000000000001e 64) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0000000000000040 64))
 (lit
  (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
 (lit (bv #xffffffffffffffff 64))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      32)
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_mulhi_pi16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x11 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
           128
           16)
          128
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x0f 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
           128
           16)
          128
          16
          32)
         256
         32
         0
         64)
        256
        32
        64)
       512
       64
       0
       128)
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      512
      32)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (lit
     (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
      256
      32
      64)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_mulhi_pi16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x0d 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
         128
         16)
        128
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_mulhi_pi16_dsl
          (interleave-vectors_dsl
           (lit (bv #x0000000000000000 64))
           (reg (bv #x0b 8))
           64
           8)
          (lit (bv #x00400040004000400040004000400040 128))
          128
          16
          0
          32)
         (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
         128
         16)
        128
        16
        32)
       256
       32
       0
       64)
      256
      32
      64)
     512
     64
     0
     128)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   512
   64)
  512
  64)
 (lit (bv #x0000000000000000 64))
 512
 64
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Hashed expression
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
(lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x000000007fffffff 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (int64x8
       (vec-mul
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x8
         (vec-add
          (vec-mul
           (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
           (x8 (int-imm (bv #x0040 16) #t)))
          (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
      (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
     (x8 (int-imm (bv #x0000000000000001 64) #f)))
    (vec-shr
     (x8 (int-imm (bv #x000000003fffffff 64) #t))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (int64x8
         (vec-mul
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (vec-bwand
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #t))))
     (x8 (int-imm (bv #x0000000000000001 64) #t)))
    (x8 (int-imm (bv #x0000000000000001 64) #f))))
  (x8 (int-imm (bv #x000000000000001e 64) #f)))
 (x8 (int-imm (bv #x000000007fffffff 64) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0000000000000040 64))
  (lit
   (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
  (lit (bv #xffffffffffffffff 64))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       32)
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_mulhi_pi16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x11 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
            128
            16)
           128
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x0f 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
            128
            16)
           128
           16
           32)
          256
          32
          0
          64)
         256
         32
         64)
        512
        64
        0
        128)
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       512
       32)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (lit
      (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
       256
       32
       64)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_mulhi_pi16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x0d 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
          128
          16)
         128
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_mulhi_pi16_dsl
           (interleave-vectors_dsl
            (lit (bv #x0000000000000000 64))
            (reg (bv #x0b 8))
            64
            8)
           (lit (bv #x00400040004000400040004000400040 128))
           128
           16
           0
           32)
          (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
          128
          16)
         128
         16
         32)
        256
        32
        0
        64)
       256
       32
       64)
      512
      64
      0
      128)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    512
    64)
   512
   64)
  (lit (bv #x0000000000000000 64))
  512
  64
  64)
 (lit
  (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
 512
 64)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Hashed expression
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
(lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffffffff80000000 64) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (int64x8
        (vec-mul
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x8
          (vec-add
           (vec-mul
            (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
            (x8 (int-imm (bv #x0040 16) #t)))
           (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
       (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
      (x8 (int-imm (bv #x0000000000000001 64) #f)))
     (vec-shr
      (x8 (int-imm (bv #x000000003fffffff 64) #t))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (int64x8
          (vec-mul
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (vec-bwand
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #t))))
      (x8 (int-imm (bv #x0000000000000001 64) #t)))
     (x8 (int-imm (bv #x0000000000000001 64) #f))))
   (x8 (int-imm (bv #x000000000000001e 64) #f)))
  (x8 (int-imm (bv #x000000007fffffff 64) #t)))
 (x8 (int-imm (bv #xffffffff80000000 64) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x0000000000000040 64))
   (lit
    (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
   (lit (bv #xffffffffffffffff 64))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        32)
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_mulhi_pi16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x11 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
             128
             16)
            128
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x0f 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
             128
             16)
            128
            16
            32)
           256
           32
           0
           64)
          256
          32
          64)
         512
         64
         0
         128)
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        512
        32)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (lit
       (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
        256
        32
        64)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_mulhi_pi16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x0d 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
           128
           16)
          128
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_mulhi_pi16_dsl
            (interleave-vectors_dsl
             (lit (bv #x0000000000000000 64))
             (reg (bv #x0b 8))
             64
             8)
            (lit (bv #x00400040004000400040004000400040 128))
            128
            16
            0
            32)
           (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
           128
           16)
          128
          16
          32)
         256
         32
         0
         64)
        256
        32
        64)
       512
       64
       0
       128)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     512
     64)
    512
    64)
   (lit (bv #x0000000000000000 64))
   512
   64
   64)
  (lit
   (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
  512
  64)
 (lit
  (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
 512
 64)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64))
========================================
Original Halide Sub-Expression:
(int32x8
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (int64x8
         (vec-mul
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x8
           (vec-add
            (vec-mul
             (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
             (x8 (int-imm (bv #x0040 16) #t)))
            (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
        (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
       (x8 (int-imm (bv #x0000000000000001 64) #f)))
      (vec-shr
       (x8 (int-imm (bv #x000000003fffffff 64) #t))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (int64x8
           (vec-mul
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (vec-bwand
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #t))))
       (x8 (int-imm (bv #x0000000000000001 64) #t)))
      (x8 (int-imm (bv #x0000000000000001 64) #f))))
    (x8 (int-imm (bv #x000000000000001e 64) #f)))
   (x8 (int-imm (bv #x000000007fffffff 64) #t)))
  (x8 (int-imm (bv #xffffffff80000000 64) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x0000000000000040 64))
    (lit
     (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
    (lit (bv #xffffffffffffffff 64))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         32)
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_mulhi_pi16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x11 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
              128
              16)
             128
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x0f 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
              128
              16)
             128
             16
             32)
            256
            32
            0
            64)
           256
           32
           64)
          512
          64
          0
          128)
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         512
         32)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (lit
        (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
         256
         32
         64)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_mulhi_pi16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x0d 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
            128
            16)
           128
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_mulhi_pi16_dsl
             (interleave-vectors_dsl
              (lit (bv #x0000000000000000 64))
              (reg (bv #x0b 8))
              64
              8)
             (lit (bv #x00400040004000400040004000400040 128))
             128
             16
             0
             32)
            (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
            128
            16)
           128
           16
           32)
          256
          32
          0
          64)
         256
         32
         64)
        512
        64
        0
        128)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      512
      64)
     512
     64)
    (lit (bv #x0000000000000000 64))
    512
    64
    64)
   (lit
    (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
   512
   64)
  (lit
   (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
  512
  64)
 256
 32
 64
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint32 32))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Hashed expression
(x8 '(buf uint32 32))
Leaves are bitvectors of sizes:
(32)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint32 32))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint32 32)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint32 32)
Sub-expression Synthesis completed:
(reg (bv #x13 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x13 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'uint32 32))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32))
========================================
Original Halide Sub-Expression:
(vec-shr
 (int32x8
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (int64x8
          (vec-mul
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x8
            (vec-add
             (vec-mul
              (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
              (x8 (int-imm (bv #x0040 16) #t)))
             (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
         (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
        (x8 (int-imm (bv #x0000000000000001 64) #f)))
       (vec-shr
        (x8 (int-imm (bv #x000000003fffffff 64) #t))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (int64x8
            (vec-mul
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (vec-bwand
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #t))))
        (x8 (int-imm (bv #x0000000000000001 64) #t)))
       (x8 (int-imm (bv #x0000000000000001 64) #f))))
     (x8 (int-imm (bv #x000000000000001e 64) #f)))
    (x8 (int-imm (bv #x000000007fffffff 64) #t)))
   (x8 (int-imm (bv #xffffffff80000000 64) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
 (lit (bv #xffffffff 32))
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x0000000000000040 64))
     (lit
      (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
     (lit (bv #xffffffffffffffff 64))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          32)
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_mulhi_pi16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x11 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
               128
               16)
              128
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x0f 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
               128
               16)
              128
              16
              32)
             256
             32
             0
             64)
            256
            32
            64)
           512
           64
           0
           128)
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          512
          32)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (lit
         (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
          256
          32
          64)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_mulhi_pi16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x0d 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
             128
             16)
            128
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_mulhi_pi16_dsl
              (interleave-vectors_dsl
               (lit (bv #x0000000000000000 64))
               (reg (bv #x0b 8))
               64
               8)
              (lit (bv #x00400040004000400040004000400040 128))
              128
              16
              0
              32)
             (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
             128
             16)
            128
            16
            32)
           256
           32
           0
           64)
          256
          32
          64)
         512
         64
         0
         128)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       512
       64)
      512
      64)
     (lit (bv #x0000000000000000 64))
     512
     64
     64)
    (lit
     (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
    512
    64)
   (lit
    (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
   512
   64)
  256
  32
  64
  0)
 (lit (bv #x00000000 32))
 256
 32
 32)
========================================
Synthesized-leaves
(#(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-if
  (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
  (x8 (int-imm (bv #x00000001 32) #t))
  (x8 (int-imm (bv #x00000000 32) #t)))
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8
           (vec-mul
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8
             (vec-mul
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'uint32 32))))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_mulhi_pi16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x11 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                128
                16)
               128
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x0f 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                128
                16)
               128
               16
               32)
              256
              32
              0
              64)
             256
             32
             64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_mulhi_pi16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x0d 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
              128
              16)
             128
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x0b 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
              128
              16)
             128
             16
             32)
            256
            32
            0
            64)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 256
 256)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (int32x8
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (int64x8
           (vec-mul
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x8
             (vec-add
              (vec-mul
               (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
               (x8 (int-imm (bv #x0040 16) #t)))
              (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
          (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
         (x8 (int-imm (bv #x0000000000000001 64) #f)))
        (vec-shr
         (x8 (int-imm (bv #x000000003fffffff 64) #t))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (int64x8
             (vec-mul
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (vec-bwand
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #t))))
         (x8 (int-imm (bv #x0000000000000001 64) #t)))
        (x8 (int-imm (bv #x0000000000000001 64) #f))))
      (x8 (int-imm (bv #x000000000000001e 64) #f)))
     (x8 (int-imm (bv #x000000007fffffff 64) #t)))
    (x8 (int-imm (bv #xffffffff80000000 64) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
 (vec-bwand
  (vec-if
   (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
   (x8 (int-imm (bv #x00000001 32) #t))
   (x8 (int-imm (bv #x00000000 32) #t)))
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8
            (vec-mul
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8
              (vec-mul
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
  (lit (bv #xffffffff 32))
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x0000000000000040 64))
      (lit
       (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
      (lit (bv #xffffffffffffffff 64))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           32)
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_mulhi_pi16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x07 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                128
                16)
               128
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x05 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                128
                16)
               128
               16
               32)
              256
              32
              0
              64)
             256
             32
             64)
            512
            64
            0
            128)
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           512
           32)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (lit
          (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
           256
           32
           64)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_mulhi_pi16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x02 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
              128
              16)
             128
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_mulhi_pi16_dsl
               (interleave-vectors_dsl
                (lit (bv #x0000000000000000 64))
                (reg (bv #x00 8))
                64
                8)
               (lit (bv #x00400040004000400040004000400040 128))
               128
               16
               0
               32)
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
              128
              16)
             128
             16
             32)
            256
            32
            0
            64)
           256
           32
           64)
          512
          64
          0
          128)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        512
        64)
       512
       64)
      (lit (bv #x0000000000000000 64))
      512
      64
      64)
     (lit
      (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
     512
     64)
    (lit
     (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
    512
    64)
   256
   32
   64
   0)
  (lit (bv #x00000000 32))
  256
  32
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_mulhi_pi16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x11 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x0f 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               256
               32
               0
               64)
              256
              32
              64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
        rm: cannot remove '/tmp/base_2482_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7
  (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_mulhi_pi16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x0d 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
               128
               16)
              128
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x0b 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
               128
               16)
              128
              16
              32)
             256
             32
             0
             64)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  256
  256)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x8 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_2482

base_2482_grammar.rkt
/tmp/base_2482_grammar.rkt
Writing [{ 
"name": "base_2482" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[32767, 32]] 
}
] to file /tmp/base_2482_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2482_spec.JSON /tmp/base_2482_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_2482 ... 

Grammar:
#<procedure:base_2482>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00007fff 32) #t))
Spec result
(bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x00007fff 32) #t))
#(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-add
  (vec-shr
   (int32x8
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-mul
           (int64x8
            (vec-mul
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x8
              (vec-add
               (vec-mul
                (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                (x8 (int-imm (bv #x0040 16) #t)))
               (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
           (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
          (x8 (int-imm (bv #x0000000000000001 64) #f)))
         (vec-shr
          (x8 (int-imm (bv #x000000003fffffff 64) #t))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-mul
             (int64x8
              (vec-mul
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (vec-bwand
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #t))))
          (x8 (int-imm (bv #x0000000000000001 64) #t)))
         (x8 (int-imm (bv #x0000000000000001 64) #f))))
       (x8 (int-imm (bv #x000000000000001e 64) #f)))
      (x8 (int-imm (bv #x000000007fffffff 64) #t)))
     (x8 (int-imm (bv #xffffffff80000000 64) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
  (vec-bwand
   (vec-if
    (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
    (x8 (int-imm (bv #x00000001 32) #t))
    (x8 (int-imm (bv #x00000000 32) #t)))
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8
             (vec-mul
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8
               (vec-mul
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
 (x8 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
   (lit (bv #xffffffff 32))
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x0000000000000040 64))
       (lit
        (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
       (lit (bv #xffffffffffffffff 64))
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            32)
           (_mm256_and_si256_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_mulhi_pi16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x07 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x05 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               256
               32
               0
               64)
              256
              32
              64)
             512
             64
             0
             128)
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            512
            32)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (lit
           (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
            256
            32
            64)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_mulhi_pi16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x02 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
               128
               16)
              128
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_mulhi_pi16_dsl
                (interleave-vectors_dsl
                 (lit (bv #x0000000000000000 64))
                 (reg (bv #x00 8))
                 64
                 8)
                (lit (bv #x00400040004000400040004000400040 128))
                128
                16
                0
                32)
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
               128
               16)
              128
              16
              32)
             256
             32
             0
             64)
            256
            32
            64)
           512
           64
           0
           128)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         512
         64)
        512
        64)
       (lit (bv #x0000000000000000 64))
       512
       64
       64)
      (lit
       (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
      512
      64)
     (lit
      (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
     512
     64)
    256
    32
    64
    0)
   (lit (bv #x00000000 32))
   256
   32
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_mulhi_pi16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x11 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x0f 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                256
                32
                0
                64)
               256
               32
               64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dslrm: cannot remove '/tmp/base_8037_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 7

             (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_mulhi_pi16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x0d 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                128
                16)
               128
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x0b 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                128
                16)
               128
               16
               32)
              256
              32
              0
              64)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   256
   256)
  256
  32)
 256
 32)
========================================
here
()
=======================================
(x8 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x8 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8037

base_8037_grammar.rkt
/tmp/base_8037_grammar.rkt
Writing [{ 
"name": "base_8037" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[-32768, 32]] 
}
] to file /tmp/base_8037_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8037_spec.JSON /tmp/base_8037_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_8037 ... 

Grammar:
#<procedure:base_8037>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #xffff8000 32) #t))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #xffff8000 32) #t))
#(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (int32x8
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-mul
            (int64x8
             (vec-mul
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x8
               (vec-add
                (vec-mul
                 (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                 (x8 (int-imm (bv #x0040 16) #t)))
                (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
            (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
           (x8 (int-imm (bv #x0000000000000001 64) #f)))
          (vec-shr
           (x8 (int-imm (bv #x000000003fffffff 64) #t))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-mul
              (int64x8
               (vec-mul
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (vec-bwand
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #t))))
           (x8 (int-imm (bv #x0000000000000001 64) #t)))
          (x8 (int-imm (bv #x0000000000000001 64) #f))))
        (x8 (int-imm (bv #x000000000000001e 64) #f)))
       (x8 (int-imm (bv #x000000007fffffff 64) #t)))
      (x8 (int-imm (bv #xffffffff80000000 64) #t))))
    (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
   (vec-bwand
    (vec-if
     (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
     (x8 (int-imm (bv #x00000001 32) #t))
     (x8 (int-imm (bv #x00000000 32) #t)))
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8
              (vec-mul
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8
                (vec-mul
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
  (x8 (int-imm (bv #x00007fff 32) #t)))
 (x8 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
    (lit (bv #xffffffff 32))
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x0000000000000040 64))
        (lit
         (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
        (lit (bv #xffffffffffffffff 64))
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             32)
            (_mm256_and_si256_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_mulhi_pi16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x07 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x05 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                256
                32
                0
                64)
               256
               32
               64)
              512
              64
              0
              128)
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             512
             32)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (lit
            (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
             256
             32
             64)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_mulhi_pi16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x02 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
                128
                16)
               128
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_mulhi_pi16_dsl
                 (interleave-vectors_dsl
                  (lit (bv #x0000000000000000 64))
                  (reg (bv #x00 8))
                  64
                  8)
                 (lit (bv #x00400040004000400040004000400040 128))
                 128
                 16
                 0
                 32)
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
                128
                16)
               128
               16
               32)
              256
              32
              0
              64)
             256
             32
             64)
            512
            64
            0
            128)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          512
          64)
         512
         64)
        (lit (bv #x0000000000000000 64))
        512
        64
        64)
       (lit
        (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
       512
       64)
      (lit
       (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
      512
      64)
     256
     32
     64
     0)
    (lit (bv #x00000000 32))
    256
    32
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_mulhi_pi16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x11 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x0f 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 256
                 32
                 0
                 64)
                256
                32
                64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_mulhi_pi16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x0d 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x0b 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               256
               32
               0
               64)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    256
    256)
   256
   32)
  256
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
 256
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32))
========================================
Original Halide Sub-Expression:
(int16x8
 (vec-max
  (vec-min
   (vec-add
    (vec-shr
     (int32x8
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-mul
             (int64x8
              (vec-mul
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x8
                (vec-add
                 (vec-mul
                  (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                  (x8 (int-imm (bv #x0040 16) #t)))
                 (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
             (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
            (x8 (int-imm (bv #x0000000000000001 64) #f)))
           (vec-shr
            (x8 (int-imm (bv #x000000003fffffff 64) #t))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-mul
               (int64x8
                (vec-mul
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (vec-bwand
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #t))))
            (x8 (int-imm (bv #x0000000000000001 64) #t)))
           (x8 (int-imm (bv #x0000000000000001 64) #f))))
         (x8 (int-imm (bv #x000000000000001e 64) #f)))
        (x8 (int-imm (bv #x000000007fffffff 64) #t)))
       (x8 (int-imm (bv #xffffffff80000000 64) #t))))
     (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
    (vec-bwand
     (vec-if
      (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
      (x8 (int-imm (bv #x00000001 32) #t))
      (x8 (int-imm (bv #x00000000 32) #t)))
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8
               (vec-mul
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8
                 (vec-mul
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
   (x8 (int-imm (bv #x00007fff 32) #t)))
  (x8 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
     (lit (bv #xffffffff 32))
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x0000000000000040 64))
         (lit
          (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
         (lit (bv #xffffffffffffffff 64))
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              32)
             (_mm256_and_si256_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_mulhi_pi16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x07 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x05 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 256
                 32
                 0
                 64)
                256
                32
                64)
               512
               64
               0
               128)
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              512
              32)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (lit
             (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
              256
              32
              64)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_mulhi_pi16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x02 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_mulhi_pi16_dsl
                  (interleave-vectors_dsl
                   (lit (bv #x0000000000000000 64))
                   (reg (bv #x00 8))
                   64
                   8)
                  (lit (bv #x00400040004000400040004000400040 128))
                  128
                  16
                  0
                  32)
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
                 128
                 16)
                128
                16
                32)
               256
               32
               0
               64)
              256
              32
              64)
             512
             64
             0
             128)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           512
           64)
          512
          64)
         (lit (bv #x0000000000000000 64))
         512
         64
         64)
        (lit
         (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
        512
        64)
       (lit
        (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
       512
       64)
      256
      32
      64
      0)
     (lit (bv #x00000000 32))
     256
     32
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_mulhi_pi16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x11 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x0f 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  256
                  32
                  0
                  64)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_mulhi_pi16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x0d 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x0b 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                256
                32
                0
                64)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     256
     256)
    256
    32)
   256
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
  256
  32)
 128
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x8 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x14 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x14 8)))
========================================
Original Halide Sub-Expression:
(x8 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x14 8)) 128 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x14 8)) 128 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x8
  (vec-max
   (vec-min
    (vec-add
     (vec-shr
      (int32x8
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-mul
              (int64x8
               (vec-mul
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x8
                 (vec-add
                  (vec-mul
                   (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                   (x8 (int-imm (bv #x0040 16) #t)))
                  (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
              (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
             (x8 (int-imm (bv #x0000000000000001 64) #f)))
            (vec-shr
             (x8 (int-imm (bv #x000000003fffffff 64) #t))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-mul
                (int64x8
                 (vec-mul
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (vec-bwand
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #t))))
             (x8 (int-imm (bv #x0000000000000001 64) #t)))
            (x8 (int-imm (bv #x0000000000000001 64) #f))))
          (x8 (int-imm (bv #x000000000000001e 64) #f)))
         (x8 (int-imm (bv #x000000007fffffff 64) #t)))
        (x8 (int-imm (bv #xffffffff80000000 64) #t))))
      (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
     (vec-bwand
      (vec-if
       (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
       (x8 (int-imm (bv #x00000001 32) #t))
       (x8 (int-imm (bv #x00000000 32) #t)))
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8
                (vec-mul
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8
                  (vec-mul
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
    (x8 (int-imm (bv #x00007fff 32) #t)))
   (x8 (int-imm (bv #xffff8000 32) #t))))
 (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_set1_pi8_dsl (reg (bv #x14 8)) 128 16)
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
      (lit (bv #xffffffff 32))
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x0000000000000040 64))
          (lit
           (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
          (lit (bv #xffffffffffffffff 64))
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               32)
              (_mm256_and_si256_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_mulhi_pi16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x07 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x05 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  256
                  32
                  0
                  64)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               512
               32)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (lit
              (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
               256
               32
               64)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_mulhi_pi16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x02 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_mulhi_pi16_dsl
                   (interleave-vectors_dsl
                    (lit (bv #x0000000000000000 64))
                    (reg (bv #x00 8))
                    64
                    8)
                   (lit (bv #x00400040004000400040004000400040 128))
                   128
                   16
                   0
                   32)
                  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
                  128
                  16)
                 128
                 16
                 32)
                256
                32
                0
                64)
               256
               32
               64)
              512
              64
              0
              128)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            512
            64)
           512
           64)
          (lit (bv #x0000000000000000 64))
          512
          64
          64)
         (lit
          (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
         512
         64)
        (lit
         (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
        512
        64)
       256
       32
       64
       0)
      (lit (bv #x00000000 32))
      256
      32
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_mulhi_pi16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x11 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x0f 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   256
                   32
                   0
                   64)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_mulhi_pi16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     rm: cannot remove '/tmp/base_7131_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20
(reg (bv #x0d 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x0b 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 256
                 32
                 0
                 64)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      256
      256)
     256
     32)
    256
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
   256
   32)
  128
  16
  32
  0)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x8 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_7131

base_7131_grammar.rkt
/tmp/base_7131_grammar.rkt
Writing [{ 
"name": "base_7131" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_7131_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7131_spec.JSON /tmp/base_7131_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_7131 ... 

Grammar:
#<procedure:base_7131>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x00ff 16) #t))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x8 (int-imm (bv #x00ff 16) #t))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x14 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) 128 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x8
   (vec-max
    (vec-min
     (vec-add
      (vec-shr
       (int32x8
        (vec-max
         (vec-min
          (vec-shr
           (vec-add
            (vec-add
             (vec-shr
              (vec-mul
               (int64x8
                (vec-mul
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x8
                  (vec-add
                   (vec-mul
                    (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                    (x8 (int-imm (bv #x0040 16) #t)))
                   (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
               (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
              (x8 (int-imm (bv #x0000000000000001 64) #f)))
             (vec-shr
              (x8 (int-imm (bv #x000000003fffffff 64) #t))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (vec-shr
             (vec-add
              (vec-add
               (vec-bwand
                (vec-mul
                 (int64x8
                  (vec-mul
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (vec-bwand
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #t))))
              (x8 (int-imm (bv #x0000000000000001 64) #t)))
             (x8 (int-imm (bv #x0000000000000001 64) #f))))
           (x8 (int-imm (bv #x000000000000001e 64) #f)))
          (x8 (int-imm (bv #x000000007fffffff 64) #t)))
         (x8 (int-imm (bv #xffffffff80000000 64) #t))))
       (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
      (vec-bwand
       (vec-if
        (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
        (x8 (int-imm (bv #x00000001 32) #t))
        (x8 (int-imm (bv #x00000000 32) #t)))
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8
                 (vec-mul
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8
                   (vec-mul
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
     (x8 (int-imm (bv #x00007fff 32) #t)))
    (x8 (int-imm (bv #xffff8000 32) #t))))
  (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x8 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
 (_m_paddsb_dsl
  (_mm_set1_pi8_dsl (reg (bv #x14 8)) 128 16)
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
       (lit (bv #xffffffff 32))
       (_mm_cvtepi64_epi32_dsl
        (_mm512_max_epi16_dsl
         (_mm256_min_epi16_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x0000000000000040 64))
           (lit
            (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
           (lit (bv #xffffffffffffffff 64))
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (_mm256_add_epi8_dsl
               (_mm256_and_si256_dsl
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                32)
               (_mm256_and_si256_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_mulhi_pi16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x07 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x05 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   256
                   32
                   0
                   64)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                512
                32)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (lit
               (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                256
                32
                64)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_mulhi_pi16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x02 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_mulhi_pi16_dsl
                    (interleave-vectors_dsl
                     (lit (bv #x0000000000000000 64))
                     (reg (bv #x00 8))
                     64
                     8)
                    (lit (bv #x00400040004000400040004000400040 128))
                    128
                    16
                    0
                    32)
                   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
                   128
                   16)
                  128
                  16
                  32)
                 256
                 32
                 0
                 64)
                256
                32
                64)
               512
               64
               0
               128)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             512
             64)
            512
            64)
           (lit (bv #x0000000000000000 64))
           512
           64
           64)
          (lit
           (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
          512
          64)
         (lit
          (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
         512
         64)
        256
        32
        64
        0)
       (lit (bv #x00000000 32))
       256
       32
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_mulhi_pi16_dsl
                    (_mm256_cvtepi8_epi32_dsl
                     (_mm256_add_epi8_dsl
                      (_mm_mulhi_pi16_dsl
                       (interleave-vectors_dsl
                        (lit (bv #x0000000000000000 64))
                        (reg (bv #x11 8))
                        64
                        8)
                       (lit (bv #x00400040004000400040004000400040 128))
                       128
                       16
                       0
                       32)
                      (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                      128
                      16)
                     128
                     16
                     32)
                    (_mm256_cvtepi8_epi32_dsl
                     (_mm256_add_epi8_dsl
                      (_mm_mulhi_pi16_dsl
                       (interleave-vectors_dsl
                        (lit (bv #x0000000000000000 64))
                        (reg (bv #x0f 8))
                        64
                        8)
                       (lit (bv #x00400040004000400040004000400040 128))
                       128
                       16
                       0
                       32)
                      (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                      128
                      16)
                     128
                     16
                     32)
                    256
                    32
                    0
                    64)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_mulhi_pi16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x0d 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x0b 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  256
                  32
                  0
                  64)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000rm: cannot remove '/tmp/base_9471_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm256_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm256_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi64_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 20
 64))
            512
            64
            64)
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       256
       256)
      256
      32)
     256
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
    256
    32)
   128
   16
   32
   0)
  128
  16)
 128
 16)
========================================
here
()
=======================================
(x8 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 8

Synthesizing sub-expression
(x8 (int-imm (bv #x0000 16) #t))
Hashed expression
(x8 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9471

base_9471_grammar.rkt
/tmp/base_9471_grammar.rkt
Writing [{ 
"name": "base_9471" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 8], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 16]] 
}
] to file /tmp/base_9471_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9471_spec.JSON /tmp/base_9471_grammar.rkt 8 0
Generated Grammar File
Dynamically importing from base_9471 ... 

Grammar:
#<procedure:base_9471>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x8 (int-imm (bv #x0000 16) #t))
Spec result
(bv #x00000000000000000000000000000000 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000000000000000000000000000000 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x00000000000000000000000000000000 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x8 (int-imm (bv #x0000 16) #t))
#(#t #(struct:lit (bv #x00000000000000000000000000000000 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x00000000000000000000000000000000 128))
(lit (bv #x00000000000000000000000000000000 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x8 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit (bv #x00000000000000000000000000000000 128))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) #(struct:_m_paddsb_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x14 8)) 128 16) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x08 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x06 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x13 8)) 256 32) #(struct:lit (bv #xffffffff 32)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x12 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x10 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) 512 32) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0000000000000040 64)) #(struct:_mm_set1_pi8_dsl #(struct:lit (bv #x0000000000000001 64)) 512 64) #(struct:lit (bv #xffffffffffffffff 64)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 32) 256 32 64) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0e 8)) 128 16) 128 16) 128 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) #(struct:lit (bv #x00400040004000400040004000400040 128)) 128 16 0 32) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 16) 128 16) 128 16 32) 256 32 0 64) 256 32 64) 512 64 0 128) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 512 64) #(struct:lit (bv #x0000000000000000 64)) 512 64 64) #(struct:lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 512 64) #(struct:lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 512 64) 256 32 64 0) #(struct:lit (bv #x00000000 32)) 256 32 32) 256 256) 256 32) 256 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 256 32) 128 16 32 0) 128 16) 128 16) #(struct:lit (bv #x00000000000000000000000000000000 128)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8
                 (vec-mul
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8
                   (vec-mul
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8
                  (vec-mul
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                  (vec-mul
                   (int64x8
                    (vec-mul
                     (int32x8
                      (vec-add
                       (vec-mul
                        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                        (x8 (int-imm (bv #x0040 16) #t)))
                       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                     (int32x8
                      (vec-add
                       (vec-mul
                        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                        (x8 (int-imm (bv #x0040 16) #t)))
                       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128))
  (_m_paddsb_dsl
   (_mm_set1_pi8_dsl (reg (bv #x14 8)) 128 16)
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256))
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 32)
        (lit (bv #xffffffff 32))
        (_mm_cvtepi64_epi32_dsl
         (_mm512_max_epi16_dsl
          (_mm256_min_epi16_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x0000000000000040 64))
            (lit
             (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
            (lit (bv #xffffffffffffffff 64))
            (_mm256_add_epi8_dsl
             (_mm512_srav_epi64_dsl
              (lit (bv #x0000000000000040 64))
              (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
              (lit (bv #xffffffffffffffff 64))
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (_mm256_add_epi8_dsl
                (_mm256_and_si256_dsl
                 (lit
                  (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 32)
                (_mm256_and_si256_dsl
                 (_mm_mulhi_epu16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                   256
                   32
                   64)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm_mulhi_pi16_dsl
                    (_mm256_cvtepi8_epi32_dsl
                     (_mm256_add_epi8_dsl
                      (_mm_mulhi_pi16_dsl
                       (interleave-vectors_dsl
                        (lit (bv #x0000000000000000 64))
                        (reg (bv #x07 8))
                        64
                        8)
                       (lit (bv #x00400040004000400040004000400040 128))
                       128
                       16
                       0
                       32)
                      (_mm_set1_pi8_dsl (reg (bv #x08 8)) 128 16)
                      128
                      16)
                     128
                     16
                     32)
                    (_mm256_cvtepi8_epi32_dsl
                     (_mm256_add_epi8_dsl
                      (_mm_mulhi_pi16_dsl
                       (interleave-vectors_dsl
                        (lit (bv #x0000000000000000 64))
                        (reg (bv #x05 8))
                        64
                        8)
                       (lit (bv #x00400040004000400040004000400040 128))
                       128
                       16
                       0
                       32)
                      (_mm_set1_pi8_dsl (reg (bv #x06 8)) 128 16)
                      128
                      16)
                     128
                     16
                     32)
                    256
                    32
                    0
                    64)
                   256
                   32
                   64)
                  512
                  64
                  0
                  128)
                 (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                 512
                 32)
                512
                64)
               512
               64)
              (lit (bv #x0000000000000000 64))
              512
              64
              64)
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (lit
                (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                 256
                 32
                 64)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_mulhi_pi16_dsl
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x02 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  (_mm256_cvtepi8_epi32_dsl
                   (_mm256_add_epi8_dsl
                    (_mm_mulhi_pi16_dsl
                     (interleave-vectors_dsl
                      (lit (bv #x0000000000000000 64))
                      (reg (bv #x00 8))
                      64
                      8)
                     (lit (bv #x00400040004000400040004000400040 128))
                     128
                     16
                     0
                     32)
                    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 128 16)
                    128
                    16)
                   128
                   16
                   32)
                  256
                  32
                  0
                  64)
                 256
                 32
                 64)
                512
                64
                0
                128)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              512
              64)
             512
             64)
            (lit (bv #x0000000000000000 64))
            512
            64
            64)
           (lit
            (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
           512
           64)
          (lit
           (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
          512
          64)
         256
         32
         64
         0)
        (lit (bv #x00000000 32))
        256
        32
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (_mm_set1_pi8_dsl (reg (bv #x13 8)) 256 32)
         (lit (bv #xffffffff 32))
         (_mm_cvtepi64_epi32_dsl
          (_mm512_max_epi16_dsl
           (_mm256_min_epi16_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x0000000000000040 64))
             (lit
              (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512))
             (lit (bv #xffffffffffffffff 64))
             (_mm256_add_epi8_dsl
              (_mm512_srav_epi64_dsl
               (lit (bv #x0000000000000040 64))
               (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
               (lit (bv #xffffffffffffffff 64))
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (_mm256_add_epi8_dsl
                 (_mm256_and_si256_dsl
                  (lit
                   (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  32)
                 (_mm256_and_si256_dsl
                  (_mm_mulhi_epu16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                    256
                    32
                    64)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm_mulhi_pi16_dsl
                     (_mm256_cvtepi8_epi32_dsl
                      (_mm256_add_epi8_dsl
                       (_mm_mulhi_pi16_dsl
                        (interleave-vectors_dsl
                         (lit (bv #x0000000000000000 64))
                         (reg (bv #x11 8))
                         64
                         8)
                        (lit (bv #x00400040004000400040004000400040 128))
                        128
                        16
                        0
                        32)
                       (_mm_set1_pi8_dsl (reg (bv #x12 8)) 128 16)
                       128
                       16)
                      128
                      16
                      32)
                     (_mm256_cvtepi8_epi32_dsl
                      (_mm256_add_epi8_dsl
                       (_mm_mulhi_pi16_dsl
                        (interleave-vectors_dsl
                         (lit (bv #x0000000000000000 64))
                         (reg (bv #x0f 8))
                         64
                         8)
                        (lit (bv #x00400040004000400040004000400040 128))
                        128
                        16
                        0
                        32)
                       (_mm_set1_pi8_dsl (reg (bv #x10 8)) 128 16)
                       128
                       16)
                      128
                      16
                      32)
                     256
                     32
                     0
                     64)
                    256
                    32
                    64)
                   512
                   64
                   0
                   128)
                  (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                  512
                  32)
                 512
                 64)
                512
                64)
               (lit (bv #x0000000000000000 64))
               512
               64
               64)
              (_mm256_add_epi8_dsl
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (lit
                 (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512))
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               (_mm512_srav_epi64_dsl
                (lit (bv #x0000000000000040 64))
                (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64)
                (lit (bv #xffffffffffffffff 64))
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 32)
                  256
                  32
                  64)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_mulhi_pi16_dsl
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x0d 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x0e 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   (_mm256_cvtepi8_epi32_dsl
                    (_mm256_add_epi8_dsl
                     (_mm_mulhi_pi16_dsl
                      (interleave-vectors_dsl
                       (lit (bv #x0000000000000000 64))
                       (reg (bv #x0b 8))
                       64
                       8)
                      (lit (bv #x00400040004000400040004000400040 128))
                      128
                      16
                      0
                      32)
                     (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 16)
                     128
                     16)
                    128
                    16
                    32)
                   256
                   32
                   0
                   64)
                  256
                  32
                  64)
                 512
                 64
                 0
                 128)
                (lit (bv #x0000000000000000 64))
                512
                64
                64)
               512
               64)
              512
              64)
             (lit (bv #x0000000000000000 64))
             512
             64
             64)
            (lit
             (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512))
            512
            64)
           (lit
            (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512))
           512
           64)
          256
          32
          64
          0)
         (lit (bv #x00000000 32))
         256
         32
         32)
        256
        256)
       256
       32)
      256
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256))
     256
     32)
    128
    16
    32
    0)
   128
   16)
  128
  16)
 (lit (bv #x00000000000000000000000000000000 128))
 128
 16)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x8
    (vec-max
     (vec-min
      (vec-add
       (vec-shr
        (int32x8
         (vec-max
          (vec-min
           (vec-shr
            (vec-add
             (vec-add
              (vec-shr
               (vec-mul
                (int64x8
                 (vec-mul
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                  (int32x8
                   (vec-add
                    (vec-mul
                     (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                     (x8 (int-imm (bv #x0040 16) #t)))
                    (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
               (x8 (int-imm (bv #x0000000000000001 64) #f)))
              (vec-shr
               (x8 (int-imm (bv #x000000003fffffff 64) #t))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (vec-shr
              (vec-add
               (vec-add
                (vec-bwand
                 (vec-mul
                  (int64x8
                   (vec-mul
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                    (int32x8
                     (vec-add
                      (vec-mul
                       (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                       (x8 (int-imm (bv #x0040 16) #t)))
                      (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                  (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                 (x8 (int-imm (bv #x0000000000000001 64) #t)))
                (vec-bwand
                 (x8 (int-imm (bv #x000000003fffffff 64) #t))
                 (x8 (int-imm (bv #x0000000000000001 64) #t))))
               (x8 (int-imm (bv #x0000000000000001 64) #t)))
              (x8 (int-imm (bv #x0000000000000001 64) #f))))
            (x8 (int-imm (bv #x000000000000001e 64) #f)))
           (x8 (int-imm (bv #x000000007fffffff 64) #t)))
          (x8 (int-imm (bv #xffffffff80000000 64) #t))))
        (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))
       (vec-bwand
        (vec-if
         (x8 (buffer #<procedure:buffer-fn> 'uint1 1))
         (x8 (int-imm (bv #x00000001 32) #t))
         (x8 (int-imm (bv #x00000000 32) #t)))
        (vec-shr
         (int32x8
          (vec-max
           (vec-min
            (vec-shr
             (vec-add
              (vec-add
               (vec-shr
                (vec-mul
                 (int64x8
                  (vec-mul
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                   (int32x8
                    (vec-add
                     (vec-mul
                      (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                      (x8 (int-imm (bv #x0040 16) #t)))
                     (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                 (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                (x8 (int-imm (bv #x0000000000000001 64) #f)))
               (vec-shr
                (x8 (int-imm (bv #x000000003fffffff 64) #t))
                (x8 (int-imm (bv #x0000000000000001 64) #f))))
              (vec-shr
               (vec-add
                (vec-add
                 (vec-bwand
                Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
  (vec-mul
                   (int64x8
                    (vec-mul
                     (int32x8
                      (vec-add
                       (vec-mul
                        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                        (x8 (int-imm (bv #x0040 16) #t)))
                       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))
                     (int32x8
                      (vec-add
                       (vec-mul
                        (int16x8 (buffer #<procedure:buffer-fn> 'uint8 64))
                        (x8 (int-imm (bv #x0040 16) #t)))
                       (x8 (buffer #<procedure:buffer-fn> 'int16 16))))))
                   (int64x8 (x8 (buffer #<procedure:buffer-fn> 'int32 32))))
                  (x8 (int-imm (bv #x0000000000000001 64) #t)))
                 (vec-bwand
                  (x8 (int-imm (bv #x000000003fffffff 64) #t))
                  (x8 (int-imm (bv #x0000000000000001 64) #t))))
                (x8 (int-imm (bv #x0000000000000001 64) #t)))
               (x8 (int-imm (bv #x0000000000000001 64) #f))))
             (x8 (int-imm (bv #x000000000000001e 64) #f)))
            (x8 (int-imm (bv #x000000007fffffff 64) #t)))
           (x8 (int-imm (bv #xffffffff80000000 64) #t))))
         (x8 (buffer #<procedure:buffer-fn> 'uint32 32)))))
      (x8 (int-imm (bv #x00007fff 32) #t)))
     (x8 (int-imm (bv #xffff8000 32) #t))))
   (x8 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x8 (int-imm (bv #x00ff 16) #t)))
 (x8 (int-imm (bv #x0000 16) #t)))
Synthesis completed:
Legalize Expression Swizzle!
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x07 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_226

base_226_grammar.rkt
/tmp/base_226_grammar.rkt
Writing [{ 
"name": "base_226" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_226_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_226_spec.JSON /tmp/base_226_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_226 ... 

Synthesizing solution with depth 2, depth-limit 3, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke_ref for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) 

spec produced: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

invoke_ref_lane for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) 

spec produced: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

invoke ref result: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

Concrete counter examples:
(#((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) #((bv #xd07ff0cbca03cbae 64) (bv #xdc93e6f3a6b32d7c 64)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) 

spec produced: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

invoke ref result: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

Spec Produced:
(bv #xb5 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xfc022e139c152c90 64) (bv #x9bed8827254069b5 64)) 

spec produced: (bv #xfc9b02ed2e8813279c2515402c6990b5 128)

Lane Index
0
invoke_ref_lane for swizzles on input #((bv #xd07ff0cbca03cbae 64) (bv #xdc93e6f3a6b32d7c 64)) with lane idx 0

invoke_ref for swizzles on input #((bv #xd07ff0cbca03cbae 64) (bv #xdc93e6f3a6b32d7c 64)) 

spec produced: (bv #xd0dc7f93f0e6cbf3caa603b3cb2dae7c 128)

invoke ref result: (bv #xd0dc7f93f0e6cbf3caa603b3cb2dae7c 128)

Spec Produced:rm: cannot remove '/tmp/base_2913_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_7679_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_9793_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_1887_spec.JSON': No such file or directory

(bv #x7c 8)
Synthesize by entire vector size...
invoke_ref for swizzles on input #((bv #xd07ff0cbca03cbae 64) (bv #xdc93e6f3a6b32d7c 64)) 

spec produced: (bv #xd0dc7f93f0e6cbf3caa603b3cb2dae7c 128)

Z3 Synthesized Solution
(_mm_unpacklo_epi32_dsl (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64) (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64) 64 8 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_unpacklo_epi32_dsl
 (_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
 (_mm_movepi64_pi64_dsl (reg (bv #x0 4)) 64 64 64)
 64
 8
 8)
Is concrete? #t

Is solution a union? #f

Attempting to verify synthesized solution
Symbols: #(sym_bv$91 sym_bv$92)

invoke_ref for swizzles on input #(sym_bv$91 sym_bv$92) 

spec produced: (concat (concat (concat (concat (concat (concat (concat (concat (extract 63 56 sym_bv$91) (extract 63 56 sym_bv$92)) (concat (extract 55 48 sym_bv$91) (extract 55 48 sym_bv$92))) (concat (extract 47 40 sym_bv$91) (extract 47 40 sym_bv$92))) (concat (extract 39 32 ...) ...)) ...) ...) ...) ...)

Verification took 0 seconds

(unsat)
lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x05 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_2913

base_2913_grammar.rkt
/tmp/base_2913_grammar.rkt
Writing [{ 
"name": "base_2913" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2913_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2913_spec.JSON /tmp/base_2913_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_2913 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x02 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_7679

base_7679_grammar.rkt
/tmp/base_7679_grammar.rkt
Writing [{ 
"name": "base_7679" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7679_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7679_spec.JSON /tmp/base_7679_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_7679 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x00 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_9793

base_9793_grammar.rkt
/tmp/base_9793_grammar.rkt
Writing [{ 
"name": "base_9793" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9793_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9793_spec.JSON /tmp/base_9793_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_9793 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x11 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_1887

base_1887_grammar.rkt
/tmp/base_1887_grammar.rkt
Writing [{ 
"name": "base_1887" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1887_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1887_spec.JSON /tmp/base_1887_grammar.rkt 16 1Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_1970_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_6624_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14
rm: cannot remove '/tmp/base_6598_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 64
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 14
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_cvtsi64_si128 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_movpi64_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_set1_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_set1_epi64x with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpackhi_epi8 with score: 3 belonging to target agnostic class _mm_unpackhi_epi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 14
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 14

Generated Grammar File
Dynamically importing from base_1887 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0f 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_1970

base_1970_grammar.rkt
/tmp/base_1970_grammar.rkt
Writing [{ 
"name": "base_1970" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1970_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1970_spec.JSON /tmp/base_1970_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_1970 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0d 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_6624

base_6624_grammar.rkt
/tmp/base_6624_grammar.rkt
Writing [{ 
"name": "base_6624" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6624_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6624_spec.JSON /tmp/base_6624_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_6624 ... 

lower-swizzle on expression: #(struct:interleave-vectors_dsl #(struct:lit (bv #x0000000000000000 64)) #(struct:reg (bv #x0b 8)) 64 8) 

get-swizzle-expr-grammar with base_name: base_6598

base_6598_grammar.rkt
/tmp/base_6598_grammar.rkt
Writing [{ 
"name": "base_6598" , 
"semantics": [ "(list extract concat)"] , 
"input_shapes": [[1,8],[1,8]], 
"output_shape": [1,16], 
"input_precision": [8,8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_64", "SYMBOLIC_BV_64"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6598_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6598_spec.JSON /tmp/base_6598_grammar.rkt 16 1
Generated Grammar File
Dynamically importing from base_6598 ... 

(hash
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x0e 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x11 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x0f 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x0b 8)
 (buffer #<procedure:buffer-fn> 'uint32 32)
 (bv #x13 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x12 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x0d 8)
 (buffer #<procedure:buffer-fn> 'uint1 1)
 (bv #x0a 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 64)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x10 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x0c 8)
 (buffer #<procedure:buffer-fn> 'int32 32)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint32 32)
 (bv #x09 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x14 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x08 8))
========================================
; (reg (bv #x0e 8)) <1 x i16>
; (reg (bv #x11 8)) <8 x i8>
; (reg (bv #x0f 8)) <8 x i8>
; (reg (bv #x0b 8)) <8 x i8>
; (reg (bv #x13 8)) <1 x i32>
; (reg (bv #x12 8)) <1 x i16>
; (reg (bv #x0d 8)) <8 x i8>
; (reg (bv #x0a 8)) <1 x i1>
; (reg (bv #x02 8)) <8 x i8>
; (reg (bv #x05 8)) <8 x i8>
; (reg (bv #x00 8)) <8 x i8>
; (reg (bv #x07 8)) <8 x i8>
; (reg (bv #x06 8)) <1 x i16>
; (reg (bv #x10 8)) <1 x i16>
; (reg (bv #x01 8)) <1 x i16>
; (reg (bv #x0c 8)) <1 x i16>
; (reg (bv #x04 8)) <1 x i32>
; (reg (bv #x09 8)) <1 x i32>
; (reg (bv #x14 8)) <1 x i16>
; (reg (bv #x03 8)) <1 x i16>
; (reg (bv #x08 8)) <1 x i16>

(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 20)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 9)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 7)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 5)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 6)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 2)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 0)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 1)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 19)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 17)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 18)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 15)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 16)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 13)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 14)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 11)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

Writing [; hydride.node.0
; (reg 14) <1 x i16>
; (reg 17) <8 x i8>
; (reg 15) <8 x i8>
; (reg 11) <8 x i8>
; (reg 19) <1 x i32>
; (reg 18) <1 x i16>
; (reg 13) <8 x i8>
; (reg 10) <1 x i1>
; (reg 2) <8 x i8>
; (reg 5) <8 x i8>
; (reg 0) <8 x i8>
; (reg 7) <8 x i8>
; (reg 6) <1 x i16>
; (reg 16) <1 x i16>
; (reg 1) <1 x i16>
; (reg 12) <1 x i16>
; (reg 4) <1 x i32>
; (reg 9) <1 x i32>
; (reg 20) <1 x i16>
; (reg 3) <1 x i16>
; (reg 8) <1 x i16>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 20)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 9)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 7)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 5)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 6)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 2)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 0)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 1)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 19)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 17)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 18)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 15)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 16)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 13)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 14)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 11)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 14) <1 x i16>
; (reg 17) <8 x i8>
; (reg 15) <8 x i8>
; (reg 11) <8 x i8>
; (reg 19) <1 x i32>
; (reg 18) <1 x i16>
; (reg 13) <8 x i8>
; (reg 10) <1 x i1>
; (reg 2) <8 x i8>
; (reg 5) <8 x i8>
; (reg 0) <8 x i8>
; (reg 7) <8 x i8>
; (reg 6) <1 x i16>
; (reg 16) <1 x i16>
; (reg 1) <1 x i16>
; (reg 12) <1 x i16>
; (reg 4) <1 x i32>
; (reg 9) <1 x i32>
; (reg 20) <1 x i16>
; (reg 3) <1 x i16>
; (reg 8) <1 x i16>


(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) ; <8 x i16>
  
(_m_paddsb_dsl 
(_mm_set1_pi8_dsl 
(reg 20)  128  16  );<8 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) ; <8 x i32>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 9)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 7)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 8)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 5)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 6)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 2)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 3)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 0)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 1)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  
(_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) ; <1 x i256>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  
(_mm_set1_pi8_dsl 
(reg 19)  256  32  );<8 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 17)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 18)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 15)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 16)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  
(_mm256_add_epi8_dsl (lit (bv #x000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff000000001fffffff 512)) ; <8 x i64>
  
(_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) ; <1 x i64>
  (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) ; <8 x i64>
  (lit (bv #xffffffffffffffff 64)) ; <1 x i64>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  32  );<8 x i32>
  256  32  64  );<8 x i64>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_mulhi_pi16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 13)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 14)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl 
(_mm_unpacklo_epi32_dsl 
(_mm_movepi64_pi64_dsl 
(reg 11)  64  64  64  );<2 x i64>
  
(_mm_movepi64_pi64_dsl (lit (bv #x0000000000000000 64)) ; <1 x i64>
  64  64  64  );<2 x i64>
  64  8  8  );<16 x i8>
  (lit (bv #x00400040004000400040004000400040 128)) ; <8 x i16>
  128  16  0  32  );<8 x i16>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  16  );<8 x i16>
  128  16  );<8 x i16>
  128  16  32  );<8 x i32>
  256  32  0  64  );<8 x i32>
  256  32  64  );<8 x i64>
  512  64  0  128  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  512  64  );<8 x i64>
  512  64  );<8 x i64>
  (lit (bv #x0000000000000000 64)) ; <1 x i64>
  512  64  64  );<8 x i64>
  (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) ; <8 x i64>
  512  64  );<8 x i64>
  (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) ; <8 x i64>
  512  64  );<8 x i64>
  256  32  64  0  );<8 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  256  32  32  );<8 x i32>
  256  256  );<1 x i256>
  256  32  );<8 x i32>
  256  32  );<8 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) ; <8 x i32>
  256  32  );<8 x i32>
  128  16  32  0  );<8 x i16>
  128  16  );<8 x i16>
  128  16  );<8 x i16>
  (lit (bv #x00000000000000000000000000000000 128)) ; <8 x i16>
  128  16  );<8 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(x8 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x00000000000000000000000000000000 128)) 0)
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x8 '(buf uint1 1)) '#(#f () 0)
(x8 '(buf uint32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 1)
(vec-mul '(buf int32 256) '(buf int32 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32 0 64) 3)
(vec-max '(buf int32 256) '(buf int32 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(vec-min '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 0)
(vec-add '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-bwand '(buf int32 256) '(buf int32 256)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 0)
(vec-shr '(buf int64 512) '(buf uint64 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 1)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 1)
(x8 (int-imm (bv #x0040 16) #t)) (vector #t (lit (bv #x00400040004000400040004000400040 128)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 1)
(vec-max '(buf int16 128) '(buf int16 128)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 0)
(vec-min '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-sat-add '(buf int16 128) '(buf int16 128)) (vector #t (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16) 1)
(vec-add '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 1)
(vec-mul '(buf int16 128) '(buf int16 128)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16 0 32) 1)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 0)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(vec-shr '(buf int32 256) '(buf uint32 256)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 1)
(vec-mul '(buf int64 512) '(buf int64 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 1)
(vec-add '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 0)
(vec-min '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 1)
(vec-max '(buf int64 512) '(buf int64 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 0)
(vec-bwand '(buf int64 512) '(buf int64 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 1)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-if '(buf uint1 8) '(buf int32 256) '(buf int32 256)) (vector #t (reg (bv #x1 4)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
483647)), x8((int64)-2147483648))), x8((uint32)t91))), x8(32767)), x8(-32768))), x8((int16)t92)), x8((int16)255)), x8((int16)0))
Cast operation into: int16x8
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int32x8
Cast operation into: int16x8
t67 maps to reg_1
Cast operation into: int32x8
Cast operation into: int16x8
t70 maps to reg_3
Cast operation into: int64x8
output_multiplier maps to reg_4
Cast operation into: int64x8
Cast operation into: int32x8
Cast operation into: int16x8
t73 maps to reg_6
Cast operation into: int32x8
Cast operation into: int16x8
t76 maps to reg_8
Cast operation into: int64x8
t9 maps to reg_9
t78 maps to reg_10
Cast operation into: int32x8
Cast operation into: int64x8
Cast operation into: int32x8
Cast operation into: int16x8
t80 maps to reg_12
Cast operation into: int32x8
Cast operation into: int16x8
t83 maps to reg_14
Cast operation into: int64x8
Cast operation into: int64x8
Cast operation into: int32x8
Cast operation into: int16x8
t86 maps to reg_16
Cast operation into: int32x8
Cast operation into: int16x8
t89 maps to reg_18
Cast operation into: int64x8
t91 maps to reg_19
t92 maps to reg_20
Synthesis completed with return code:	0
Synthesis took 102.831268seconds ...
Expression after replacae abstraction: max(min((int16x8)saturating_add(int16x8(max(min((int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9)) + (int32x8)bitwise_and(select((uint32)0 < (uint32)t9, x8(1), x8(0)), (int32x8)shift_right(int32x8(max(min((int64x8)shift_right(((int64x8)shift_right(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((uint64)1)) + (int64x8)shift_right(x8((int64)1073741823), x8((uint64)1))) + (int64x8)shift_right(((int64x8)bitwise_and(int64x8((int32x8(((int16x8((uint8x8)input1[ramp(t15 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input1_zero)*(int16)-64)))*int32x8(((int16x8((uint8x8)input2[ramp(t16 + t4, 1, 8)])*x8((int16)64)) + x8(int16((uint8)input2_zero)*(int16)-64)))))*int64x8(x8(output_multiplier)), x8((int64)1)) + (int64x8)bitwise_and(x8((int64)1073741823), x8((int64)1))) + x8((int64)1), x8((uint64)1)), x8((uint64)30)), x8((int64)2147483647)), x8((int64)-2147483648))), x8((uint32)t9 - (uint32)1))), x8(32767)), x8(-32768))), x8(int16((uint8)output_zero))), x8((int16)255)), x8((int16)0))
Generating Call with type: int16x8 and lanes 8
Ending synthesis for expr: 0

Optimized expression: (int16x8)hydride.node.0((uint8x8)input1[ramp(t15 + t4, 1, 8)], int16((uint8)input1_zero)*(int16)-64, (uint8x8)input2[ramp(t16 + t4, 1, 8)], int16((uint8)input2_zero)*(int16)-64, output_multiplier, (uint8x8)input1[ramp(t15 + t4, 1, 8)], int16((uint8)input1_zero)*(int16)-64, (uint8x8)input2[ramp(t16 + t4, 1, 8)], int16((uint8)input2_zero)*(int16)-64, (uint32)t9, (uint32)0 < (uint32)t9, (uint8x8)input1[ramp(t15 + t4, 1, 8)], int16((uint8)input1_zero)*(int16)-64, (uint8x8)input2[ramp(t16 + t4, 1, 8)], int16((uint8)input2_zero)*(int16)-64, (uint8x8)input1[ramp(t15 + t4, 1, 8)], int16((uint8)input1_zero)*(int16)-64, (uint8x8)input2[ramp(t16 + t4, 1, 8)], int16((uint8)input2_zero)*(int16)-64, (uint32)t9 - (uint32)1, int16((uint8)output_zero))
Hydride Function: declare <8 x i16> @hydride.node.0(<8 x i8>, i16, <8 x i8>, i16, i32, <8 x i8>, i16, <8 x i8>, i16, i32, i1, <8 x i8>, i16, <8 x i8>, i16, <8 x i8>, i16, <8 x i8>, i16, i32, i16)

Generating Hydride Call:   %463 = call <8 x i16> @hydride.node.0(<8 x i8> %401, i16 %403, <8 x i8> %409, i16 %411, i32 %output_multiplier12, <8 x i8> %417, i16 %419, <8 x i8> %425, i16 %427, i32 %t917, i1 %428, <8 x i8> %434, i16 %436, <8 x i8> %442, i16 %444, <8 x i8> %450, i16 %452, <8 x i8> %458, i16 %460, i32 %461, i16 %462) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'mul' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
