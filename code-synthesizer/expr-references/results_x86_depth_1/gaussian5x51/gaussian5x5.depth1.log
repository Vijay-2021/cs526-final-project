mkdir gaussian5x5/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g gaussian5x5/src/gaussian5x5_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o gaussian5x5/bin/gaussian5x5_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./gaussian5x5/bin/gaussian5x5_generator \
	-t 0 \
	-o gaussian5x5/bin \
	-g gaussian5x5 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f gaussian5x5 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))*int16x16(x16((int8)6)))
rm: cannot remove '/tmp/base_6974_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6974

base_6974_grammar.rkt
/tmp/base_6974_grammar.rkt
Writing [{ 
"name": "base_6974" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6974_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6974_spec.JSON /tmp/base_6974_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6974 ... 

Grammar:
#<procedure:base_6974>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x910140d9869f225cce2b15161c7cd61a97bad48d0a22a25ae3be1431339c89d0 256) (bv #x6c9103513e4f381fcde03b6ab6cc9bce8e68b565b43cb8be02defcc051a0c1dd 256))
(vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #xfd92442ac4ee5a7b9c0b5080d34871e8262289f2be5e5b18e69c10f1853c4bad 256)
invoke-spec-lane with env: #((bv #x910140d9869f225cce2b15161c7cd61a97bad48d0a22a25ae3be1431339c89d0 256) (bv #x6c9103513e4f381fcde03b6ab6cc9bce8e68b565b43cb8be02defcc051a0c1dd 256))
Concrete counter examples:
(#((bv #x910140d9869f225cce2b15161c7cd61a97bad48d0a22a25ae3be1431339c89d0 256) (bv #x6c9103513e4f381fcde03b6ab6cc9bce8e68b565b43cb8be02defcc051a0c1dd 256)) #((bv #x14748b6af9fceefcf45a189ede4683ffbbf705a43c878eee3a5b8235e1bdd8c8 256) (bv #x8e15e3a081cb2165041aab1e27c65b47ab797ce0a4b31d6d31ee508d29b9ebbb 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x910140d9869f225cce2b15161c7cd61a97bad48d0a22a25ae3be1431339c89d0 256) (bv #x6c9103513e4f381fcde03b6ab6cc9bce8e68b565b43cb8be02defcc051a0c1dd 256))
Spec Produced:
(bv #x4bad 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x14748b6af9fceefcf45a189ede4683ffbbf705a43c878eee3a5b8235e1bdd8c8 256) (bv #x8e15e3a081cb2165041aab1e27c65b47ab797ce0a4b31d6d31ee508d29b9ebbb 256))
Spec Produced:
(bv #xc483 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6930

base_6930_grammar.rkt
/tmp/base_6930_grammar.rkt
Writing [{ 
"name": "base_6930" , 
"semantics": [ "(bvshl sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6930_spec.JSON
rm: cannot remove '/tmp/base_6930_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6930_spec.JSON /tmp/base_6930_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6930 ... 

Grammar:
#<procedure:base_6930>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
Concrete counter examples:
(#((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256)) #((bv #x2bc49182f7bf049e56637cbf09abcbdc1d1f68b9acebc304b0b7a9a59b7bbc73 256) (bv #x6dcd0e60a428e97796e3017439cb3be11fd2c2dafafae2790e3c4348c9a8fc5a 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2bc49182f7bf049e56637cbf09abcbdc1d1f68b9acebc304b0b7a9a59b7bbc73 256) (bv #x6dcd0e60a428e97796e3017439cb3be11fd2c2dafafae2790e3c4348c9a8fc5a 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$4 sym_bv$5)
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvshl (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (bvshl (extract 239 224 sym_bv$4) (extract 239 224 sym_bv$5))) (bvshl (extract 223 208 sym_bv$4) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
Concrete counter examples:
(#((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256)) #((bv #x2bc49182f7bf049e56637cbf09abcbdc1d1f68b9acebc304b0b7a9a59b7bbc73 256) (bv #x6dcd0e60a428e97796e3017439cb3be11fd2c2dafafae2790e3c4348c9a8fc5a 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x73e89cdc70990aacb41e5728e4f1f7fa99938c488f253d1d960387e7e9e724d6 256) (bv #x7cafa77e382a89a9e992cdc0044b8f63e0c5dbd90a10bee36dd808878be333de 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2bc49182f7bf049e56637cbf09abcbdc1d1f68b9acebc304b0b7a9a59b7bbc73 256) (bv #x6dcd0e60a428e97796e3017439cb3be11fd2c2dafafae2790e3c4348c9a8fc5a 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7rm: cannot remove '/tmp/base_1559_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24
)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-shl '(buf int16 256) '(buf uint16 256))
#(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)
Synthesis step completed!
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_1559

base_1559_grammar.rkt
/tmp/base_1559_grammar.rkt
Writing [{ 
"name": "base_1559" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1559_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1559_spec.JSON /tmp/base_1559_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1559 ... 

Grammar:
#<procedure:base_1559>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x04d8934b3a75a275d6e3789f3fbeea06 128))
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x000400d80093004b003a007500a2007500d600e30078009f003f00be00ea0006 256)
invoke-spec-lane with env: #((bv #x04d8934b3a75a275d6e3789f3fbeea06 128))
Concrete counter examples:
(#((bv #x04d8934b3a75a275d6e3789f3fbeea06 128)) #((bv #xd139410ffc3b34cfbec5dc25973ec62b 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x04d8934b3a75a275d6e3789f3fbeea06 128))
Spec Produced:
(bv #x0006 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd139410ffc3b34cfbec5dc25973ec62b 128))
Spec Produced:
(bv #x002b 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8)

invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
invoke-spec-lane with env: #(sym_bv$8)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x16 '(buf uint8 128))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<rm: cannot remove '/tmp/base_5972_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5972

base_5972_grammar.rkt
/tmp/base_5972_grammar.rkt
Writing [{ 
"name": "base_5972" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[2, 16]] 
}
] to file /tmp/base_5972_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5972_spec.JSON /tmp/base_5972_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5972 ... 

Grammar:
#<procedure:base_5972>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0002 16) #f))
Spec result
(bv #x0002000200020002000200020002000200020002000200020002000200020002 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0002 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0002 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0002 16) #f))
#(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_mullo_epi16 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm256_mulhi_epi16 with score: 6 belonging to target agnostic class _mm_mulhi_pi16
Adding:  _mm256_mulhrs_epi16 with score: 6 belonging to target agnostic class _mm_mulhrs_pi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_mulhi_epu16 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_maddubs_epi16 with score: 6 belonging to target agnostic class _mm_maddubs_pi16
Adding:  _mm256_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm256_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 11

Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_2494

base_2494_grammar.rkt
/tmp/base_2494_grammar.rkt
Writing [{ 
"name": "base_2494" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_2494_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2494_spec.JSON /tmp/base_2494_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_2494 ... 

Grammar:
#<procedure:base_2494>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1f0d90b56909097d7eb316f431b12ef928c8dc9c073921171fadc4d47c5bf86a 256) (bv #xcfd8bf197f81b09f1d9d5adabb6722b1b9f66653cda7eb2f7e246a5c0a617be5 256))
(vec-mul (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #xb5f82cad6489d4a3fac753c849378c29b830ae945b2f30399a548430ac7b24d2 256)
invoke-spec-lane with env: #((bv #x1f0d90b56909097d7eb316f431b12ef928c8dc9c073921171fadc4d47c5bf86a 256) (bv #xcfd8bf197f81b09f1d9d5adabb6722b1b9f66653cda7eb2f7e246a5c0a617be5 256))
Concrete counter examples:
(#((bv #x1f0d90b56909097d7eb316f431b12ef928c8dc9c073921171fadc4d47c5bf86a 256) (bv #xcfd8bf197f81b09f1d9d5adabb6722b1b9f66653cda7eb2f7e246a5c0a617be5 256)) #((bv #x2f9d4f6406b71774b835507bf971e04c47343034bc5163ea8a4f404d3d369f8b 256) (bv #xbb50ea4b5b8355c091eb4d4a8152c9bfab16b4923495fb938ce760ca22d0293d 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1f0d90b56909097d7eb316f431b12ef928c8dc9c073921171fadc4d47c5bf86a 256) (bv #xcfd8bf197f81b09f1d9d5adabb6722b1b9f66653cda7eb2f7e246a5c0a617be5 256))
Spec Produced:
(bv #x24d2 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2f9d4f6406b71774b835507bf971e04c47343034bc5163ea8a4f404d3d369f8b 256) (bv #xbb50ea4b5b8355c091eb4d4a8152c9bfab16b4923495fb938ce760ca22d0293d 256))
Spec Produced:
(bv #x471f 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$9 sym_bv$10)

invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_5688_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 3
#(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
invoke-spec-lane with env: #(sym_bv$9 sym_bv$10)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-mul '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)
Synthesis step completed!
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_5688

base_5688_grammar.rkt
/tmp/base_5688_grammar.rkt
Writing [{ 
"name": "base_5688" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5688_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5688_spec.JSON /tmp/base_5688_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5688 ... 

Grammar:
#<procedure:base_5688>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb4710fc8a8d3aabf5bfe017158d7638668587252b6c48267f6e40b1dfcb686da 256))
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xb4710fc8a8d3aabf5bfe017158d7638668587252b6c48267f6e40b1dfcb686da 256)
invoke-spec-lane with env: #((bv #xb4710fc8a8d3aabf5bfe017158d7638668587252b6c48267f6e40b1dfcb686da 256))
Concrete counter examples:
(#((bv #xb4710fc8a8d3aabf5bfe017158d7638668587252b6c48267f6e40b1dfcb686da 256)) #((bv #x79e3c44c002868bf049e237197bdd72447772bc7995f2e4994582ab20bc08820 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb4710fc8a8d3aabf5bfe017158d7638668587252b6c48267f6e40b1dfcb686da 256))
Spec Produced:
(bv #x86da 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x79e3c44c002868bf049e237197bdd72447772bc7995f2e4994582ab20bc08820 256))
Spec Produced:
(bv #x8820 16)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x0 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x0 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11)

invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
invoke-spec-lane with env: #(sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int16x16 '(buf uint16 256))
#(#t #(struct:regrm: cannot remove '/tmp/base_7285_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 18
 (bv #x0 4)) 0)
Synthesis step completed!
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_7285

base_7285_grammar.rkt
/tmp/base_7285_grammar.rkt
Writing [{ 
"name": "base_7285" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7285_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7285_spec.JSON /tmp/base_7285_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7285 ... 

Grammar:
#<procedure:base_7285>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00370020008b001100c70021007900ef0078002000e600b3005e0093003000ae 256)
invoke-spec-lane with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
Concrete counter examples:
(#((bv #x37208b11c72179ef7820e6b35e9330ae 128)) #((bv #xa79bc274efd7c61794006ca393d9305f 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
Spec Produced:
(bv #x00ae 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xa79bc274efd7c61794006ca393d9305f 128))
Spec Produced:
(bv #x005f 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 32 8 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 32 8 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12)

invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$13)

invoke-spec with env: #(sym_bv$13)
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (zero-extend (extract 127 120 sym_bv$13) (bitvector 16)) (zero-extend (extract 119 112 sym_bv$13) (bitvector 16))) (zero-extend (extract 111 104 sym_bv$13) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 1 seconds

(model
 [sym_bv$13 (bv #xffffff00ffffff08ffffff00fff7ff00 128)])
Verification failed :(
#((bv #xffffff00ffffff08ffffff00fff7ff00 128))
invoke-spec with env: #((bv #xffffff00ffffff08ffffff00fff7ff00 128))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00ff00ff00ff000000ff00ff00ff000800ff00ff00ff000000ff00f700ff0000 256)
(bv #x00ff00ff00ff000000ff00ff00ff000800ff00ff00ff000000ff00f700ff0000 256)
Verification failed ...
	spec produced: (bv #x00ff00ff00ff000000ff00ff00ff000800ff00ff00ff000000ff00f700ff0000 256) 256 
	synthesized result produced: (bv #x00000000000000ff00000000000000f700000000000000ff0000000000000000 256) 256

invoke-spec with env: #((bv #xffffff00ffffff08ffffff00fff7ff00 128))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00ff00ff00ff000000ff00ff00ff000800ff00ff00ff000000ff00f700ff0000 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00370020008b001100c70021007900ef0078002000e600b3005e0093003000ae 256)
invoke-spec-lane with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
Concrete counter examples:
(#((bv #x37208b11c72179ef7820e6b35e9330ae 128)) #((bv #xa79bc274efd7c61794006ca393d9305f 128)) #((bv #xffffff00ffffff08ffffff00fff7ff00 128)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x37208b11c72179ef7820e6b35e9330ae 128))
Spec Produced:
(bv #x00ae 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xa79bc274efd7c61794006ca393d9305f 128))
Spec Produced:
(bv #x005f 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #xffffff00ffffff08ffffff00fff7ff00 128))
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$14)

invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
invoke-spec-lane with env: #(sym_bv$14)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint16x16 '(buf uint8 128))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_5663

base_5663_grammar.rkt
/tmp/base_5663_grammar.rkt
Writing [{ 
"name": "base_5663" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5663_spec.JSON
rm: cannot remove '/tmp/base_5663_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5663_spec.JSON /tmp/base_5663_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5663 ... 

Grammar:
#<procedure:base_5663>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Spec result
(bv #xffbffff5ff85ffe00051004a0054ffb40023ffd80050ff8b00480079ffdc007d 256)
invoke-spec-lane with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
Concrete counter examples:
(#((bv #xbff585e0514a54b423d8508b4879dc7d 128)) #((bv #x789c7589950c4863103685fee12f1a2f 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
Spec Produced:
(bv #x007d 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x789c7589950c4863103685fee12f1a2f 128))
Spec Produced:
(bv #x002f 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$15)

invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
invoke-spec-lane with env: #(sym_bv$15)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$16)

invoke-spec with env: #(sym_bv$16)
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (sign-extend (extract 127 120 sym_bv$16) (bitvector 16)) (sign-extend (extract 119 112 sym_bv$16) (bitvector 16))) (sign-extend (extract 111 104 sym_bv$16) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$16 (bv #x80808080808080808080808080808080 128)])
Verification failed :(
#((bv #x80808080808080808080808080808080 128))
invoke-spec with env: #((bv #x80808080808080808080808080808080 128))
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Spec result
(bv #xff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80 256)
(bv #xff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80 256)
Verification failed ...
	spec produced: (bv #xff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80 256) 256 
	synthesized result produced: (bv #x0080008000800080008000800080008000800080008000800080008000800080 256) 256

invoke-spec with env: #((bv #x80808080808080808080808080808080 128))
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Spec result
(bv #xff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80ff80 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Spec result
(bv #xffbffff5ff85ffe00051004a0054ffb40023ffd80050ff8b00480079ffdc007d 256)
invoke-spec-lane with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
Concrete counter examples:
(#((bv #xbff585e0514a54b423d8508b4879dc7d 128)) #((bv #x789c7589950c4863103685fee12f1a2f 128)) #((bv #x80808080808080808080808080808080rm: cannot remove '/tmp/base_4410_spec.JSON': No such file or directory
Actual Broadcast ops 11
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_set1_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 11
 128)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xbff585e0514a54b423d8508b4879dc7d 128))
Spec Produced:
(bv #x007d 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x789c7589950c4863103685fee12f1a2f 128))
Spec Produced:
(bv #x002f 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80808080808080808080808080808080 128))
Spec Produced:
(bv #xff80 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$17)

invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
invoke-spec-lane with env: #(sym_bv$17)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x16 '(buf int8 128))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4410

base_4410_grammar.rkt
/tmp/base_4410_grammar.rkt
Writing [{ 
"name": "base_4410" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 8, 
"args": [], 
"spec_invokation": "",
"imms": [[6, 8]] 
}
] to file /tmp/base_4410_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4410_spec.JSON /tmp/base_4410_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4410 ... 

Grammar:
#<procedure:base_4410>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x06 8) #t))
Spec result
(bv #x06060606060606060606060606060606 128)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x06 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x06 8)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x06060606060606060606060606060606 128))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit (bv #x06060606060606060606060606060606 128))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x06 8) #t))
#(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)
Synthesis step completed!
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.0
; (reg 0) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t496, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t501, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t506, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t511, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t516, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 23.726443seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 0

Optimized expression: (int16x16)hydride.node.0((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 128, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 128, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 128, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 128, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 128, 1, 16)])
Starting synthesis for expr: 1
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8))
========================================
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.1
; (reg 0) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t521, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t526, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t531, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t536, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t541, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 10.242909seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 1

Optimized expression: (int16x16)hydride.node.1((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 144, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 144, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 144, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 144, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 144, 1, 16)])
Starting synthesis for expr: 2
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8))
========================================
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.2
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>
; (reg 0) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>
; (reg 0) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t546, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t551, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t556, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t561, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t566, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 9.775957seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 2

Optimized expression: (int16x16)hydride.node.2((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 160, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 160, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 160, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 160, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 160, 1, 16)])
Starting synthesis for expr: 3
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.3
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 4) <16 x i8>
; (reg 1) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 4) <16 x i8>
; (reg 1) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t571, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t576, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t581, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t586, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t591, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 9.877920seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 3

Optimized expression: (int16x16)hydride.node.3((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 176, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 176, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 176, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 176, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 176, 1, 16)])
Starting synthesis for expr: 4
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8))
========================================
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.4
; (reg 1) <16 x i8>
; (reg 2) <16 x i8>
; (reg 0) <16 x i8>
; (reg 3) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 1) <16 x i8>
; (reg 2) <16 x i8>
; (reg 0) <16 x i8>
; (reg 3) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t596, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t601, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t606, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t611, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t616, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 10.071292seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 4

Optimized expression: (int16x16)hydride.node.4((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 192, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 192, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 192, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 192, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 192, 1, 16)])
Starting synthesis for expr: 5
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.5
; (reg 0) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 0) <16 x i8>
; (reg 3) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 2) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t621, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t626, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t631, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t636, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t641, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 10.288456seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 5

Optimized expression: (int16x16)hydride.node.5((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 208, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 208, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 208, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 208, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 208, 1, 16)])
Starting synthesis for expr: 6
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.6
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 2) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 2) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t646, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t651, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t656, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t661, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t666, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 9.564259seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 6

Optimized expression: (int16x16)hydride.node.6((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 224, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 224, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 224, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 224, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 224, 1, 16)])
Starting synthesis for expr: 7
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8))
========================================
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.7
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 0) <16 x i8>
; (reg 1) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t671, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t676, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t681, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t686, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t691, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 14.244393seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 7

Optimized expression: (int16x16)hydride.node.7((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 240, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 240, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 240, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 240, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 240, 1, 16)])
Starting synthesis for expr: 8
Expression before lower intrinsic: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + (int16x16)widening_mul((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)], x16((int8)6)))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))*int16x16(x16((int8)6)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x04 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))) #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-mul #(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:int16x16 #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128))) #(struct:int16x16 #(struct:x16 #(struct:int-imm (bv #x06 8) #t))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(int16x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(reg (bv #x0 4))
(reg (bv #x0 4))
Cost
1
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x06 8) #t)))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'int8 128))
Hashed expression
(int16x16 '(buf int8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x06 8) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x06 8) #t))
Hashed expression
(x16 (int-imm (bv #x06 8) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit (bv #x06060606060606060606060606060606 128))
(lit (bv #x06060606060606060606060606060606 128))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x06 8) #t))
Sub-expression Synthesis completed:
(lit (bv #x06060606060606060606060606060606 128))
========================================
Synthesized-leaves
(#(struct:lit (bv #x06060606060606060606060606060606 128)))
========================================
Original Halide Sub-Expression:
(int16x16 (x16 (int-imm (bv #x06 8) #t)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (lit (bv #x06060606060606060606060606060606 128))
 128
 8
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (x16 (int-imm (bv #x06 8) #t))))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (lit (bv #x06060606060606060606060606060606 128))
  128
  8
  16)
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
 256
 16
 0
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-mul
  (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
  (int16x16 (x16 (int-imm (bv #x06 8) #t)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_pi16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (lit (bv #x06060606060606060606060606060606 128))
   128
   8
   16)
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
  256
  16
  0
  32)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-mul
   (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
   (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_mulhi_pi16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (lit (bv #x06060606060606060606060606060606 128))
    128
    8
    16)
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
   256
   16
   0
   32)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0002 16) #f)))
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-mul
    (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
    (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_mulhi_pi16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (lit (bv #x06060606060606060606060606060606 128))
     128
     8
     16)
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
    256
    16
    0
    32)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_pi16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:lit (bv #x06060606060606060606060606060606 128)) 128 8 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x02 8)) 128 8 16) 256 16 0 32) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16) 256 16 16) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x04 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x04 8)) 128 8 16)
 (_mm256_add_epi8_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_mulhi_pi16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (lit (bv #x06060606060606060606060606060606 128))
      128
      8
      16)
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x02 8)) 128 8 16)
     256
     16
     0
     32)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-add
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0002 16) #f)))
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0002 16) #f)))
    (vec-mul
     (int16x16 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
     (int16x16 (x16 (int-imm (bv #x06 8) #t))))))
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x04 8))
========================================
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x02 8)) <16 x i8>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x04 8)) <16 x i8>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.8
; (reg 1) <16 x i8>
; (reg 0) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 1) <16 x i8>
; (reg 0) <16 x i8>
; (reg 2) <16 x i8>
; (reg 3) <16 x i8>
; (reg 4) <16 x i8>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 4)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 2)  128  8  16  );<16 x i16>
  256  16  0  32  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Expression before InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))
Expression after InlineLets: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))
Expression before abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))
Input expression to synthesize: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t696, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(t701, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(t706, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(t711, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(t716, 1, 16)]))
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: uint16x16
Cast operation into: int16x16
Cast operation into: int16x16
Cast operation into: int16x16
Synthesis completed with return code:	0
Synthesis took 12.504771seconds ...
Expression after replacae abstraction: ((((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + ((int16x16)shift_left(int16x16((uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]), x16((uint16)2)) + (int16x16(uint16x16((uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))*int16x16(x16((int8)6))))) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])) + int16x16((uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 8

Optimized expression: (int16x16)hydride.node.8((uint8x16)repeat_edge[ramp(((((t266 + 6) % 16)*(t278 + 32)) + t331) + 256, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 8) % 16)*(t278 + 32)) + t331) + 256, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 7) % 16)*(t278 + 32)) + t331) + 256, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 5) % 16)*(t278 + 32)) + t331) + 256, 1, 16)], (uint8x16)repeat_edge[ramp(((((t266 + 9) % 16)*(t278 + 32)) + t331) + 256, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expressionrm: cannot remove '/tmp/base_4481_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4481

base_4481_grammar.rkt
/tmp/base_4481_grammar.rkt
Writing [{ 
"name": "base_4481" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[6, 16]] 
}
] to file /tmp/base_4481_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4481_spec.JSON /tmp/base_4481_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4481 ... 

Grammar:
#<procedure:base_4481>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0006 16) #t))
Spec result
(bv #x0006000600060006000600060006000600060006000600060006000600060006 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0006 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0006 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #x0006 16) #t))
#(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
Synthesis step completed!
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.9
; (reg 3) <16 x i16>
; (reg 0) <16 x i16>
; (reg 4) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 3) <16 x i16>
; (reg 0) <16 x i16>
; (reg 4) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 10.139373seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(1, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(0, 1, 16)] + (((int16x16)rows[ramp(2, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(4, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(3, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 9

Optimized expression: (int16x16)hydride.node.9((int16x16)rows[ramp(1, 1, 16)], (int16x16)rows[ramp(0, 1, 16)], (int16x16)rows[ramp(2, 1, 16)], (int16x16)rows[ramp(4, 1, 16)], (int16x16)rows[ramp(3, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.10
; (reg 0) <16 x i16>
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 0) <16 x i16>
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 8.764824seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(17, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(16, 1, 16)] + (((int16x16)rows[ramp(18, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(20, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(19, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 10

Optimized expression: (int16x16)hydride.node.10((int16x16)rows[ramp(17, 1, 16)], (int16x16)rows[ramp(16, 1, 16)], (int16x16)rows[ramp(18, 1, 16)], (int16x16)rows[ramp(20, 1, 16)], (int16x16)rows[ramp(19, 1, 16)])
rm: cannot remove '/tmp/base_878_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shr #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_878

base_878_grammar.rkt
/tmp/base_878_grammar.rkt
Writing [{ 
"name": "base_878" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_878_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_878_spec.JSON /tmp/base_878_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_878 ... 

Grammar:
#<procedure:base_878>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xd8e985796a46ecd4c066d7c42c3191239efa625bd628e700d9badba52f482ea6 256)
invoke-spec-lane with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512))
Concrete counter examples:
(#((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512)) #((bv #xbf464ff3130aa283e4ba7e9d1d98593f3c23ebb1b5cfce0fd0da4f2823b2a1c3d706ecde95eb7349194be42616411faa3216b5eba9263742205f0f6f4a301a7f 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512))
Spec Produced:
(bv #xa6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbf464ff3130aa283e4ba7e9d1d98593f3c23ebb1b5cfce0fd0da4f2823b2a1c3d706ecde95eb7349194be42616411faa3216b5eba9263742205f0f6f4a301a7f 512))
Spec Produced:
(bv #x7f 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$1)

invoke-spec with env: #(sym_bv$1)
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 503 496 sym_bv$1) (extract 487 ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$1 (bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512)])
Verification failed :(
#((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
Verification failed ...
	spec produced: (bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256) 256 
	synthesized result produced: (bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 256) 256

invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00 256)
Difference  Predicate
'((0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xd8e985796a46ecd4c066d7c42c3191239efa625bd628e700d9badba52f482ea6 256)
invoke-spec-lane with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6rm: cannot remove '/tmp/base_8097_spec.JSON': No such file or directory
 512))
Concrete counter examples:
(#((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512)) #((bv #xbf464ff3130aa283e4ba7e9d1d98593f3c23ebb1b5cfce0fd0da4f2823b2a1c3d706ecde95eb7349194be42616411faa3216b5eba9263742205f0f6f4a301a7f 512)) #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xa6d843e904857479f26af946e7ec4dd4fac09a66c0d776c4932c8331909168237e9ef0fa75621d5b74d6fa285be7e20043d9d0ba01dbd8a5fc2f9c48d62e9ea6 512))
Spec Produced:
(bv #xa6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbf464ff3130aa283e4ba7e9d1d98593f3c23ebb1b5cfce0fd0da4f2823b2a1c3d706ecde95eb7349194be42616411faa3216b5eba9263742205f0f6f4a301a7f 512))
Spec Produced:
(bv #x7f 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000 512))
Spec Produced:
(bv #xff 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2)

invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint8x32 '(buf int16 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_8097

base_8097_grammar.rkt
/tmp/base_8097_grammar.rkt
Writing [{ 
"name": "base_8097" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8097_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8097_spec.JSON /tmp/base_8097_grammar.rkt 32 0Pruning _mm512_cvtepi8_epi16 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srav_epi16 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 2

Generated Grammar File
Dynamically importing from base_8097 ... 

Grammar:
#<procedure:base_8097>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xffffffffffffffff00000000ffff00000000ffff0000ffffffff00000000ffffffffffff00000000ffffffffffff000000000000ffff0000ffff0000ffffffff 512)
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Concrete counter examples:
(#((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512)) #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$3 sym_bv$4)

invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$5 sym_bv$6)

invoke-spec with env: #(sym_bv$5 sym_bv$6)
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 496 sym_bv$5) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$5 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$6 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512) 512

invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xffffffffffffffff00000000ffff00000000ffff0000ffffffff00000000ffffffffffff00000000ffffffffffff000000000000ffff0000ffff0000ffffffff 512)
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Concrete counter examples:
(#((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512)) #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x1 4)) (lit (bv #x0000 16)) 512 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x1 4))
 (lit (bv #x0000 16))
 512
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10)

invoke-spec with env: #(sym_bv$9 sym_bv$10)
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 496 sym_bv$9) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512)]
 [sym_bv$10 (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512)] ...)
Verification failed :(
#((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512) (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512))
invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512) (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x00080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000 512)
(bv #x00080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000 512)
Verification failed ...
	spec produced: (bv #x00080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000 512) 512

invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512) (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x00080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xffffffffffffffff00000000ffff00000000ffff0000ffffffff00000000ffffffffffff00000000ffffffffffff000000000000ffff0000ffff0000ffffffff 512)
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Concrete counter examples:
(#((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512)) #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512) (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512)))
Failing lanes examples:
(0 0 0 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x8fecaebfec5bcd0507817345d1bc08fc0a389f220b37dd438e8a302848faba5eabeed71816092dabb76bc46b9fdb7f80023f0722e9897d569dc54bca83db9ffc 512) (bv #xde4c17b70b945a3e99ed8106ded34b7372e7505fcdc90e044e613582536cf2b8b8bb6ba034261863682474fdef18b8a5939f1a0d5dd04f9974787ba063d8c0f9 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x7243d73a90367deaa721f391fc036005fef2e2e1fb528009a79ff33486dda89ca57333991ce640d962a52c165f784d205a582ef4115f8b558165fd5092cbbfdf 512) (bv #x7c1808229386ab09ba45d39842ef7835499795e18917db2dfb48ff5dfd10c5a381d3d56676286eabea48c3372b2fc87d2ce3543e587a13d54fa28ad1b5b281f5 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800080000000 512) (bv #x000b0003000600060006000600060006000600060006000600060006000300060006000600060006000600060006000600060006000600060006800080060010 512))
Spec Produced:
(bv #x0008 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11 sym_bv$12)

invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2
#(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
verify-across-lanes returned #t ... 

Test elapsed time: 
6
(vec-shr '(buf int16 512) '(buf uint16 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #f))
Hashed expression
(x32 (int-imm (bv #x0008 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5279

base_5279_grammar.rkt
/tmp/base_5279_grammar.rkt
Writing [{ 
"name": "base_5279" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[8, 16]] 
}
] to file /tmp/base_5279_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5279_spec.JSON /tmp/base_5279_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_5279 ... 

Grammar:
#<procedure:base_5279>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x0008 16) #f))
Spec result
(bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0008 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0008 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x0008 16) #f))
#(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (lit (bv #xffff 16))
 (reg (bv #x00 8))
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x00 8)) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (lit (bv #xffff 16))
  (reg (bv #x00 8))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 18.349232seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 11

Optimized expression: (uint8x32)hydride.node.11((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.12
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Starting synthesis for expr: 12
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 9.336036seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(33, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(32, 1, 16)] + (((int16x16)rows[ramp(34, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(36, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(35, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 12

Optimized expression: (int16x16)hydride.node.12((int16x16)rows[ramp(33, 1, 16)], (int16x16)rows[ramp(32, 1, 16)], (int16x16)rows[ramp(34, 1, 16)], (int16x16)rows[ramp(36, 1, 16)], (int16x16)rows[ramp(35, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.13
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Starting synthesis for expr: 13
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 8.773401seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(49, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(48, 1, 16)] + (((int16x16)rows[ramp(50, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(52, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(51, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 13

Optimized expression: (int16x16)hydride.node.13((int16x16)rows[ramp(49, 1, 16)], (int16x16)rows[ramp(48, 1, 16)], (int16x16)rows[ramp(50, 1, 16)], (int16x16)rows[ramp(52, 1, 16)], (int16x16)rows[ramp(51, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shr #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #f))
Hashed expression
(x32 (int-imm (bv #x0008 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (lit (bv #xffff 16))
 (reg (bv #x00 8))
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x00 8)) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (lit (bv #xffff 16))
  (reg (bv #x00 8))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Starting synthesis for expr: 14
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 7.840489seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 14

Optimized expression: (uint8x32)hydride.node.14((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Starting synthesis for expr: 15
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 8.626988seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(65, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(64, 1, 16)] + (((int16x16)rows[ramp(66, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(68, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(67, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 15

Optimized expression: (int16x16)hydride.node.15((int16x16)rows[ramp(65, 1, 16)], (int16x16)rows[ramp(64, 1, 16)], (int16x16)rows[ramp(66, 1, 16)], (int16x16)rows[ramp(68, 1, 16)], (int16x16)rows[ramp(67, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.16
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 3) <16 x i16>
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Starting synthesis for expr: 16
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 9.228454seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(81, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(80, 1, 16)] + (((int16x16)rows[ramp(82, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(84, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(83, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 16

Optimized expression: (int16x16)hydride.node.16((int16x16)rows[ramp(81, 1, 16)], (int16x16)rows[ramp(80, 1, 16)], (int16x16)rows[ramp(82, 1, 16)], (int16x16)rows[ramp(84, 1, 16)], (int16x16)rows[ramp(83, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shr #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #f))
Hashed expression
(x32 (int-imm (bv #x0008 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (lit (bv #xffff 16))
 (reg (bv #x00 8))
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x00 8)) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (lit (bv #xffff 16))
  (reg (bv #x00 8))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.17
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Starting synthesis for expr: 17
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 7.765653seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 17

Optimized expression: (uint8x32)hydride.node.17((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_17 from hydride_hash_17.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8))
========================================
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.18
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 3) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.18.rkt

Completed writing to file ...
Append [; hydride.node.18
; (reg 4) <16 x i16>
; (reg 0) <16 x i16>
; (reg 1) <16 x i16>
; (reg 3) <16 x i16>
; (reg 2) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.18.rkt /tmp/test.ll
Storing synth log map synth_hash_18 to /tmp/hydride_hash_18.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_18 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_18.rkt

Completed writing to file ...
Starting synthesis for expr: 18
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 9.340375seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(97, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(96, 1, 16)] + (((int16x16)rows[ramp(98, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(100, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(99, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 18

Optimized expression: (int16x16)hydride.node.18((int16x16)rows[ramp(97, 1, 16)], (int16x16)rows[ramp(96, 1, 16)], (int16x16)rows[ramp(98, 1, 16)], (int16x16)rows[ramp(100, 1, 16)], (int16x16)rows[ramp(99, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_18 from hydride_hash_18.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-add #(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:vec-mul #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0006 16) #t)))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-mul '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
(_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #t))
Hashed expression
(x16 (int-imm (bv #x0006 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-mul
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0006 16) #t)))
Sub-expression Synthesis completed:
(_mm_mulhi_pi16_dsl
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (reg (bv #x02 8))
 256
 16
 0
 32)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0002 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0002 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0002 16) #f))
Hashed expression
(x16 (int-imm (bv #x0002 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
(lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0002 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0002 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x04 8))
 256
 16
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x04 8))
  256
  16
  16)
 (reg (bv #x03 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0006 16) #t)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-shl
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0002 16) #f)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (reg (bv #x04 8))
   256
   16
   16)
  (reg (bv #x03 8))
  256
  16)
 (_mm_mulhi_pi16_dsl
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (reg (bv #x02 8))
  256
  16
  0
  32)
 256
 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (vec-add
  (vec-mul
   (buffer #<procedure:buffer-fn> 'int16 256)
   (x16 (int-imm (bv #x0006 16) #t)))
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 256)
   (vec-shl
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0002 16) #f))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (reg (bv #x04 8))
    256
    16
    16)
   (reg (bv #x03 8))
   256
   16)
  (_mm_mulhi_pi16_dsl
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (reg (bv #x02 8))
   256
   16
   0
   32)
  256
  16)
 (reg (bv #x01 8))
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x04 8)) 256 16 16) #(struct:reg (bv #x03 8)) 256 16) #(struct:_mm_mulhi_pi16_dsl #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:reg (bv #x02 8)) 256 16 0 32) 256 16) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (reg (bv #x04 8))
     256
     16
     16)
    (reg (bv #x03 8))
    256
    16)
   (_mm_mulhi_pi16_dsl
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (reg (bv #x02 8))
    256
    16
    0
    32)
   256
   16)
  (reg (bv #x01 8))
  256
  16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0002000200020002000200020002000200020002000200020002000200020002 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0002 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (vec-add
   (vec-mul
    (buffer #<procedure:buffer-fn> 'int16 256)
    (x16 (int-imm (bv #x0006 16) #t)))
   (vec-add
    (buffer #<procedure:buffer-fn> 'int16 256)
    (vec-shl
     (buffer #<procedure:buffer-fn> 'int16 256)
     (x16 (int-imm (bv #x0002 16) #f)))))))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x04 8)) <16 x i16>
; (reg (bv #x03 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.19
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.19.rkt

Completed writing to file ...
Append [; hydride.node.19
; (reg 4) <16 x i16>
; (reg 3) <16 x i16>
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 4)  256  16  16  );<16 x i16>
  
(reg 3)  256  16  );<16 x i16>
  
(_mm_mulhi_pi16_dsl (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  
(reg 2)  256  16  0  32  );<16 x i16>
  256  16  );<16 x i16>
  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.19.rkt /tmp/test.ll
Storing synth log map synth_hash_19 to /tmp/hydride_hash_19.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_19 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_19.rkt

Completed writing to file ...
Starting synthesis for expr: 19
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Synthesis completed with return code:	0
Synthesis took 8.674140seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(113, 1, 16)], x16((uint16)2)) + ((int16x16)rows[ramp(112, 1, 16)] + (((int16x16)rows[ramp(114, 1, 16)]*x16((int16)6)) + ((int16x16)rows[ramp(116, 1, 16)] + (int16x16)shift_left((int16x16)rows[ramp(115, 1, 16)], x16((uint16)2))))))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 19

Optimized expression: (int16x16)hydride.node.19((int16x16)rows[ramp(113, 1, 16)], (int16x16)rows[ramp(112, 1, 16)], (int16x16)rows[ramp(114, 1, 16)], (int16x16)rows[ramp(116, 1, 16)], (int16x16)rows[ramp(115, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_19 from hydride_hash_19.rkt ... 

#hash((#(struct:int16x16 (buf uint16 256)) . #(#t #(struct:reg (bv #x0 4)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0006 16) #t)) . #(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)) (#(struct:vec-mul (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm_mulhi_pi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16 0 32) 1)) (#(struct:int16x16 (buf int8 128)) . #(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #f)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:int16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x06 8) #t)) . #(#t #(struct:lit (bv #x06060606060606060606060606060606 128)) 0)) (#(struct:x16 #(struct:int-imm (bv #x0002 16) #f)) . #(#t #(struct:lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
here
(#(struct:vec-shr #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #f))
Hashed expression
(x32 (int-imm (bv #x0008 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (lit (bv #xffff 16))
 (reg (bv #x00 8))
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x00 8)) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (lit (bv #xffff 16))
  (reg (bv #x00 8))
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.20
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.20.rkt

Completed writing to file ...
Append [; hydride.node.20
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(reg 0)  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.20.rkt /tmp/test.ll
Storing synth log map synth_hash_20 to /tmp/hydride_hash_20.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_20 (hash 
(int16x16 '(buf uint16 256)) (vector #t (reg (bv #x0 4)) 0)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 1)
(vec-mul '(buf int16 256) '(buf int16 256)) (vector #t (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16 0 32) 1)
(int16x16 '(buf int8 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)))
] to file /tmp/hydride_hash_20.rkt

Completed writing to file ...
Starting synthesis for expr: 20
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.159881seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)], x32((uint16)8)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 20

Optimized expression: (uint8x32)hydride.node.20((int16x32)cols[ramp(0, 1, 32)])
Hydride Function: declare <16 x i16> @hydride.node.0(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3101 = call <16 x i16> @hydride.node.0(<16 x i8> %3052, <16 x i8> %3064, <16 x i8> %3076, <16 x i8> %3088, <16 x i8> %3100) #17
Hydride Function: declare <16 x i16> @hydride.node.1(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3163 = call <16 x i16> @hydride.node.1(<16 x i8> %3114, <16 x i8> %3126, <16 x i8> %3138, <16 x i8> %3150, <16 x i8> %3162) #17
Hydride Function: declare <16 x i16> @hydride.node.2(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3226 = call <16 x i16> @hydride.node.2(<16 x i8> %3177, <16 x i8> %3189, <16 x i8> %3201, <16 x i8> %3213, <16 x i8> %3225) #17
Hydride Function: declare <16 x i16> @hydride.node.3(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3289 = call <16 x i16> @hydride.node.3(<16 x i8> %3240, <16 x i8> %3252, <16 x i8> %3264, <16 x i8> %3276, <16 x i8> %3288) #17
Hydride Function: declare <16 x i16> @hydride.node.4(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3352 = call <16 x i16> @hydride.node.4(<16 x i8> %3303, <16 x i8> %3315, <16 x i8> %3327, <16 x i8> %3339, <16 x i8> %3351) #17
Hydride Function: declare <16 x i16> @hydride.node.5(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3415 = call <16 x i16> @hydride.node.5(<16 x i8> %3366, <16 x i8> %3378, <16 x i8> %3390, <16 x i8> %3402, <16 x i8> %3414) #17
Hydride Function: declare <16 x i16> @hydride.node.6(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3478 = call <16 x i16> @hydride.node.6(<16 x i8> %3429, <16 x i8> %3441, <16 x i8> %3453, <16 x i8> %3465, <16 x i8> %3477) #17
Hydride Function: declare <16 x i16> @hydride.node.7(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3541 = call <16 x i16> @hydride.node.7(<16 x i8> %3492, <16 x i8> %3504, <16 x i8> %3516, <16 x i8> %3528, <16 x i8> %3540) #17
Hydride Function: declare <16 x i16> @hydride.node.8(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)

Generating Hydride Call:   %3604 = call <16 x i16> @hydride.node.8(<16 x i8> %3555, <16 x i8> %3567, <16 x i8> %3579, <16 x i8> %3591, <16 x i8> %3603) #17
Hydride Function: declare <16 x i16> @hydride.node.9(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3621 = call <16 x i16> @hydride.node.9(<16 x i16> %3609, <16 x i16> %3611, <16 x i16> %3614, <16 x i16> %3617, <16 x i16> %3620) #17
Hydride Function: declare <16 x i16> @hydride.node.10(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3638 = call <16 x i16> @hydride.node.10(<16 x i16> %3625, <16 x i16> %3628, <16 x i16> %3631, <16 x i16> %3634, <16 x i16> %3637) #17
Hydride Function: declare <32 x i8> @hydride.node.11(<32 x i16>)

Generating Hydride Call:   %3643 = call <32 x i8> @hydride.node.11(<32 x i16> %3642) #17
Hydride Function: declare <16 x i16> @hydride.node.12(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3669 = call <16 x i16> @hydride.node.12(<16 x i16> %3656, <16 x i16> %3659, <16 x i16> %3662, <16 x i16> %3665, <16 x i16> %3668) #17
Hydride Function: declare <16 x i16> @hydride.node.13(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3686 = call <16 x i16> @hydride.node.13(<16 x i16> %3673, <16 x i16> %3676, <16 x i16> %3679, <16 x i16> %3682, <16 x i16> %3685) #17
Hydride Function: declare <32 x i8> @hydride.node.14(<32 x i16>)

Generating Hydride Call:   %3691 = call <32 x i8> @hydride.node.14(<32 x i16> %3690) #17
Hydride Function: declare <16 x i16> @hydride.node.15(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3718 = call <16 x i16> @hydride.node.15(<16 x i16> %3705, <16 x i16> %3708, <16 x i16> %3711, <16 x i16> %3714, <16 x i16> %3717) #17
Hydride Function: declare <16 x i16> @hydride.node.16(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3735 = call <16 x i16> @hydride.node.16(<16 x i16> %3722, <16 x i16> %3725, <16 x i16> %3728, <16 x i16> %3731, <16 x i16> %3734) #17
Hydride Function: declare <32 x i8> @hydride.node.17(<32 x i16>)

Generating Hydride Call:   %3740 = call <32 x i8> @hydride.node.17(<32 x i16> %3739) #17
Hydride Function: declare <16 x i16> @hydride.node.18(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3767 = call <16 x i16> @hydride.node.18(<16 x i16> %3754, <16 x i16> %3757, <16 x i16> %3760, <16 x i16> %3763, <16 x i16> %3766) #17
Hydride Function: declare <16 x i16> @hydride.node.19(<16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %3784 = call <16 x i16> @hydride.node.19(<16 x i16> %3771, <16 x i16> %3774, <16 x i16> %3777, <16 x i16> %3780, <16 x i16> %3783) #17
Hydride Function: declare <32 x i8> @hydride.node.20(<32 x i16>)

Generating Hydride Call:   %3789 = call <32 x i8> @hydride.node.20(<32 x i16> %3788) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'gaussian5x5' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
