mkdir blur3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g blur3x3/src/blur3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o blur3x3/bin/blur3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./blur3x3/bin/blur3x3_generator \
	-t 0 \
	-o blur3x3/bin \
	-g blur3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f blur3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_6753_spec.JSON': No such file or directory
Pruning _mm256_srli_epi16 as it has an argument of size 8 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_srlv_epi16 with score: 5 belonging to target agnostic class _mm_srlv_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_div_epu16 with score: 6 belonging to target agnostic class _mm512_div_epu16
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))) #(struct:x16 #(struct:int-imm (bv #x0003 16) #f)))
=======================================
(vec-div
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-div
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-div '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6753

base_6753_grammar.rkt
/tmp/base_6753_grammar.rkt
Writing [{ 
"name": "base_6753" , 
"semantics": [ "(extract zero-extend bvudiv bvlshr)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6753_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6753_spec.JSON /tmp/base_6753_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6753 ... 

Grammar:
#<procedure:base_6753>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
(vec-div (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000100010000000200010001000000020003003e00000000000700000000 256)
invoke-spec-lane with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
Concrete counter examples:
(#((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256)) #((bv #xec603e14f1897f9c72db71ea03d1f3149232ebfdc50a3ecec9066500061c2dd0 256) (bv #xc98b0a94f667d861ef7f43864c96411881eda767a51e0778246025dbd0485a09 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xec603e14f1897f9c72db71ea03d1f3149232ebfdc50a3ecec9066500061c2dd0 256) (bv #xc98b0a94f667d861ef7f43864c96411881eda767a51e0778246025dbd0485a09 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-div (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvudiv (extract 255 240 sym_bv$2) (extract 255 240 sym_bv$3)) (bvudiv (extract 239 224 sym_bv$2) (extract 239 224 sym_bv$3))) (bvudiv (extract 223 208 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256)]
 [sym_bv$3 (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256)])
Verification failed :(
#((bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256) (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256))
invoke-spec with env: #((bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256) (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256))
(vec-div (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0087014f0001012affffffffffff03fcffffffffffffffffffffffff000d0000 256)
(bv #x0087014f0001012affffffffffff03fcffffffffffffffffffffffff000d0000 256)
Verification failed ...
	spec produced: (bv #x0087014f0001012affffffffffff03fcffffffffffffffffffffffff000d0000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256) (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256))
(vec-div (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0087014f0001012affffffffffff03fcffffffffffffffffffffffff000d0000 256)
Difference  Predicate
'((0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
(vec-div (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000100010000000200010001000000020003003e00000000000700000000 256)
invoke-spec-lane with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
Concrete counter examples:
(#((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256)) #((bv #xec603e14f1897f9c72db71ea03d1f3149232ebfdc50a3ecec9066500061c2dd0 256) (bv #xc98b0a94f667d861ef7f43864c96411881eda767a51e0778246025dbd0485a09 256)) #((bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256) (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x01941ab4cb3418c4b297d37dfaa911fec54137b0df932f912ab2ab7d0dd10216 256) (bv #xd49818616e474fda4e6acfbee8e2d0b65408108c0392fd40aaa6157551fbc1e7 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xec603e14f1897f9c72db71ea03d1f3149232ebfdc50a3ecec9066500061c2dd0 256) (bv #xc98b0a94f667d861ef7f43864c96411881eda767a51e0778246025dbd0485a09 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #xc041f8c4acaebe00fffeeb42f0eeab65fffe803e800e8a0280028002d417a072 256)rm: cannot remove '/tmp/base_8000_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
 (bv #x016b00be8b3d00a3000000000000002b0000000000000000000000000f77c001 256))
Spec Produced:
(bv #x000d 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-div '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm512_div_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16 32) 1)
Synthesis step completed!
Solution
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_8000

base_8000_grammar.rkt
/tmp/base_8000_grammar.rkt
Writing [{ 
"name": "base_8000" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8000_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8000_spec.JSON /tmp/base_8000_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_8000 ... 

Grammar:
#<procedure:base_8000>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x37e93f4b21532faabcac5f3477e07fdc2e2d46263b49080039397ffe2d76f066 256) (bv #xa0df5b132bf8b738ce20a2dd23444ff69a05eb9f840501079ecaa180991abc88 256))
(vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xd8c89a5e4d4be6e28acc02119b24cfd2c83231c5bf4e0907d803217ec690acee 256)
invoke-spec-lane with env: #((bv #x37e93f4b21532faabcac5f3477e07fdc2e2d46263b49080039397ffe2d76f066 256) (bv #xa0df5b132bf8b738ce20a2dd23444ff69a05eb9f840501079ecaa180991abc88 256))
Concrete counter examples:
(#((bv #x37e93f4b21532faabcac5f3477e07fdc2e2d46263b49080039397ffe2d76f066 256) (bv #xa0df5b132bf8b738ce20a2dd23444ff69a05eb9f840501079ecaa180991abc88 256)) #((bv #x19de846d8a115720949edc9ed3ecb5cfae463781f0194c86473d14d25e438ea0 256) (bv #xe03f15047758f7d1486311536ad1fbef4e0c0272b2e3879e752c0515174d3f05 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x37e93f4b21532faabcac5f3477e07fdc2e2d46263b49080039397ffe2d76f066 256) (bv #xa0df5b132bf8b738ce20a2dd23444ff69a05eb9f840501079ecaa180991abc88 256))
Spec Produced:
(bv #xacee 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x19de846d8a115720949edc9ed3ecb5cfae463781f0194c86473d14d25e438ea0 256) (bv #xe03f15047758f7d1486311536ad1fbef4e0c0272b2e3879e752c0515174d3f05 256))
Spec Produced:
(bv #xcda5 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm256_add_epi8_dslrm: cannot remove '/tmp/base_2277_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0003 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0003 16) #f))
Hashed expression
(x16 (int-imm (bv #x0003 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_2277

base_2277_grammar.rkt
/tmp/base_2277_grammar.rkt
Writing [{ 
"name": "base_2277" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[3, 16]] 
}
] to file /tmp/base_2277_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_2277_spec.JSON /tmp/base_2277_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_2277 ... 

Grammar:
#<procedure:base_2277>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0003 16) #f))
Spec result
(bv #x0003000300030003000300030003000300030003000300030003000300030003 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0003 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0003 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #x0003 16) #f))
#(#t #(struct:lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) 1)
Synthesis step completed!
Solution
(lit
 (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
(lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0003 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16) 256 16) #(struct:lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)))
========================================
Original Halide Sub-Expression:
(vec-div
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 256)
   (buffer #<procedure:buffer-fn> 'uint16 256)))
 (x16 (int-imm (bv #x0003 16) #f)))
Sub-expression Synthesis completed:
(_mm512_div_epu16_dsl
 (_mm256_add_epi8_dsl
  (reg (bv #x00 8))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
  256
  16)
 (lit
  (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
 256
 16
 32)
========================================
========================================
Original Halide Expression:
(vec-div
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 256)
   (buffer #<procedure:buffer-fn> 'uint16 256)))
 (x16 (int-imm (bv #x0003 16) #f)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

Writing [; hydride.node.0
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(x16 (int-imm (bv #x0003 16) #f)) (vector #t (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) 1)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-div '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32) 1)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: (((uint16x16)input[ramp(t9 + 1, 1, 16)] + ((uint16x16)input[ramp(t9 + 2, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Expression before InlineLets: (((uint16x16)input[ramp(t9 + 1, 1, 16)] + ((uint16x16)input[ramp(t9 + 2, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Expression after InlineLets: (((uint16x16)input[ramp(t9 + 1, 1, 16)] + ((uint16x16)input[ramp(t9 + 2, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Expression before abstraction: (((uint16x16)input[ramp(t9 + 1, 1, 16)] + ((uint16x16)input[ramp(t9 + 2, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Input expression to synthesize: (((uint16x16)input[ramp(t53, 1, 16)] + ((uint16x16)input[ramp(t54, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Synthesis completed with return code:	0
Synthesis took 13.711449seconds ...
Expression after replacae abstraction: (((uint16x16)input[ramp(t9 + 1, 1, 16)] + ((uint16x16)input[ramp(t9 + 2, 1, 16)] + (uint16x16)input[ramp(t9, 1, 16)]))/x16((uint16)3))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 0

Optimized expression: (uint16x16)hydride.node.0((uint16x16)input[ramp(t9 + 1, 1, 16)], (uint16x16)input[ramp(t9 + 2, 1, 16)], (uint16x16)input[ramp(t9, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:x16 #(struct:int-imm (bv #x0003 16) #f)) . #(#t #(struct:lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) 1)) (#(struct:vec-div (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm512_div_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16 32) 1)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)))
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))) #(struct:x16 #(struct:int-imm (bv #x0003 16) #f)))
=======================================
(vec-div
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-div
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-div '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
(_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32)
Cost
7
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (buffer #<procedure:buffer-fn> 'uint16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (reg (bv #x00 8))
 (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
 256
 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0003 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0003 16) #f))
Hashed expression
(x16 (int-imm (bv #x0003 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
(lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0003 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x00 8)) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 16) 256 16) #(struct:lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)))
========================================
Original Halide Sub-Expression:
(vec-div
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 256)
   (buffer #<procedure:buffer-fn> 'uint16 256)))
 (x16 (int-imm (bv #x0003 16) #f)))
Sub-expression Synthesis completed:
(_mm512_div_epu16_dsl
 (_mm256_add_epi8_dsl
  (reg (bv #x00 8))
  (_mm256_add_epi8_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 16)
  256
  16)
 (lit
  (bv #x0003000300030003000300030003000300030003000300030003000300030003 256))
 256
 16
 32)
========================================
========================================
Original Halide Expression:
(vec-div
 (vec-add
  (buffer #<procedure:buffer-fn> 'uint16 256)
  (vec-add
   (buffer #<procedure:buffer-fn> 'uint16 256)
   (buffer #<procedure:buffer-fn> 'uint16 256)))
 (x16 (int-imm (bv #x0003 16) #f)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

Writing [; hydride.node.1
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm512_div_epu16_dsl 
(_mm256_add_epi8_dsl 
(reg 0)  
(_mm256_add_epi8_dsl 
(reg 1)  
(reg 2)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) ; <16 x i16>
  256  16  32  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(x16 (int-imm (bv #x0003 16) #f)) (vector #t (lit (bv #x0003000300030003000300030003000300030003000300030003000300030003 256)) 1)
(vec-div '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm512_div_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 32) 1)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: (((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Expression before InlineLets: (((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Expression after InlineLets: (((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Expression before abstraction: (((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Input expression to synthesize: (((uint16x16)blur_x[ramp(t61, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp(t63, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t65, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Synthesis completed with return code:	0
Synthesis took 7.849503seconds ...
Expression after replacae abstraction: (((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)] + ((uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)] + (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)]))/x16((uint16)3))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 1

Optimized expression: (uint16x16)hydride.node.1((uint16x16)blur_x[ramp((t11*16) + 480, 1, 16) aligned(16, 0)], (uint16x16)blur_x[ramp((t11*16) + 960, 1, 16) aligned(16, 0)], (uint16x16)blur_x[ramp(t11*16, 1, 16) aligned(16, 0)])
Hydride Function: declare <16 x i16> @hydride.node.0(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %184 = call <16 x i16> @hydride.node.0(<16 x i16> %172, <16 x i16> %178, <16 x i16> %183) #17
Hydride Function: declare <16 x i16> @hydride.node.1(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %214 = call <16 x i16> @hydride.node.1(<16 x i16> %202, <16 x i16> %208, <16 x i16> %213) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'blur3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
