mkdir dilate3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g dilate3x3/src/dilate3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o dilate3x3/bin/dilate3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./dilate3x3/bin/dilate3x3_generator \
	-t 0 \
	-o dilate3x3/bin \
	-g dilate3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f dilate3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_966_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_966

base_966_grammar.rkt
/tmp/base_966_grammar.rkt
Writing [{ 
"name": "base_966" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_966_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_966_spec.JSON /tmp/base_966_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_966 ... 

Grammar:
#<procedure:base_966>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #xb4c3f59798daeae6c7c3aab3b7d921e9d9a2dbd2bf88c6f7daf590b093ecfa29 256)
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Concrete counter examples:
(#((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256)) #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Spec Produced:
(bv #x29 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256))
Spec Produced:
(bv #xd9 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec with env: #(sym_bv$2 sym_bv$3)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$3) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$2 (bv #x800000007e000000000000000000000080000002000000000000000000007e00 256)]
 [sym_bv$3 (bv #x0000000080000000000000000000000080000004000000000000000000008000 256)])
Verification failed :(
#((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256))
invoke-spec with env: #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x8000000080000000000000000000000080000004000000000000000000008000 256)
(bv #x8000000080000000000000000000000080000004000000000000000000008000 256)
Verification failed ...
	spec produced: (bv #x8000000080000000000000000000000080000004000000000000000000008000 256) 256 
	synthesized result produced: (bv #x0000000080000000000000000000000080000004000000000000000000008000 256) 256

invoke-spec with env: #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x8000000080000000000000000000000080000004000000000000000000008000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #xb4c3f59798daeae6c7c3aab3b7d921e9d9a2dbd2bf88c6f7daf590b093ecfa29 256)
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Concrete counter examples:
(#((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256)) #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256)) #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256)))
Failing lanes examples:
(0 0 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Spec Produced:
(bv #x29 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256))
Spec Produced:
(bv #xd9 8)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Z3 Synthesized Solution
(vector-two-input-swizzle_dsl (reg (bv #x1 4)) (reg (bv #x1 4)) 16 8 0 16 16 1 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(vector-two-input-swizzle_dsl
 (reg (bv #x1 4))
 (reg (bv #x1 4))
 16
 8
 0
 16
 16
 1
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
invoke-spec-lane with env: #(sym_bv$4 sym_bv$5)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec with env: #(sym_bv$6 sym_bv$7)
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 255 248 sym_bv$7) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$6 (bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256)]
 [sym_bv$7 (bv #x4180018000000000000000000000800000800000000000000000000000008000 256)])
Verification failed :(
#((bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256) (bv #x4180018000000000000000000000800000800000000000000000000000008000 256))
invoke-spec with env: #((bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256) (bv #x4180018000000000000000000000800000800000000000000000000000008000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x41804280e0e0c0f0000000000000800000800000000000000000000000008000 256)
(bv #x41804280e0e0c0f0000000000000800000800000000000000000000000008000 256)
Verification failed ...
	spec produced: (bv #x41804280e0e0c0f0000000000000800000800000000000000000000000008000 256) 256 
	synthesized result produced: (bv #x0080000000000000000000000000800000800000000000000000000000008000 256) 256

invoke-spec with env: #((bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256) (bv #x4180018000000000000000000000800000800000000000000000000000008000 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x41804280e0e0c0f0000000000000800000800000000000000000000000008000 256)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 1))
differing-lanes
'(24)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 256) (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #xb4c3f59798daeae6c7c3aab3b7d921e9d9a2dbd2bf88c6f7daf590b093ecfa29 256)
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Concrete counter examples:
(#((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256)) #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256)) #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256)) #((bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256) (bv #x4180018000000000000000000000800000800000000000000000000000008000 256)))
Failing lanes examples:
(0 0 31 24)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x28c3cc609851eae6c73548b355d921e9d90180d27d88c61acdf590b000ecd327 256) (bv #xb48df59766dacd3052c3aa7fb7cc1cac6da2dbbfbf7a51f7da48734e938dfa29 256))
Spec Produced:
(bv #x29 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x676dc16e690e068827fc7e108a4f32e45e922bfebeb9726a455422d415921c2a 256) (bv #xe79e799e664ae3c29968f2fa4795f1d3be7eec815c7795b315040b6dc1e191d9 256))
Spec Produced:
(bv #xd9 8)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x800000007e000000000000000000000080000002000000000000000000007e00 256) (bv #x0000000080000000000000000000000080000004000000000000000000008000 256))
Spec Produced:
(bv #x80 8)
Synthesize by lane...
Lane Index
24
invoke-spec-lane with env: #((bv #x305e421ce0e0c0f00000000000007e00007e0000000000000000000000007e00 256) (bv #x4180018000000000000000000000800000800000000000000000000000008000 256))
Spec Produced:
(bv #xf0 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-max '(buf uint8 256) '(buf uint8 256))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 8) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (reg (bv #x00 8))
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.0
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression before InlineLets: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression after InlineLets: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Expression before abstraction: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Input expression to synthesize: max((uint8x32)repeat_edge[ramp(t260, 1, 32)], max((uint8x32)repeat_edge[ramp(t264, 1, 32)], (uint8x32)repeat_edge[ramp(t268, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 17.062061seconds ...
Expression after replacae abstraction: max((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], max((uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (uint8x32)hydride.node.0((uint8x32)repeat_edge[ramp((((t166 + 1) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 2) % 4)*(t156 + 32)) + t96, 1, 32)], (uint8x32)repeat_edge[ramp((((t166 + 3) % 4)*(t156 + 32)) + t96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (reg (bv #x00 8))
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8))
========================================
; (reg (bv #x02 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.1
; (reg 2) <32 x i8>
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 2) <32 x i8>
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t278, 1, 32)], max((uint8x32)max_y[ramp(t279, 1, 32)], (uint8x32)max_y[ramp(t280, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 8.419822seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t97 + 32, 1, 32)], max((uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (uint8x32)hydride.node.1((uint8x32)max_y[ramp(t97 + 32, 1, 32)], (uint8x32)max_y[ramp(t97 + 33, 1, 32)], (uint8x32)max_y[ramp(t97 + 34, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (reg (bv #x00 8))
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.2
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 1) <32 x i8>
; (reg 0) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t285, 1, 32)], max((uint8x32)max_y[ramp(t286, 1, 32)], (uint8x32)max_y[ramp(t287, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 11.548803seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t149 + -32, 1, 32)], max((uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 2

Optimized expression: (uint8x32)hydride.node.2((uint8x32)max_y[ramp(t149 + -32, 1, 32)], (uint8x32)max_y[ramp(t149 + -31, 1, 32)], (uint8x32)max_y[ramp(t149 + -30, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (reg (bv #x00 8))
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.3
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression before InlineLets: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression after InlineLets: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Expression before abstraction: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Input expression to synthesize: max((uint8x32)repeat_edge[ramp(t315, 1, 32)], max((uint8x32)repeat_edge[ramp(t319, 1, 32)], (uint8x32)repeat_edge[ramp(t323, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 8.530852seconds ...
Expression after replacae abstraction: max((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], max((uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 3

Optimized expression: (uint8x32)hydride.node.3((uint8x32)repeat_edge[ramp((((t174 + 1) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 2) % 4)*(t171 + 32)) + t102, 1, 32)], (uint8x32)repeat_edge[ramp((((t174 + 3) % 4)*(t171 + 32)) + t102, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x02 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:vec-max (buf uint8 256) (buf uint8 256)) . #(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 8) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:vec-max #(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256) #(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(vec-max '(buf uint8 256) '(buf uint8 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8)
Cost
6
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)) 256 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (reg (bv #x00 8))
 (_mm512_max_epu64_dsl (reg (bv #x01 8)) (reg (bv #x02 8)) 256 8)
 256
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (vec-max
  (buffer #<procedure:buffer-fn> 'uint8 256)
  (buffer #<procedure:buffer-fn> 'uint8 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 256)
 (bv #x02 8))
========================================
; (reg (bv #x00 8)) <32 x i8>
; (reg (bv #x01 8)) <32 x i8>
; (reg (bv #x02 8)) <32 x i8>

(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

Writing [; hydride.node.4
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <32 x i8>
; (reg 1) <32 x i8>
; (reg 2) <32 x i8>


(_mm512_max_epu64_dsl 
(reg 0)  
(_mm512_max_epu64_dsl 
(reg 1)  
(reg 2)  256  8  );<32 x i8>
  256  8  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression before InlineLets: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression after InlineLets: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Expression before abstraction: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Input expression to synthesize: max((uint8x32)max_y[ramp(t335, 1, 32)], max((uint8x32)max_y[ramp(t336, 1, 32)], (uint8x32)max_y[ramp(t337, 1, 32)]))
Synthesis completed with return code:	0
Synthesis took 7.685073seconds ...
Expression after replacae abstraction: max((uint8x32)max_y[ramp(t103 + 32, 1, 32)], max((uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)]))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 4

Optimized expression: (uint8x32)hydride.node.4((uint8x32)max_y[ramp(t103 + 32, 1, 32)], (uint8x32)max_y[ramp(t103 + 33, 1, 32)], (uint8x32)max_y[ramp(t103 + 34, 1, 32)])
Hydride Function: declare <32 x i8> @hydride.node.0(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1748 = call <32 x i8> @hydride.node.0(<32 x i8> %1725, <32 x i8> %1736, <32 x i8> %1747) #17
Hydride Function: declare <32 x i8> @hydride.node.1(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1775 = call <32 x i8> @hydride.node.1(<32 x i8> %1764, <32 x i8> %1769, <32 x i8> %1774) #17
Hydride Function: declare <32 x i8> @hydride.node.2(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %1804 = call <32 x i8> @hydride.node.2(<32 x i8> %1793, <32 x i8> %1798, <32 x i8> %1803) #17
Hydride Function: declare <32 x i8> @hydride.node.3(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2147 = call <32 x i8> @hydride.node.3(<32 x i8> %2124, <32 x i8> %2135, <32 x i8> %2146) #17
Hydride Function: declare <32 x i8> @hydride.node.4(<32 x i8>, <32 x i8>, <32 x i8>)

Generating Hydride Call:   %2174 = call <32 x i8> @hydride.node.4(<32 x i8> %2163, <32 x i8> %2168, <32 x i8> %2173) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'dilate3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
