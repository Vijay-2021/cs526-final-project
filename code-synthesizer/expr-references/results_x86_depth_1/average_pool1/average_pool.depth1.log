mkdir average_pool/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g average_pool/src/average_pool_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o average_pool/bin/average_pool_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./average_pool/bin/average_pool_generator \
	-t 0 \
	-o average_pool/bin \
	-g average_pool \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f average_pool target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_9590_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256) #(struct:uint16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-add '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_9590

base_9590_grammar.rkt
/tmp/base_9590_grammar.rkt
Writing [{ 
"name": "base_9590" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9590_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9590_spec.JSON /tmp/base_9590_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9590 ... 

Grammar:
#<procedure:base_9590>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x17b810edabe1156a986224e273bf174394190a287fbccbf4f10d19b387b284bf 256) (bv #xee3cb23f7a48666cf610a13928f050e50bfda3e3a3738a9a411889d6bf602f6b 256))
(vec-add (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x05f4c32c26297bd68e72c61b9caf6828a016ae0b232f568e3225a3894712b42a 256)
invoke-spec-lane with env: #((bv #x17b810edabe1156a986224e273bf174394190a287fbccbf4f10d19b387b284bf 256) (bv #xee3cb23f7a48666cf610a13928f050e50bfda3e3a3738a9a411889d6bf602f6b 256))
Concrete counter examples:
(#((bv #x17b810edabe1156a986224e273bf174394190a287fbccbf4f10d19b387b284bf 256) (bv #xee3cb23f7a48666cf610a13928f050e50bfda3e3a3738a9a411889d6bf602f6b 256)) #((bv #xedc2f25d28ec8f32cb4b593bf3e3efe4f2c8449ebfd15af53b392313b78ecc57 256) (bv #xc06152d12291d62f53792d99f294ff02a1f83887dde11ce7287975c6b1194fc2 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x17b810edabe1156a986224e273bf174394190a287fbccbf4f10d19b387b284bf 256) (bv #xee3cb23f7a48666cf610a13928f050e50bfda3e3a3738a9a411889d6bf602f6b 256))
Spec Produced:
(bv #xb42a 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xedc2f25d28ec8f32cb4b593bf3e3efe4f2c8449ebfd15af53b392313b78ecc57 256) (bv #xc06152d12291d62f53792d99f294ff02a1f83887dde11ce7287975c6b1194fc2 256))
Spec Produced:
(bv #x1c19 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 
rm: cannot remove '/tmp/base_5557_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 18

Test elapsed time: 
0
(vec-add '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(uint16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_5557

base_5557_grammar.rkt
/tmp/base_5557_grammar.rkt
Writing [{ 
"name": "base_5557" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5557_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5557_spec.JSON /tmp/base_5557_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5557 ... 

Grammar:
#<procedure:base_5557>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1bfcd33c4b9d2323c1e275c716fb2a0b 128))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x001b00fc00d3003c004b009d0023002300c100e2007500c7001600fb002a000b 256)
invoke-spec-lane with env: #((bv #x1bfcd33c4b9d2323c1e275c716fb2a0b 128))
Concrete counter examples:
(#((bv #x1bfcd33c4b9d2323c1e275c716fb2a0b 128)) #((bv #x50d28c87f73d7a2ce8ad350bb5935f29 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1bfcd33c4b9d2323c1e275c716fb2a0b 128))
Spec Produced:
(bv #x000b 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x50d28c87f73d7a2ce8ad350bb5935f29 128))
Spec Produced:
(bv #x0029 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2)

invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint16x16 '(buf uint8 128))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x01 8)) 128 8 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x01 8)) 128 8 16)
 (reg (bv #x00 8))
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (uint16x16 (buffer #<procedure:buffer-fn> 'uint8 128)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  
(reg 0)  256  16  );<16 x i16>

Writing [; hydride.node.0
; (reg 1) <16 x i8>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  
(reg 0)  256  16  );<16 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 1) <16 x i8>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 1)  128  8  16  );<16 x i16>
  
(reg 0)  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)]))
Expression before InlineLets: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)]))
Expression after InlineLets: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)]))
Expression before abstraction: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)]))
Input expression to synthesize: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp(t825, 1, 16) aligned(16, 0)]))
Cast operation into: uint16x16
Synthesis completed with return code:	0
Synthesis took 4.845188seconds ...
Expression after replacae abstraction: ((uint16x16)sum[ramp(0, 1, 16)] + uint16x16((uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)]))
Generating Call with type: uint16x16 and lanes 16
Ending synthesis for expr: 0

Optimized expression: (uint16x16)hydride.node.0((uint16x16)sum[ramp(0, 1, 16)], (uint8x16)input_bounded[ramp((((sum.s1.r12$x.rebased + t641)*32) + t651)*16, 1, 16) aligned(16, 0)])
Starting synthesis for expr: 1
Expression before lower intrinsic: max(min(uint8x16(min((uint16x16)rounding_mul_shift_right((uint16x16)sum[ramp(0, 1, 16)], x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0))), x16((uint16)16)), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Lower Intrinsic on call: rounding_mul_shift_right
Lowered Expression: uint16x16((uint32x16)rounding_shift_right((uint32x16)widening_mul((uint16x16)sum[ramp(0, 1, 16)], x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)16)))
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (uint32x16)shift_right((uint32x16)rounding_halving_add((uint32x16)widening_mul((uint16x16)sum[ramp(0, 1, 16)], x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)32767)), x16((uint32)15))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((uint32x16)shift_right((uint32x16)widening_mul((uint16x16)sum[ramp(0, 1, 16)], x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and((uint32x16)widening_mul((uint16x16)sum[ramp(0, 1, 16)], x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))))
rm: cannot remove '/tmp/base_3274_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 18
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 19
#hash((#(struct:buffer #<procedure:buffer-fn> uint16 16) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 16) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> uint16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:uint16x16 (buf uint8 128)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 1)) (#(struct:vec-add (buf uint16 256) (buf uint16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)))
here
(#(struct:vec-min #(struct:uint8x16 #(struct:vec-min #(struct:uint16x16 #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #f)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(vec-max '(buf uint8 128) '(buf uint8 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_3274

base_3274_grammar.rkt
/tmp/base_3274_grammar.rkt
Writing [{ 
"name": "base_3274" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3274_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3274_spec.JSON /tmp/base_3274_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3274 ... 

Grammar:
#<procedure:base_3274>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6ff8be2b28196842d03de5b421aa9219 128) (bv #x9e24c9a28c63282c9ff375c831560306 128))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x9ef8c9a28c636842d0f3e5c831aa9219 128)
invoke-spec-lane with env: #((bv #x6ff8be2b28196842d03de5b421aa9219 128) (bv #x9e24c9a28c63282c9ff375c831560306 128))
Concrete counter examples:
(#((bv #x6ff8be2b28196842d03de5b421aa9219 128) (bv #x9e24c9a28c63282c9ff375c831560306 128)) #((bv #xf2cab04506bae417b1b50c8e2701ca3d 128) (bv #x05ba90131d05c0bed5c455718ee1e5d0 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6ff8be2b28196842d03de5b421aa9219 128) (bv #x9e24c9a28c63282c9ff375c831560306 128))
Spec Produced:
(bv #x19 8)rm: cannot remove '/tmp/base_3907_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 21

Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xf2cab04506bae417b1b50c8e2701ca3d 128) (bv #x05ba90131d05c0bed5c455718ee1e5d0 128))
Spec Produced:
(bv #xd0 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf uint8 128) '(buf uint8 128))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 8) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Cost
6
here
(#(struct:uint8x16 #(struct:vec-min #(struct:uint16x16 #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #f)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(vec-min '(buf uint8 128) '(buf uint8 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_3907

base_3907_grammar.rkt
/tmp/base_3907_grammar.rkt
Writing [{ 
"name": "base_3907" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3907_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3907_spec.JSON /tmp/base_3907_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3907 ... 

Grammar:
#<procedure:base_3907>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1cc73e442f96ee3f30f14dde1d75c1dc 128) (bv #x2466c740c1f74720ccd706049ca2e03e 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x1c663e402f96472030d706041d75c13e 128)
invoke-spec-lane with env: #((bv #x1cc73e442f96ee3f30f14dde1d75c1dc 128) (bv #x2466c740c1f74720ccd706049ca2e03e 128))
Concrete counter examples:
(#((bv #x1cc73e442f96ee3f30f14dde1d75c1dc 128) (bv #x2466c740c1f74720ccd706049ca2e03e 128)) #((bv #xd1e89e745fd86a3cb021a1fbe0fe575a 128) (bv #xe53c52a0d3907ecb609c041717f2757a 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1cc73e442f96ee3f30f14dde1d75c1dc 128) (bv #x2466c740c1f74720ccd706049ca2e03e 128))
Spec Produced:
(bv #x3e 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd1e89e745fd86a3cb021a1fbe0fe575a 128) (bv #xe53c52a0d3907ecb609c041717f2757a 128))
Spec Produced:
(bv #x5a 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf uint8 128) '(buf uint8 128))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 128 8) 1)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8)
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8)
Cost
4
here
(#(struct:vec-min #(struct:uint16x16 #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #f))))
=======================================
(uint8x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint8x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(uint8x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_6665

base_6665_grammar.rkt
/tmp/base_6665_grammar.rkt
Writing [{ 
"name": "base_6665" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6665_spec.JSON
rm: cannot remove '/tmp/base_6665_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 10
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm256_cvtsepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtusepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 10

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6665_spec.JSON /tmp/base_6665_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6665 ... 

Grammar:
#<procedure:base_6665>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x31c23713256bff4520dcc834e91ef32560fa17869d94d68e309b4b7a7180c493 256))
(uint8x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xc2136b45dc341e25fa86948e9b7a8093 128)
invoke-spec-lane with env: #((bv #x31c23713256bff4520dcc834e91ef32560fa17869d94d68e309b4b7a7180c493 256))
Concrete counter examples:
(#((bv #x31c23713256bff4520dcc834e91ef32560fa17869d94d68e309b4b7a7180c493 256)) #((bv #x9f086546d9be56e807c896f63af93f448bfd95450ed7423d25398085f8fd298d 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x31c23713256bff4520dcc834e91ef32560fa17869d94d68e309b4b7a7180c493 256))
Spec Produced:
(bv #x93 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9f086546d9be56e807c896f63af93f448bfd95450ed7423d25398085f8fd298d 256))
Spec Produced:
(bv #x8d 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$4)

invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
invoke-spec-lane with env: #(sym_bv$4)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(uint8x16 '(buf uint16 256))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
Cost
4
here
(#(struct:uint16x16 #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #f)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-min '(buf uint16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_1157
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_min_epu16 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4

base_1157_grammar.rkt
/tmp/base_1157_grammar.rkt
Writing [{ 
"name": "base_1157" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1157_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1157_spec.JSON /tmp/base_1157_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1157 ... 

Grammar:
#<procedure:base_1157>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb91db6c8c93f1a110b275a74882f3976ee3939eb039b8e4f5a85f44949aefdde 256) (bv #x3bb2f65e02904be619addb1d2194041b6ea8d921b54fa7a249cf7d13a0cdab58 256))
(vec-min (buffer #<procedure:buffer-fn> 'uint16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x3bb2b6c802901a110b275a742194041b6ea839eb039b8e4f49cf7d1349aeab58 256)
invoke-spec-lane with env: #((bv #xb91db6c8c93f1a110b275a74882f3976ee3939eb039b8e4f5a85f44949aefdde 256) (bv #x3bb2f65e02904be619addb1d2194041b6ea8d921b54fa7a249cf7d13a0cdab58 256))
Concrete counter examples:
(#((bv #xb91db6c8c93f1a110b275a74882f3976ee3939eb039b8e4f5a85f44949aefdde 256) (bv #x3bb2f65e02904be619addb1d2194041b6ea8d921b54fa7a249cf7d13a0cdab58 256)) #((bv #xa506f5cd2ecad9483cf85b72be4db5e113d2b28281fa82f246a338c89fd45847 256) (bv #x206d86da19cbda2c0b525223bafe23115d77a4656d6d507d19753f6a7ea4bee2 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb91db6c8c93f1a110b275a74882f3976ee3939eb039b8e4f5a85f44949aefdde 256) (bv #x3bb2f65e02904be619addb1d2194041b6ea8d921b54fa7a249cf7d13a0cdab58 256))
Spec Produced:
(bv #xab58 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xa506f5cd2ecad9483cf85b72be4db5e113d2b28281fa82f246a338c89fd45847 256) (bv #x206d86da19cbda2c0b525223bafe23115d77a4656d6d507d19753f6a7ea4bee2 256))
Spec Produced:
(bv #x5847 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$5 sym_bv$6)

invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
invoke-spec-lane with env: #(sym_bv$5 sym_bv$6)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf uint16 256) '(buf uint16 256))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-immrm: cannot remove '/tmp/base_3000_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
 (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))))
=======================================
(uint16x16 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint16x16 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(uint16x16 '(buf uint32 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_3000

base_3000_grammar.rkt
/tmp/base_3000_grammar.rkt
Writing [{ 
"name": "base_3000" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3000_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3000_spec.JSON /tmp/base_3000_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3000 ... 

Grammar:
#<procedure:base_3000>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xacf94c3b97f1e3b49273b7758b7016f126e4a776bc0fdc16f8c1218d82869d324cc0edac01a79adb6f032fa7a298e22beb98e1eef39eb34c2b350854b15b884e 512))
(uint16x16 (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x4c3be3b4b77516f1a776dc16218d9d32edac9adb2fa7e22be1eeb34c0854884e 256)
invoke-spec-lane with env: #((bv #xacf94c3b97f1e3b49273b7758b7016f126e4a776bc0fdc16f8c1218d82869d324cc0edac01a79adb6f032fa7a298e22beb98e1eef39eb34c2b350854b15b884e 512))
Concrete counter examples:
(#((bv #xacf94c3b97f1e3b49273b7758b7016f126e4a776bc0fdc16f8c1218d82869d324cc0edac01a79adb6f032fa7a298e22beb98e1eef39eb34c2b350854b15b884e 512)) #((bv #x53296687cbff79a5153d5b695bf98d8eaaa1ba2f2d54d5e2c8610ececebae2752512e809a1524735e97811153329f1acdeacba8d2a77d234985aca2e97a06a31 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xacf94c3b97f1e3b49273b7758b7016f126e4a776bc0fdc16f8c1218d82869d324cc0edac01a79adb6f032fa7a298e22beb98e1eef39eb34c2b350854b15b884e 512))
Spec Produced:
(bv #x884e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x53296687cbff79a5153d5b695bf98d8eaaa1ba2f2d54d5e2c8610ececebae2752512e809a1524735e97811153329f1acdeacba8d2a77d234985aca2e97a06a31 512))
Spec Produced:
(bv #x6a31 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7)

invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
invoke-spec-lane with env: #(sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(uint16x16 '(buf uint32 512))
#(#t #(struct:_mm_cvtepi64_epi32_dslrm: cannot remove '/tmp/base_7148_spec.JSON': No such file or directory
Pruning _mm512_srli_epi32 as it has an argument of size 8 which is smaller than 512
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu16_epi32 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 9 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srlv_epi32 with score: 5 belonging to target agnostic class _mm_srlv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 #(struct:reg (bv #x0 4)) 256 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_7148

base_7148_grammar.rkt
/tmp/base_7148_grammar.rkt
Writing [{ 
"name": "base_7148" , 
"semantics": [ "(bvlshr zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7148_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7148_spec.JSON /tmp/base_7148_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7148 ... 

Grammar:
#<procedure:base_7148>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Concrete counter examples:
(#((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512)) #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
invoke-spec-lane with env: #(sym_bv$8 sym_bv$9)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec with env: #(sym_bv$10 sym_bv$11)
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvlshr (extract 511 480 sym_bv$10) (extract 511 480 sym_bv$11)) (bvlshr (extract 479 448 sym_bv$10) (extract 479 448 sym_bv$11))) (bvlshr (extract 447 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$10 (bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512)]
 [sym_bv$11 (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512)] ...)
Verification failed :(
#((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512))
invoke-spec with env: #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x27b7fcef000000ff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff 512)
(bv #x27b7fcef000000ff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff 512)
Verification failed ...
	spec produced: (bv #x27b7fcef000000ff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x27b7fcef000000ff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Concrete counter examples:
(#((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512)) #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512)) #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512))
Spec Produced:
(bv #x0000ffff 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) 512 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_srlv_epi32_dsl
 (reg (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 512
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12 sym_bv$13)

invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
invoke-spec-lane with env: #(sym_bv$12 sym_bv$13)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$14 sym_bv$15)

invoke-spec with env: #(sym_bv$14 sym_bv$15)
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvlshr (extract 511 480 sym_bv$14) (extract 511 480 sym_bv$15)) (bvlshr (extract 479 448 sym_bv$14) (extract 479 448 sym_bv$15))) (bvlshr (extract 447 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$14 (bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512)]
 [sym_bv$15 (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512)] ...)
Verification failed :(
#((bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512) (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512))
invoke-spec with env: #((bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512) (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x0158bff60000003e0000000600000ffe000003fe0000fffe0000fffe7f7efffe0000fffe0000fffe0000fffe0000fff6000007fa0000fffefefefffe2efefffe 512)
(bv #x0158bff60000003e0000000600000ffe000003fe0000fffe0000fffe7f7efffe0000fffe0000fffe0000fffe0000fff6000007fa0000fffefefefffe2efefffe 512)
Verification failed ...
	spec produced: (bv #x0158bff60000003e0000000600000ffe000003fe0000fffe0000fffe7f7efffe0000fffe0000fffe0000fffe0000fff6000007fa0000fffefefefffe2efefffe 512) 512 
	synthesized result produced: (bv #x03ffffff0000003f0000000700000fff000003ff0000ffff0000ffffffffffff0000ffff0000ffff0000ffff0000ffff000007ff0000ffffffffffffffffffff 512) 512

invoke-spec with env: #((bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512) (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x0158bff60000003e0000000600000ffe000003fe0000fffe0000fffe7f7efffe0000fffe0000fffe0000fffe0000fff6000007fa0000fffefefefffe2efefffe 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
(vec-shr (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Concrete counter examples:
(#((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512)) #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512)) #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512)) #((bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512) (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512)))
Failing lanes examples:
(0 0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x76878fca447fc57430abe28c8750578536c0fb0ac41234ab858efd99ce6a0c876f8cfa149ac67d45c508239f8e06494403ded2dffb098ef5e684b7958fd9e018 512) (bv #x5e989b6452a3f7a66f2a2f229906d879c8b00d7fa8594c85d441f1bf50a4fecc51a431b8f99c63c09fa367dccaf03c00de7f5fa1d9aba93e36481a806cec7c51 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd77315963e5ddba4317281ace8409ebc48ae781cf9b847ef76dd469011560c4529cc03f35279a4aa8551378c988e1774f7f5c5b6ee73aef72578eb073299c85b 512) (bv #x95cd6f44fead923f592766b271ac3967baa1f8f28ed6f363a8dffb7a928544d2ea56eb423c5149eb0c0c36751f431cd5e7dbf3ed942bed32163ac49f11c8df7e 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x9edff3bcff000000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000 512) (bv #x00000002000000180000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010 512))
Spec Produced:
(bv #x0000ffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x562ffd80f8000000c0000000ffe00000ff800000fffe0000fffe00007f7efffefffe0000fffe0000fffe0000fff60000ff400000fffe0000fefefffe2efefffe 512) (bv #x000000060000001a0000001d00000014000000160000001000000010000000000000001000000010000000100000001000000015000000100000000000000000 512))
Spec Produced:
(bv #x2efefffe 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_srlv_epi32_dsl
 (regrm: cannot remove '/tmp/base_6271_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu16_epi32 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 8 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_add_epi32 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (reg (bv #x0 4))
 512
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$16 sym_bv$17)

invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
invoke-spec-lane with env: #(sym_bv$16 sym_bv$17)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-shr '(buf uint32 512) '(buf uint32 512))
#(#t #(struct:_mm_srlv_epi32_dsl #(struct:reg (bv #x1 4)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:reg (bv #x0 4)) 512 32 32) 0)
Synthesis step completed!
Solution
(_mm_srlv_epi32_dsl
 (reg (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (reg (bv #x0 4))
 512
 32
 32)
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32)
Cost
11
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-add '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_6271

base_6271_grammar.rkt
/tmp/base_6271_grammar.rkt
Writing [{ 
"name": "base_6271" , 
"semantics": [ "(extract bvadd zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6271_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6271_spec.JSON /tmp/base_6271_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6271 ... 

Grammar:
#<procedure:base_6271>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1a318538741f9418b86ea668e2d0a6e530b976b4dbb632f1ab76b5d46277501647bfa3eff11f8c3415c802560ff0c36686d721878eacce8675087be0afaf76fc 512) (bv #x485c8ada355b2602dcea63a22a4070a874fd34057eec079120a422a13a0031800b8b2a081099a8caac018d80980de7131c981308c71276396d9c3b9e35105206 512))
(vec-add (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x628e1012a97aba1a95590a0a0d11178da5b6aab95aa23a82cc1ad8759c778196534acdf701b934fec1c98fd6a7feaa79a36f348f55bf44bfe2a4b77ee4bfc902 512)
invoke-spec-lane with env: #((bv #x1a318538741f9418b86ea668e2d0a6e530b976b4dbb632f1ab76b5d46277501647bfa3eff11f8c3415c802560ff0c36686d721878eacce8675087be0afaf76fc 512) (bv #x485c8ada355b2602dcea63a22a4070a874fd34057eec079120a422a13a0031800b8b2a081099a8caac018d80980de7131c981308c71276396d9c3b9e35105206 512))
Concrete counter examples:
(#((bv #x1a318538741f9418b86ea668e2d0a6e530b976b4dbb632f1ab76b5d46277501647bfa3eff11f8c3415c802560ff0c36686d721878eacce8675087be0afaf76fc 512) (bv #x485c8ada355b2602dcea63a22a4070a874fd34057eec079120a422a13a0031800b8b2a081099a8caac018d80980de7131c981308c71276396d9c3b9e35105206 512)) #((bv #x4e67e480fd588351ab7418874832d09a92aa9e80e89a5b884df1400a92f8e1dd9696643e720a310f605d066ab5edccc5cee78a27c0b65d4fba3d9d148296726c 512) (bv #xd8a217be774f988d38c11479084b105d76b9064061941c6375926f89b9272e6cb959dcc27878b2c55c8ea8942732339bbb8901ce0bbbdefcc6a9777e428b57e6 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1a318538741f9418b86ea668e2d0a6e530b976b4dbb632f1ab76b5d46277501647bfa3eff11f8c3415c802560ff0c36686d721878eacce8675087be0afaf76fc 512) (bv #x485c8ada355b2602dcea63a22a4070a874fd34057eec079120a422a13a0031800b8b2a081099a8caac018d80980de7131c981308c71276396d9c3b9e35105206 512))
Spec Produced:
(bv #xe4bfc902 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4e67e480fd588351ab7418874832d09a92aa9e80e89a5b884df1400a92f8e1dd9696643e720a310f605d066ab5edccc5cee78a27c0b65d4fba3d9d148296726c 512) (bv #xd8a217be774f988d38c11479084b105d76b9064061941c6375926f89b9272e6cb959dcc27878b2c55c8ea8942732339bbb8901ce0bbbdefcc6a9777e428b57e6 512))
Spec Produced:
(bv #xc521ca52 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$18 sym_bv$19)

invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
invoke-spec-lane with env: #(sym_bv$18 sym_bv$19)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf uint32 512) '(buf uint32 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-shr #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(rm: cannot remove '/tmp/base_7082_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi32 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu16_epi32 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 10 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_mullo_epi32 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
Adding:  _mm512_dpbusds_epi32 with score: 6 belonging to target agnostic class _mm_dpbusds_epi32
Adding:  _mm512_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_mulhi_epi32 with score: 6 belonging to target agnostic class _mm512_mulhi_epi32
Adding:  _mm512_mulhi_epu32 with score: 6 belonging to target agnostic class _mm512_mulhi_epi32
Adding:  _mm512_fmadd_epi32 with score: 6 belonging to target agnostic class _mm512_fmadd_epi32
Adding:  _mm512_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm512_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm512_dpbusd_epi32 with score: 6 belonging to target agnostic class _mm256_dpbusd_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 11
struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-add '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_srlv_epi32_dsl
 (reg (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (reg (bv #x0 4))
 512
 32
 32)
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32)
Cost
11
here
(#(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-mul '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_7082

base_7082_grammar.rkt
/tmp/base_7082_grammar.rkt
Writing [{ 
"name": "base_7082" , 
"semantics": [ "(extract bvmul zero-extend sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7082_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7082_spec.JSON /tmp/base_7082_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7082 ... 

Grammar:
#<procedure:base_7082>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf8b3c5f66c9f40a5e453c857f5d5e502d51677f1067c35a160442f46709cd80607d9e59d92bee195cd2f52e6fd59cec010f46375ead8277e2150d803ae1dec8d 512) (bv #x4496a363bf600f06c5464034800cff1bcc4308881e382edfa053e521338d5720edcf9be4a22aa9e6b6a5e20960b26f8430aff82ae388a4f49be503294735eacd 512))
(vec-mul (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #xfab5302239652ede0de471acb8c4253657c24008910da53f7ac5b6068e530ac0ef098ed426dc08def016f6165473db00756ca93204425c185429a17bdc604ee9 512)
invoke-spec-lane with env: #((bv #rm: cannot remove '/tmp/base_4818_spec.JSON': No such file or directory
xf8b3c5f66c9f40a5e453c857f5d5e502d51677f1067c35a160442f46709cd80607d9e59d92bee195cd2f52e6fd59cec010f46375ead8277e2150d803ae1dec8d 512) (bv #x4496a363bf600f06c5464034800cff1bcc4308881e382edfa053e521338d5720edcf9be4a22aa9e6b6a5e20960b26f8430aff82ae388a4f49be503294735eacd 512))
Concrete counter examples:
(#((bv #xf8b3c5f66c9f40a5e453c857f5d5e502d51677f1067c35a160442f46709cd80607d9e59d92bee195cd2f52e6fd59cec010f46375ead8277e2150d803ae1dec8d 512) (bv #x4496a363bf600f06c5464034800cff1bcc4308881e382edfa053e521338d5720edcf9be4a22aa9e6b6a5e20960b26f8430aff82ae388a4f49be503294735eacd 512)) #((bv #x49684fc1fa1802891fe2bb927fe6b9bd78e1c07591e763dbc2a0744f9c0f31b61cfa290303a7aa6c5a3117a2f1512f527b2e6ac2641431da38c9a6579c71f1e8 512) (bv #x7d1de08c67e3dc15fde66df8a7b1771180c0334ab8910213acee499bb0a3c087d7ec5738c52ec0f06150df1ef3dca73e7865a5ae4a5d0f735103cc55754c98b5 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf8b3c5f66c9f40a5e453c857f5d5e502d51677f1067c35a160442f46709cd80607d9e59d92bee195cd2f52e6fd59cec010f46375ead8277e2150d803ae1dec8d 512) (bv #x4496a363bf600f06c5464034800cff1bcc4308881e382edfa053e521338d5720edcf9be4a22aa9e6b6a5e20960b26f8430aff82ae388a4f49be503294735eacd 512))
Spec Produced:
(bv #xdc604ee9 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x49684fc1fa1802891fe2bb927fe6b9bd78e1c07591e763dbc2a0744f9c0f31b61cfa290303a7aa6c5a3117a2f1512f527b2e6ac2641431da38c9a6579c71f1e8 512) (bv #x7d1de08c67e3dc15fde66df8a7b1771180c0334ab8910213acee499bb0a3c087d7ec5738c52ec0f06150df1ef3dca73e7865a5ae4a5d0f735103cc55754c98b5 512))
Spec Produced:
(bv #x1d11c908 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$20 sym_bv$21)

invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
invoke-spec-lane with env: #(sym_bv$20 sym_bv$21)
verify-across-lanes returned #t ... 

Test elapsed time: 
4
(vec-mul '(buf uint32 512) '(buf uint32 512))
#(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32 0 64) 4)
Synthesis step completed!
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(uint32x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_4818

base_4818_grammar.rkt
/tmp/base_4818_grammar.rkt
Writing [{ 
"name": "base_4818" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4818_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4818_spec.JSON /tmp/base_4818_grammar.rkt 16 0Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 6 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x8 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepu16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 5

Generated Grammar File
Dynamically importing from base_4818 ... 

Grammar:
#<procedure:base_4818>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x421f050a696b99af3f624d36ac976d5a50ded3eb606b5783128468b6f6187b96 256))
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000421f0000050a0000696b000099af00003f6200004d360000ac9700006d5a000050de0000d3eb0000606b0000578300001284000068b60000f61800007b96 512)
invoke-spec-lane with env: #((bv #x421f050a696b99af3f624d36ac976d5a50ded3eb606b5783128468b6f6187b96 256))
Concrete counter examples:
(#((bv #x421f050a696b99af3f624d36ac976d5a50ded3eb606b5783128468b6f6187b96 256)) #((bv #x20902ba7c6114603955eac78a4cf3758743bb32c4127ce4dfe95032fc1ccb115 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x421f050a696b99af3f624d36ac976d5a50ded3eb606b5783128468b6f6187b96 256))
Spec Produced:
(bv #x00007b96 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x20902ba7c6114603955eac78a4cf3758743bb32c4127ce4dfe95032fc1ccb115 256))
Spec Produced:
(bv #x0000b115 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$22)

invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
invoke-spec-lane with env: #(sym_bv$22)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(uint32x16 '(buf uint16 256))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 16 32) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))
=======================================
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(uint32x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Hashed expression
(x16 '(buf uint16 16))
Leaves are bitvectors of sizes:rm: cannot remove '/tmp/base_6416_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

(16)
get-expr-grammar with base_name: base_6416

base_6416_grammar.rkt
/tmp/base_6416_grammar.rkt
Writing [{ 
"name": "base_6416" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_16"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6416_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6416_spec.JSON /tmp/base_6416_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6416 ... 

Grammar:
#<procedure:base_6416>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf9f3 16))
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Spec result
(bv #xf9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3f9f3 256)
invoke-spec-lane with env: #((bv #xf9f3 16))
Concrete counter examples:
(#((bv #xf9f3 16)) #((bv #x78f6 16)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf9f3 16))
Spec Produced:
(bv #xf9f3 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x78f6 16))
Spec Produced:
(bv #x78f6 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$23)

invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
invoke-spec-lane with env: #(sym_bv$23)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 '(buf uint16 16))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 16)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
 (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32rm: cannot remove '/tmp/base_525_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
)
 (_mm256_cvtepu16_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_525

base_525_grammar.rkt
/tmp/base_525_grammar.rkt
Writing [{ 
"name": "base_525" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_525_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_525_spec.JSON /tmp/base_525_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_525 ... 

Grammar:
#<procedure:base_525>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00000001 32) #f))
Spec result
(bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00000001 32) #f))
#(#t #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:rm: cannot remove '/tmp/base_997_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

(vec-shr
 (vec-mul
  (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
  (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm_srlv_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
  (_mm256_cvtepu16_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 512
 32
 32)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_srlv_epi32_dsl
 (reg (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (reg (bv #x0 4))
 512
 32
 32)
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32)
Cost
11
here
()
=======================================
(x16 (int-imm (bv #x00007fff 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00007fff 32) #f))
Hashed expression
(x16 (int-imm (bv #x00007fff 32) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_997

base_997_grammar.rkt
/tmp/base_997_grammar.rkt
Writing [{ 
"name": "base_997" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[32767, 32]] 
}
] to file /tmp/base_997_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_997_spec.JSON /tmp/base_997_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_997 ... 

Grammar:
#<procedure:base_997>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00007fff 32) #f))
Spec result
(bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #x00007fff 32) #f))
#(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 1)
Synthesis step completed!
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00007fff 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x16 (int-imm (bv #x00007fff 32) #f))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm_srlv_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
 512
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-mul
   (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
   (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
  (x16 (int-imm (bv #x00000001 32) #f)))
 (vec-shr
  (x16 (int-imm (bv #x00007fff 32) #f))
  (x16 (int-imm (bv #x00000001 32) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_srlv_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
   (_mm256_cvtepu16_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  512
  32
  32)
 (_mm_srlv_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
  512
  32
  32)
 512
 32)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_srlv_epi32_dsl
 (reg (bv #x1 4))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (reg (bv #x0 4))
 512
 32
 32)
(_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32)
Cost
11
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(rm: cannot remove '/tmp/base_6463_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_andnot_epi32 with score: 5 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_epi64 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_si512 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_and_epi32 with score: 5 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_si512 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi64 with score: 3 belonging to target agnostic class _mm256_and_si256
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 6
vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-add '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-add '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-mul #(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-bwand '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_6463

base_6463_grammar.rkt
/tmp/base_6463_grammar.rkt
Writing [{ 
"name": "base_6463" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6463_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6463_spec.JSON /tmp/base_6463_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6463 ... 

Grammar:
#<procedure:base_6463>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe92ba6cad73459a4e64c974452ca10ff8bd1415321577f2a24acdc0ea008984ffc0051cea7ea2ceff73418af65e98478729b94e5ebe1b61bede076cbac288c21 512) (bv #x89aa478227c076d54fed214673f16472ade80436609ee7213fae3af9974b3d9e1b443f2c088dde36827749dd0db78b2479f0e36525cc1bcf63e09781fa1af5d6 512))
(vec-bwand (buffer #<procedure:buffer-fn> 'uint32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x892a068207005084464c014452c0007289c000122016672024ac18088008180e1800110c00880c268234088d05a180207090806521c0120b61e01681a8088400 512)
invoke-spec-lane with env: #((bv #xe92ba6cad73459a4e64c974452ca10ff8bd1415321577f2a24acdc0ea008984ffc0051cea7ea2ceff73418af65e98478729b94e5ebe1b61bede076cbac288c21 512) (bv #x89aa478227c076d54fed214673f16472ade80436609ee7213fae3af9974b3d9e1b443f2c088dde36827749dd0db78b2479f0e36525cc1bcf63e09781fa1af5d6 512))
Concrete counter examples:
(#((bv #xe92ba6cad73459a4e64c974452ca10ff8bd1415321577f2a24acdc0ea008984ffc0051cea7ea2ceff73418af65e98478729b94e5ebe1b61bede076cbac288c21 512) (bv #x89aa478227c076d54fed214673f16472ade80436609ee7213fae3af9974b3d9e1b443f2c088dde36827749dd0db78b2479f0e36525cc1bcf63e09781fa1af5d6 512)) #((bv #x4e74f4dcfa97a479a1434a84d91d1749ba5564a37b5c273dfa0b2c9a55d6b2640c47c2d392bda48d0d97a1a2bfeee2cf7956b74bf5061e6b09c0b2e1603ed7f1 512) (bv #x51ad7fc61b1f3a5c55d804bef8726abd4592ef935e61d3bac9b91662fc50d78d2a87f98e7dab508cb45fb653ffe460d124c3099a384b52c9a8f9524527667de4 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe92ba6cad73459a4e64c974452ca10ff8bd1415321577f2a24acdc0ea008984ffc0051cea7ea2ceff73418af65e98478729b94e5ebe1b61bede076cbac288c21 512) (bv #x89aa478227c076d54fed214673f16472ade80436609ee7213fae3af9974b3d9e1b443f2c088dde36827749dd0db78b2479f0e36525cc1bcf63e09781fa1af5d6 512))
Spec Produced:
(bv #xa8088400 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4e74f4dcfa97a479a1434a84d91d1749ba5564a37b5c273dfa0b2c9a55d6b2640c47c2d392bda48d0d97a1a2bfeee2cf7956b74bf5061e6b09c0b2e1603ed7f1 512) (bv #x51ad7fc61b1f3a5c55d804bef8726abd4592ef935e61d3bac9b91662fc50d78d2a87f98e7dab508cb45fb653ffe460d124c3099a384b52c9a8f9524527667de4 512))
Spec Produced:
(bv #x202655e0 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$24 sym_bv$25)

invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-bwand '(buf uint32 512) '(buf uint32 512))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:uint32x16 #(struct:buffer #<procedure:buffer-fn> uint16 256)) #(struct:uint32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-mul '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(uint32x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint16 16)))
=======================================
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(uint32x16 '(buf uint16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Hashed expression
(x16 '(buf uint16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint16 16)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
 (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
 (_mm256_cvtepu16_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-mul
  (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
  (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
  (_mm256_cvtepu16_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 512
 32)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x00007fff 32) #f)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'uint32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-bwand '(buf uint32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x00007fff 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00007fff 32) #f))
Hashed expression
(x16 (int-imm (bv #x00007fff 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00007fff 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x16 (int-imm (bv #x00007fff 32) #f))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-mul
   (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
   (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
  (x16 (int-imm (bv #x00000001 32) #f)))
 (vec-bwand
  (x16 (int-imm (bv #x00007fff 32) #f))
  (x16 (int-imm (bv #x00000001 32) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
   (_mm256_cvtepu16_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  512
  32)
 (_mm256_and_si256_dsl
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  512
  32)
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-mul
    (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
    (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
   (x16 (int-imm (bv #x00000001 32) #f)))
  (vec-bwand
   (x16 (int-imm (bv #x00007fff 32) #f))
   (x16 (int-imm (bv #x00000001 32) #f))))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
    (_mm256_cvtepu16_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   512
   32)
  (_mm256_and_si256_dsl
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   512
   32)
  512
  32)
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-mul
     (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
     (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
    (x16 (int-imm (bv #x00000001 32) #f)))
   (vec-bwand
    (x16 (int-imm (bv #x00007fff 32) #f))
    (x16 (int-imm (bv #x00000001 32) #f))))
  (x16 (int-imm (bv #x00000001 32) #f)))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm_srlv_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
     (_mm256_cvtepu16_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    512
    32)
   (_mm256_and_si256_dsl
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    512
    32)
   512
   32)
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  512
  32)
 512
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-mul
    (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
    (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
   (x16 (int-imm (bv #x00000001 32) #f)))
  (vec-shr
   (x16 (int-imm (bv #x00007fff 32) #f))
   (x16 (int-imm (bv #x00000001 32) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-mul
      (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
      (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
     (x16 (int-imm (bv #x00000001 32) #f)))
    (vec-bwand
     (x16 (int-imm (bv #x00007fff 32) #f))
     (x16 (int-imm (bv #x00000001 32) #f))))
   (x16 (int-imm (bv #x00000001 32) #f)))
  (x16 (int-imm (bv #x00000001 32) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm_srlv_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
    (_mm256_cvtepu16_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   512
   32
   32)
  (_mm_srlv_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
   512
   32
   32)
  512
  32)
 (_mm_srlv_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
      (_mm256_cvtepu16_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     512
     32)
    (_mm256_and_si256_dsl
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     512
     32)
    512
    32)
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   512
   32)
  512
  32
  32)
 512
 rm: cannot remove '/tmp/base_9584_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0000000f 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0000000f 32) #f))
Hashed expression
(x16 (int-imm (bv #x0000000f 32) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9584

base_9584_grammar.rkt
/tmp/base_9584_grammar.rkt
Writing [{ 
"name": "base_9584" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[15, 32]] 
}
] to file /tmp/base_9584_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9584_spec.JSON /tmp/base_9584_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9584 ... 

Grammar:
#<procedure:base_9584>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Verification failed ...
	spec produced: (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512) 512 
	synthesized result produced: (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512) 512

invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Difference  Predicate
'((0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0000000f 32) #f))
#(#t #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
(lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0000000f 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-mul
     (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
     (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
    (x16 (int-imm (bv #x00000001 32) #f)))
   (vec-shr
    (x16 (int-imm (bv #x00007fff 32) #f))
    (x16 (int-imm (bv #x00000001 32) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-mul
       (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
       (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
      (x16 (int-imm (bv #x00000001 32) #f)))
     (vec-bwand
      (x16 (int-imm (bv #x00007fff 32) #f))
      (x16 (int-imm (bv #x00000001 32) #f))))
    (x16 (int-imm (bv #x00000001 32) #f)))
   (x16 (int-imm (bv #x00000001 32) #f))))
 (x16 (int-imm (bv #x0000000f 32) #f)))
Sub-expression Synthesis completed:
(_mm_srlv_epi32_dsl
 (lit
  (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm_srlv_epi32_dsl
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
     (_mm256_cvtepu16_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    512
    32
    32)
   (_mm_srlv_epi32_dsl
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
    512
    32
    32)
   512
   32)
  (_mm_srlv_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
       (_mm256_cvtepu16_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      512
      32)
     (_mm256_and_si256_dsl
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      512
      32)
     512
     32)
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    512
    32)
   512
   32
   32)
  512
  32)
 512
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) 512 32 32))
========================================
Original Halide Sub-Expression:
(uint16x16
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-mul
      (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
      (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
     (x16 (int-imm (bv #x00000001 32) #f)))
    (vec-shr
     (x16 (int-imm (bv #x00007fff 32) #f))
     (x16 (int-imm (bv #x00000001 32) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-mul
        (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
        (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
       (x16 (int-imm (bv #x00000001 32) #f)))
      (vec-bwand
       (x16 (int-imm (bv #x00007fff 32) #f))
       (x16 (int-imm (bv #x00000001 32) #f))))
     (x16 (int-imm (bv #x00000001 32) #f)))
    (x16 (int-imm (bv #x00000001 32) #f))))
  (x16 (int-imm (bv #x0000000f 32) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm_srlv_epi32_dsl
  (lit
   (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm_srlv_epi32_dsl
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
      (_mm256_cvtepu16_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     512
     32
     32)
    (_mm_srlv_epi32_dsl
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
     512
     32
     32)
    512
    32)
   (_mm_srlv_epi32_dsl
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
        (_mm256_cvtepu16_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       512
       32)
      (_mm256_and_si256_dsl
       (lit
        (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       512
       32)
      512
      32)
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     512
     32)
    512
    32
    32)
   512
   32)
  512
  32
  32)
 256
 16
 32
 0)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00ff 16) #f))
Vectorization factor for sub expression 16
rm: cannot remove '/tmp/base_9614_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

Synthesizing sub-expression
(x16 (int-imm (bv #x00ff 16) #f))
Hashed expression
(x16 (int-imm (bv #x00ff 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_9614

base_9614_grammar.rkt
/tmp/base_9614_grammar.rkt
Writing [{ 
"name": "base_9614" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_9614_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9614_spec.JSON /tmp/base_9614_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9614 ... 

Grammar:
#<procedure:base_9614>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00ff 16) #f))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00ff 16) #f))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00ff 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) 512 32 32) 256 16 32 0) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (uint16x16
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-mul
       (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
       (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
      (x16 (int-imm (bv #x00000001 32) #f)))
     (vec-shr
      (x16 (int-imm (bv #x00007fff 32) #f))
      (x16 (int-imm (bv #x00000001 32) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-mul
         (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
         (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
        (x16 (int-imm (bv #x00000001 32) #f)))
       (vec-bwand
        (x16 (int-imm (bv #x00007fff 32) #f))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (x16 (int-imm (bv #x00000001 32) #f)))
     (x16 (int-imm (bv #x00000001 32) #f))))
   (x16 (int-imm (bv #x0000000f 32) #f))))
 (x16 (int-imm (bv #x00ff 16) #f)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
 (_mm_cvtepi64_epi32_dsl
  (_mm_srlv_epi32_dsl
   (lit
    (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm_srlv_epi32_dsl
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
       (_mm256_cvtepu16_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      512
      32
      32)
     (_mm_srlv_epi32_dsl
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
      512
      32
      32)
     512
     32)
    (_mm_srlv_epi32_dsl
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
         (_mm256_cvtepu16_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        512
        32)
       (_mm256_and_si256_dsl
        (lit
         (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        512
        32)
       512
       32)
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      512
      32)
     512
     32
     32)
    512
    32)
   512
   32
   32)
  256
  16
  32
  0)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) 512 32 32) 256 16 32 0) 256 16))
========================================
Original Halide Sub-Expression:
(uint8x16
 (vec-min
  (uint16x16
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-mul
        (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
        (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
       (x16 (int-imm (bv #x00000001 32) #f)))
      (vec-shr
       (x16 (int-imm (bv #x00007fff 32) #f))
       (x16 (int-imm (bv #x00000001 32) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-mul
          (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
          (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (vec-bwand
         (x16 (int-imm (bv #x00007fff 32) #f))
         (x16 (int-imm (bv #x00000001 32) #f))))
       (x16 (int-imm (bv #x00000001 32) #f)))
      (x16 (int-imm (bv #x00000001 32) #f))))
    (x16 (int-imm (bv #x0000000f 32) #f))))
  (x16 (int-imm (bv #x00ff 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_m_pminub_dsl
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
  (_mm_cvtepi64_epi32_dsl
   (_mm_srlv_epi32_dsl
    (lit
     (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm_srlv_epi32_dsl
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
        (_mm256_cvtepu16_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       512
       32
       32)
      (_mm_srlv_epi32_dsl
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
       (lit
        (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
       512
       32
       32)
      512
      32)
     rm: cannot remove '/tmp/base_4725_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
Actual Broadcast ops 11
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_set1_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 11
(_mm_srlv_epi32_dsl
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
          (_mm256_cvtepu16_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         512
         32)
        (_mm256_and_si256_dsl
         (lit
          (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         512
         32)
        512
        32)
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       512
       32)
      512
      32
      32)
     512
     32)
    512
    32
    32)
   256
   16
   32
   0)
  256
  16)
 128
 8
 16
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x16 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
get-expr-grammar with base_name: base_4725

base_4725_grammar.rkt
/tmp/base_4725_grammar.rkt
Writing [{ 
"name": "base_4725" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4725_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4725_spec.JSON /tmp/base_4725_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4725 ... 

Grammar:
#<procedure:base_4725>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe8 8))
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Spec result
(bv #xe8e8e8e8e8e8e8e8e8e8e8e8e8e8e8e8 128)
invoke-spec-lane with env: #((bv #xe8 8))
Concrete counter examples:
(#((bv #xe8 8)) #((bv #xa1 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe8 8))
Spec Produced:
(bv #xe8 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xa1 8))
Spec Produced:
(bv #xa1 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$26)

invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
invoke-spec-lane with env: #(sym_bv$26)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 '(buf uint8 8))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 8) 1)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 8)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) 512 32 32) 256 16 32 0) 256 16) 128 8 16 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 8))
========================================
Original Halide Sub-Expression:
(vec-min
 (uint8x16
  (vec-min
   (uint16x16
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-mul
         (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
         (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
        (x16 (int-imm (bv #x00000001 32) #f)))
       (vec-shr
        (x16 (int-imm (bv #x00007fff 32) #f))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-mul
           (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
           (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
          (x16 (int-imm (bv #x00000001 32) #f)))
         (vec-bwand
          (x16 (int-imm (bv #x00007fff 32) #f))
          (x16 (int-imm (bv #x00000001 32) #f))))
        (x16 (int-imm (bv #x00000001 32) #f)))
       (x16 (int-imm (bv #x00000001 32) #f))))
     (x16 (int-imm (bv #x0000000f 32) #f))))
   (x16 (int-imm (bv #x00ff 16) #f))))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 8)
 (_mm_cvtepi64_epi32_dsl
  (_m_pminub_dsl
   (lit
    (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
   (_mm_cvtepi64_epi32_dsl
    (_mm_srlv_epi32_dsl
     (lit
      (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm_srlv_epi32_dsl
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
         (_mm256_cvtepu16_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        512
        32
        32)
       (_mm_srlv_epi32_dsl
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
        (lit
         (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
        512
        32
        32)
       512
       32)
      (_mm_srlv_epi32_dsl
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
           (_mm256_cvtepu16_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
            256
            16
            32)
           512
           32
           0
           64)
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          512
          32)
         (_mm256_and_si256_dsl
          (lit
           (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          512
          32)
         512
         32)
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        512
        32)
       512
       32
       32)
      512
      32)
     512
     32
     32)
    256
    16
    32
    0)
   256
   16)
  128
  8
  16
  0)
 128
 8)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x16 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 128 8)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x03 8)) 128 8) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_m_pminub_dsl #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) 256 16 32) 512 32 0 64) 512 32 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 512 32) #(struct:_mm_srlv_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 256 16 32) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) 512 32 32) 512 32) 512 32 32) 256 16 32 0) 256 16) 128 8 16 0) 128 8) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 128 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (uint8x16
   (vec-min
    (uint16x16
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
          (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (vec-shr
         (x16 (int-imm (bv #x00007fff 32) #f))
         (x16 (int-imm (bv #x00000001 32) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
            (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
           (x16 (int-imm (bv #x00000001 32) #f)))
          (vec-bwand
           (x16 (int-imm (bv #x00007fff 32) #f))
           (x16 (int-imm (bv #x00000001 32) #f))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (x16 (int-imm (bv #x0000000f 32) #f))))
    (x16 (int-imm (bv #x00ff 16) #f))))
  (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl
  (_mm_set1_pi8_dsl (reg (bv #x03 8)) 128 8)
  (_mm_cvtepi64_epi32_dsl
   (_m_pminub_dsl
    (lit
     (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
    (_mm_cvtepi64_epi32_dsl
     (_mm_srlv_epi32_dsl
      (lit
       (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm_srlv_epi32_dsl
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit (bv #x00000020 32))
         (lit
          (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
          (_mm256_cvtepu16_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         512
         32
         32)
        (_mm_srlv_epi32_dsl
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit (bv #x00000020 32))
         (lit
          (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
         (lit
          (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
         512
         32
         32)
        512
        32)
       (_mm_srlv_epi32_dsl
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 16 32)
            (_mm256_cvtepu16_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
             256
             16
             32)
            512
            32
            0
            64)
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           512
           32)
          (_mm256_and_si256_dsl
           (lit
            (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           512
           32)
          512
          32)
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         512
         32)
        512
        32
        32)
       512
       32)
      512
      32
      32)
     256
     16
     32
     0)
    256
    16)
   128
   8
   16
   0)
  128
  8)
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 128 8)
 128
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (uint8x16
   (vec-min
    (uint16x16
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-mul
          (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
          (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (vec-shr
         (x16 (int-imm (bv #x00007fff 32) #f))
         (x16 (int-imm (bv #x00000001 32) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-mul
            (uint32x16 (buffer #<procedure:buffer-fn> 'uint16 256))
            (uint32x16 (x16 (buffer #<procedure:buffer-fn> 'uint16 16))))
           (x16 (int-imm (bv #x00000001 32) #f)))
          (vec-bwand
           (x16 (int-imm (bv #x00007fff 32) #f))
           (x16 (int-imm (bv #x00000001 32) #f))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (x16 (int-imm (bv #x0000000f 32) #f))))
    (x16 (int-imm (bv #x00ff 16) #f))))
  (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint16 16)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'uint16 16)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'uint16 256)
 (bv #x00 8))
========================================
; (reg (bv #x01 8)) <1 x i16>
; (reg (bv #x04 8)) <1 x i8>
; (reg (bv #x03 8)) <1 x i8>
; (reg (bv #x02 8)) <1 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  8  );<16 x i8>
  
(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 4)  128  8  );<16 x i8>
  128  8  );<16 x i8>

Writing [; hydride.node.1
; (reg 1) <1 x i16>
; (reg 4) <1 x i8>
; (reg 3) <1 x i8>
; (reg 2) <1 x i16>
; (reg 0) <16 x i16>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  8  );<16 x i8>
  
(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 4)  128  8  );<16 x i8>
  128  8  );<16 x i8>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 1) <1 x i16>
; (reg 4) <1 x i8>
; (reg 3) <1 x i8>
; (reg 2) <1 x i16>
; (reg 0) <16 x i16>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_set1_pi8_dsl 
(reg 3)  128  8  );<16 x i8>
  
(_mm_cvtepi64_epi32_dsl 
(_m_pminub_dsl (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  
(_mm_cvtepi64_epi32_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) ; <16 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  16  32  );<16 x i32>
  
(_mm256_cvtepu16_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  512  32  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 4)  128  8  );<16 x i8>
  128  8  );<16 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(vec-add '(buf uint16 256) '(buf uint16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(uint16x16 '(buf uint32 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0) 0)
(x16 '(buf uint16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf uint32 512) '(buf uint32 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 0)
(vec-shr '(buf uint32 512) '(buf uint32 512)) (vector #t (_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32) 0)
(vec-mul '(buf uint32 512) '(buf uint32 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64) 4)
(vec-bwand '(buf uint32 512) '(buf uint32 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 0)
(x16 (int-imm (bv #x00007fff 32) #f)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 1)
(vec-min '(buf uint16 256) '(buf uint16 256)) (vector #t (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x00000001 32) #f)) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(x16 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8) 1)
(uint8x16 '(buf uint16 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0) 0)
(uint32x16 '(buf uint16 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32) 0)
(x16 (int-imm (bv #x0000000f 32) #f)) (vector #t (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) 0)
(vec-min '(buf uint8 128) '(buf uint8 128)) (vector #t (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8) 1)
(vec-max '(buf uint8 128) '(buf uint8 128)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8) 0)
(x16 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min(uint8x16(min(uint16x16((uint32x16)shift_right(((uint32x16)shift_right(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)), x16((uint32)15))), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Expression after InlineLets: max(min(uint8x16(min(uint16x16((uint32x16)shift_right(((uint32x16)shift_right(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)), x16((uint32)15))), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Expression before abstraction: max(min(uint8x16(min(uint16x16((uint32x16)shift_right(((uint32x16)shift_right(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)), x16((uint32)15))), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Input expression to synthesize: max(min(uint8x16(min(uint16x16((uint32x16)shift_right(((uint32x16)shift_right(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16((uint16)t829)), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16((uint16)t835)), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)), x16((uint32)15))), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Cast operation into: uint8x16
Cast operation into: uint16x16
Cast operation into: uint32x16
Cast operation into: uint32x16
t829 maps to reg_1
Cast operation into: uint32x16
Cast operation into: uint32x16
t835 maps to reg_2
output_max maps to reg_3
output_min maps to reg_4
Synthesis completed with return code:	0
Synthesis took 32.400883seconds ...
Expression after replacae abstraction: max(min(uint8x16(min(uint16x16((uint32x16)shift_right(((uint32x16)shift_right(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)shift_right(x16((uint32)32767), x16((uint32)1))) + (uint32x16)shift_right(((uint32x16)bitwise_and(uint32x16((uint16x16)sum[ramp(0, 1, 16)])*uint32x16(x16(uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)))), x16((uint32)1)) + (uint32x16)bitwise_and(x16((uint32)32767), x16((uint32)1))) + x16((uint32)1), x16((uint32)1)), x16((uint32)15))), x16((uint16)255))), x16((uint8)output_max)), x16((uint8)output_min))
Generating Call with type: uint8x16 and lanes 16
Ending synthesis for expr: 1

Optimized expression: (uint8x16)hydride.node.1((uint16x16)sum[ramp(0, 1, 16)], uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)), uint16(max(min((t642 + 131072)/(t642*2), 65535), 0)), (uint8)output_max, (uint8)output_min)
Hydride Function: declare <16 x i16> @hydride.node.0(<16 x i16>, <16 x i8>)

Generating Hydride Call:   %637 = call <16 x i16> @hydride.node.0(<16 x i16> %626, <16 x i8> %636) #17
Hydride Function: declare <16 x i8> @hydride.node.1(<16 x i16>, i16, i16, i8, i8)

Generating Hydride Call:   %679 = call <16 x i8> @hydride.node.1(<16 x i16> %644, i16 %661, i16 %678, i8 %output_max25, i8 %output_min26) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'average_pool' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
