mkdir add/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g add/src/add_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o add/bin/add_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./add/bin/add_generator \
	-t 0 \
	-o add/bin \
	-g add \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f add target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Should Use Dot Product returning True!

Should Use Dot Product returning True!

Hydride Optimize X86
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)rounding_shift_right((int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)), x16((uint32)16)), x16(32767)), x16(-32768))), x16(int16((uint8)output_zero))), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Lower Intrinsic on call: saturating_add
Lower Intrinsic on call: rounding_shift_right
Lowered Expression: (int32x16)shift_right((int32x16)rounding_halving_add((int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)), x16(32767)), x16((uint32)15))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: rounding_halving_add
Lowered Expression: (((int32x16)shift_right((int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64), x16((int16)input1_multiplier)) + (int32x16)widening_mul((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64), x16((int16)input2_multiplier)), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)))
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier)))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier)))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: shift_right
Lower Intrinsic on call: bitwise_and
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier)))
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: widening_mul
Lowered Expression: (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier)))
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x0b 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 8) . (bv #x0c 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x05 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x0a 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x07 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x03 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x04 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x08 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> uint8 128) . (bv #x06 8)) (#(struct:buffer #<procedure:buffer-fn> int16 16) . (bv #x09 8)))
here
(#(struct:vec-min #(struct:uint8x16 #(struct:vec-max #(struct:vec-min #(struct:vec-sat-add #(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x16 #(struct:int-imm (bv #x0000 16) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(vec-max '(buf uint8 128) '(buf uint8 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_7887

base_7887_grammar.rkt
/tmp/base_7887_grammar.rkt
Writing [{ 
"name": "base_7887" , 
"semantics": [ "(extract #<procedure:bvumax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7887_spec.JSON
rm: cannot remove '/tmp/base_7887_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 18
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_max_epu8 with score: 5 belonging to target agnostic class _mm512_max_epu64
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 19

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7887_spec.JSON /tmp/base_7887_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7887 ... 

Grammar:
#<procedure:base_7887>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x038697d87d5bc8e247193e2e72dc70dc 128) (bv #x4e6441a6ccdf7e2cf4ff32badfffcfc1 128))
(vec-max (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x4e8697d8ccdfc8e2f4ff3ebadfffcfdc 128)
invoke-spec-lane with env: #((bv #x038697d87d5bc8e247193e2e72dc70dc 128) (bv #x4e6441a6ccdf7e2cf4ff32badfffcfc1 128))
Concrete counter examples:
(#((bv #x038697d87d5bc8e247193e2e72dc70dc 128) (bv #x4e6441a6ccdf7e2cf4ff32badfffcfc1 128)) #((bv #x46e09d901a555f0c5420d9ca04683896 128) (bv #x2fcb75d67effdabffe0ad341e4cdb5cc 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x038697d87d5bc8e247193e2e72dc70dc 128) (bv #x4e6441a6ccdf7e2cf4ff32badfffcfc1 128))
Spec Produced:
(bv #xdc 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x46e09d901a555f0c5420d9ca04683896 128) (bv #x2fcb75d67effdabffe0ad341e4cdb5cc 128))
Spec Produced:
(bv #xcc 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf uint8 128) '(buf uint8 128))
#(#t #(struct:_mm512_max_epu64_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 8) 0)
Synthesis step completed!
Solution
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
(_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Cost
6
here
(#(struct:uint8x16 #(struct:vec-max #(struct:vec-min #(struct:vec-sat-add #(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mulrm: cannot remove '/tmp/base_1513_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 20
Actual Compute ops 1
Num Broadcasts: 24
Num Computes: 15
Adding:  _mm_min_epu8 with score: 5 belonging to target agnostic class _m_pminub
Adding:  _mm_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm_unpacklo_epi64 with score: 3 belonging to target agnostic class _mm_unpacklo_epi64
Adding:  _mm_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm_move_epi64 with score: 3 belonging to target agnostic class _mm_movepi64_pi64
Adding:  _mm_packus_epi32 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi16 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi32 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm_unpackhi_epi64 with score: 3 belonging to target agnostic class _m_punpckhdq
Adding:  _mm_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtsepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_cvtepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 4 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 4 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 4 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 21
 #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x16 #(struct:int-imm (bv #x0000 16) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> uint8 8)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(vec-min '(buf uint8 128) '(buf uint8 128))
Leaves are bitvectors of sizes:
(128 128)
get-expr-grammar with base_name: base_1513

base_1513_grammar.rkt
/tmp/base_1513_grammar.rkt
Writing [{ 
"name": "base_1513" , 
"semantics": [ "(extract zero-extend #<procedure:bvumin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8, 8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_128", "SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1513_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1513_spec.JSON /tmp/base_1513_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1513 ... 

Grammar:
#<procedure:base_1513>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #xbd9fa5532425018017218ca14f95204d 128)
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Concrete counter examples:
(#((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128)) #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Spec Produced:
(bv #x4d 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128))
Spec Produced:
(bv #x1d 8)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$4 sym_bv$5)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 127 120 sym_bv$4) (extract 127 120 sym_bv$5)) (extract 127 120 sym_bv$4) (extract 127 120 sym_bv$5)) (ite (bvule (extract 119 112 sym_bv$4) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #x00010110800101010101010101014001 128)]
 [sym_bv$5 (bv #x40000008000000000000000000000000 128)])
Verification failed :(
#((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128))
invoke-spec with env: #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00000008000000000000000000000000 128)
(bv #x00000008000000000000000000000000 128)
Verification failed ...
	spec produced: (bv #x00000008000000000000000000000000 128) 128 
	synthesized result produced: (bv #x40000008000000000000000000000000 128) 128

invoke-spec with env: #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x00000008000000000000000000000000 128)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(15)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #xbd9fa5532425018017218ca14f95204d 128)
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Concrete counter examples:
(#((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128)) #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128)) #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128)))
Failing lanes examples:
(0 0 15)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Spec Produced:
(bv #x4d 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128))
Spec Produced:
(bv #x1d 8)
Synthesize by lane...
Lane Index
15
invoke-spec-lane with env: #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_movepi64_pi64_dsl (reg (bv #x1 4)) 64 64 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$8 sym_bv$9)

invoke-spec with env: #(sym_bv$8 sym_bv$9)
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvule (extract 127 120 sym_bv$8) (extract 127 120 sym_bv$9)) (extract 127 120 sym_bv$8) (extract 127 120 sym_bv$9)) (ite (bvule (extract 119 112 sym_bv$8) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$8 (bv #x000908087935d5a30101010101010101 128)]
 [sym_bv$9 (bv #x6ed4c2021c3ffb2d0000000000000000 128)])
Verification failed :(
#((bv #x000908087935d5a30101010101010101 128) (bv #x6ed4c2021c3ffb2d0000000000000000 128))
invoke-spec with env: #((bv #x000908087935d5a30101010101010101 128) (bv #x6ed4c2021c3ffb2d0000000000000000 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x000908021c35d52d0000000000000000 128)
(bv #x000908021c35d52d0000000000000000 128)
Verification failed ...
	spec produced: (bv #x000908021c35d52d0000000000000000 128) 128 
	synthesized result produced: (bv #x00000000000000000000000000000000 128) 128

invoke-spec with env: #((bv #x000908087935d5a30101010101010101 128) (bv #x6ed4c2021c3ffb2d0000000000000000 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x000908021c35d52d0000000000000000 128)
Difference  Predicate
'((0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0))
differing-lanes
'(8)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
(vec-min (buffer #<procedure:buffer-fn> 'uint8 128) (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #xbd9fa5532425018017218ca14f95204d 128)
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Concrete counter examples:
(#((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128)) #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128)) #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128)) #((bv #x000908087935d5a30101010101010101 128) (bv #x6ed4c2021c3ffb2d0000000000000000 128)))
Failing lanes examples:
(0 0 15 8)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xf19fa5ac8925018017218ca94f952077 128) (bv #xbdb4ca53243180d3a45dada16dbdfd4d 128))
Spec Produced:
(bv #x4d 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x01e752df0b6ae6b5d295a20bc8bae44f 128) (bv #x93faff913c885f5d712b0a9a6e5da71d 128))
Spec Produced:
(bv #x1d 8)
Synthesize by lane...
Lane Index
15
invoke-spec-lane with env: #((bv #x00010110800101010101010101014001 128) (bv #x40000008000000000000000000000000 128))
Spec Produced:
(bv #x00 8)
Synthesize by lane...
Lane Index
8
invoke-spec-lane with env: #((bv #x000908087935d5a30101010101010101 128) (bv #x6ed4c2021c3ffb2d0000000000000000 128))
Spec Produced:
(bv #x2d 8)
Synthesize by lane...
Z3 Synthesized Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$10 sym_bv$11)

invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
invoke-spec-lane with env: #(sym_bv$10 sym_bv$11)
verify-across-lanes returned #t ... 

Test elapsed time: 
3
(vec-min '(buf uint8 128) '(buf uint8 128))
#(#t #(struct:_m_pminub_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 128 8) 1)
Synthesis step completed!
Solution
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
(_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-sat-add #(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x16 #(struct:int-imm (bv #x0000 16) #t))))
=======================================
(uint8x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(uint8x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(uint8x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_1500

base_1500_grammar.rkt
/tmp/base_1500_grammar.rkt
Writing [{ 
"name": "base_1500" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1500_spec.JSON
rm: cannot remove '/tmp/base_1500_spec.JSON': No such file or directory
Pruning _mm_set1_epi8 as it has an argument of size 8 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
Actual Broadcast ops 10
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
Adding:  _mm256_cvtsepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtusepi64_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtusepi32_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 10

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1500_spec.JSON /tmp/base_1500_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1500 ... 

Grammar:
#<procedure:base_1500>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xabc3bb8c0323bcf2e1f0fa28453375bd9f81ffe931aa91df1ab66d4cd64fc0f6 256))
(uint8x16 (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #xc38c23f2f02833bd81e9aadfb64c4ff6 128)
invoke-spec-lane with env: #((bv #xabc3bb8c0323bcf2e1f0fa28453375bd9f81ffe931aa91df1ab66d4cd64fc0f6 256))
Concrete counter examples:
(#((bv #xabc3bb8c0323bcf2e1f0fa28453375bd9f81ffe931aa91df1ab66d4cd64fc0f6 256)) #((bv #x06fb5f9195b9a0bca6795f5ce983141ab7d28895ed339b4ace3552d8bbc93019 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xabc3bb8c0323bcf2e1f0fa28453375bd9f81ffe931aa91df1ab66d4cd64fc0f6 256))
Spec Produced:
(bv #xf6 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x06fb5f9195b9a0bca6795f5ce983141ab7d28895ed339b4ace3552d8bbc93019 256))
Spec Produced:
(bv #x19 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$12)

invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
invoke-spec-lane with env: #(sym_bv$12)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint8x16 '(buf int16 256))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16 0) 1)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-sat-add #(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shlrm: cannot remove '/tmp/base_3981_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
 #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #t))) #(struct:x16 #(struct:int-imm (bv #x0000 16) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-max '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_3981

base_3981_grammar.rkt
/tmp/base_3981_grammar.rkt
Writing [{ 
"name": "base_3981" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3981_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3981_spec.JSON /tmp/base_3981_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3981 ... 

Grammar:
#<procedure:base_3981>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x62b07d9b9d9b210642f0f661d9ddf78867bcfbecd605825dd0ab6a482c25c2a9 256) (bv #xe5e894f10debab50c70cf0ba15f0526b35c0ebf3903bc071f50311fee3293acb 256))
(vec-max (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #x62b07d9b0deb210642f0f66115f0526b67bcfbecd605c071f5036a482c253acb 256)
invoke-spec-lane with env: #((bv #x62b07d9b9d9b210642f0f661d9ddf78867bcfbecd605825dd0ab6a482c25c2a9 256) (bv #xe5e894f10debab50c70cf0ba15f0526b35c0ebf3903bc071f50311fee3293acb 256))
Concrete counter examples:
(#((bv #x62b07d9b9d9b210642f0f661d9ddf78867bcfbecd605825dd0ab6a482c25c2a9 256) (bv #xe5e894f10debab50c70cf0ba15f0526b35c0ebf3903bc071f50311fee3293acb 256)) #((bv #x8982564fb95143ff66d938243228c9b7cc77ede02b50f66c8e5ee90b4e596e02 256) (bv #x2542b2ca810d2b6894353fe2741d8411d2a21b4f8c20ad5a44c2eb18499cbb18 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x62b07d9b9d9b210642f0f661d9ddf78867bcfbecd605825dd0ab6a482c25c2a9 256) (bv #xe5e894f10debab50c70cf0ba15f0526b35c0ebf3903bc071f50311fee3293acb 256))
Spec Produced:
(bv #x3acb 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8982564fb95143ff66d938243228c9b7cc77ede02b50f66c8e5ee90b4e596e02 256) (bv #x2542b2ca810d2b6894353fe2741d8411d2a21b4f8c20ad5a44c2eb18499cbb18 256))
Spec Produced:
(bv #x6e02 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$13 sym_bv$14)

invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
invoke-spec-lane with env: #(sym_bv$13 sym_bv$14)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 1)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:vec-sat-add #(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))) #(struct:x16 #(struct:int-imm (bv #x00ff 16) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-min '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_1085

base_1085_grammar.rkt
/tmp/base_1085_grammar.rkt
Writing [{ 
"name": "base_1085" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1085_spec.JSON
rm: cannot remove '/tmp/base_1085_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_min_epi16 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1085_spec.JSON /tmp/base_1085_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1085 ... 

Grammar:
#<procedure:base_1085>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xb5ff754c1151f2a004e597e2792fc2cacd588261ea3b39282f8f488ccd0d035b 256) (bv #xcd3ac934570a9b4ec5d92d2314e4db709fa197809570e5eb9aa3491f40c1138f 256))
(vec-min (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #xb5ffc93411519b4ec5d997e214e4c2ca9fa182619570e5eb9aa3488ccd0d035b 256)
invoke-spec-lane with env: #((bv #xb5ff754c1151f2a004e597e2792fc2cacd588261ea3b39282f8f488ccd0d035b 256) (bv #xcd3ac934570a9b4ec5d92d2314e4db709fa197809570e5eb9aa3491f40c1138f 256))
Concrete counter examples:
(#((bv #xb5ff754c1151f2a004e597e2792fc2cacd588261ea3b39282f8f488ccd0d035b 256) (bv #xcd3ac934570a9b4ec5d92d2314e4db709fa197809570e5eb9aa3491f40c1138f 256)) #((bv #x8b80e9d9114369b3f4f7821de0bef0e2e9d962153acad12dc3728ef861fa1f54 256) (bv #x1dc9cb2b638d19d13cb88d1540a8c8ad036aec84f71aecf7118fb28764adf039 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xb5ff754c1151f2a004e597e2792fc2cacd588261ea3b39282f8f488ccd0d035b 256) (bv #xcd3ac934570a9b4ec5d92d2314e4db709fa197809570e5eb9aa3491f40c1138f 256))
Spec Produced:
(bv #x035b 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x8b80e9d9114369b3f4f7821de0bef0e2e9d962153acad12dc3728ef861fa1f54 256) (bv #x1dc9cb2b638d19d13cb88d1540a8c8ad036aec84f71aecf7118fb28764adf039 256))
Spec Produced:
(bv #xf039 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$15 sym_bv$16)

invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-min '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:rm: cannot remove '/tmp/base_4300_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_hadds_epi16 with score: 5 belonging to target agnostic class _mm256_hadds_epi16
Adding:  _mm256_max_epi16 with score: 5 belonging to target agnostic class _mm512_max_epi16
Adding:  _mm256_adds_epi16 with score: 5 belonging to target agnostic class _m_paddsb
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 9
buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-sat-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-sat-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_4300

base_4300_grammar.rkt
/tmp/base_4300_grammar.rkt
Writing [{ 
"name": "base_4300" , 
"semantics": [ "(extract bvadd sign-extend #<procedure:bvaddnsw> #<procedure:bvsmax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4300_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4300_spec.JSON /tmp/base_4300_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4300 ... 

Grammar:
#<procedure:base_4300>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6ef93ab47f840e49bc9ebd431f12044fa074975cff87981837a4ecae6a0fbf08 256) (bv #x88aba685d261b2444e302af2259bee3e3a3ca845ac0d37df4d7c959e49e699d7 256))
(vec-sat-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #xf7a4e13951e5c08d0acee83544adf28ddab07fffab94cff77fff824c7fff7fff 256)
invoke-spec-lane with env: #((bv #x6ef93ab47f840e49bc9ebd431f12044fa074975cff87981837a4ecae6a0fbf08 256) (bv #x88aba685d261b2444e302af2259bee3e3a3ca845ac0d37df4d7c959e49e699d7 256))
Concrete counter examples:
(#((bv #x6ef93ab47f840e49bc9ebd431f12044fa074975cff87981837a4ecae6a0fbf08 256) (bv #x88aba685d261b2444e302af2259bee3e3a3ca845ac0d37df4d7c959e49e699d7 256)) #((bv #x4db105aacdd64e22ae6069ce6ba12a57fd61e9e3e08793dd03e6b96c48e00ed5 256) (bv #xea41c7f4dd4c717f7795275474d6e12a93a96c9ead175a4aa9ed97edc11aed61 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6ef93ab47f840e49bc9ebd431f12044fa074975cff87981837a4ecae6a0fbf08 256) (bv #x88aba685d261b2444e302af2259bee3e3a3ca845ac0d37df4d7c959e49e699d7 256))
Spec Produced:
(bv #x7fff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x4db105aacdd64e22ae6069ce6ba12a57fd61e9e3e08793dd03e6b96c48e00ed5 256) (bv #xea41c7f4dd4c717f7795275474d6e12a93a96c9ead175a4aa9ed97edc11aed61 256))
Spec Produced:
(bv #xfc36 16)
Synthesize by lane...
Z3 Synthesized Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$17 sym_bv$18)

invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-sat-add '(buf int16 256) '(buf int16 256))
#(#t #(struct:_m_paddsb_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 256 16) 1)
Synthesis step completed!
Solution
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
(_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16)
Cost
4
here
(#(struct:vec-max #(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t))))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 rm: cannot remove '/tmp/base_7653_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_cvtepu8_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 4 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
(buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(int16x16 '(buf int32 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_7653

base_7653_grammar.rkt
/tmp/base_7653_grammar.rkt
Writing [{ 
"name": "base_7653" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7653_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7653_spec.JSON /tmp/base_7653_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7653 ... 

Grammar:
#<procedure:base_7653>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x7e76bb8f07c988c0950e1144482a03266d997a17eb96822f1415c070ffa3c602 256)
invoke-spec-lane with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
Concrete counter examples:
(#((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512)) #((bv #x1a9d1fde541d1e9b9cedf49e13baa9c677c1ac2178cba6ba5bfb4150dba9a5d362c7e3686ea5a54f97c12a518d711963afbb36b1f4e008506b7630a0c8cbce4d 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
Spec Produced:
(bv #xc602 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1a9d1fde541d1e9b9cedf49e13baa9c677c1ac2178cba6ba5bfb4150dba9a5d362c7e3686ea5a54f97c12a518d711963afbb36b1f4e008506b7630a0c8cbce4d 512))
Spec Produced:
(bv #xce4d 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$19)

invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
invoke-spec-lane with env: #(sym_bv$19)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$20)

invoke-spec with env: #(sym_bv$20)
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 495 480 sym_bv$20) (extract 463 448 sym_bv$20)) (extract 431 416 sym_bv$20)) (extract 399 384 sym_bv$20)) (extract 367 352 sym_bv$20)) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$20 (bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512)])
Verification failed :(
#((bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512))
invoke-spec with env: #((bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512))
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fff70000 256)
(bv #xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fff70000 256)
Verification failed ...
	spec produced: (bv #xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fff70000 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000080000 256) 256

invoke-spec with env: #((bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512))
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000fff70000 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
(int16x16 (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x7e76bb8f07c988c0950e1144482a03266d997a17eb96822f1415c070ffa3c602 256)
invoke-spec-lane with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
Concrete counter examples:
(#((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512)) #((bv #x1a9d1fde541d1e9b9cedf49e13baa9c677c1ac2178cba6ba5bfb4150dba9a5d362c7e3686ea5a54f97c12a518d711963afbb36b1f4e008506b7630a0c8cbce4d 512)) #((bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6bfb7e76109bbb8ffa6b07c9ecfd88c07112950e7c6d11447811482a797b0326205a6d999de27a174808eb9682ec822fde4e1415a5aec070bb25ffa3c9cdc602 512))
Spec Produced:
(bv #xc602 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x1a9d1fde541d1e9b9cedf49e13baa9c677c1ac2178cba6ba5bfb4150dba9a5d362c7e3686ea5a54f97c12a518d711963afbb36b1f4e008506b7630a0c8cbce4d 512))
Spec Produced:
(bv #xce4d 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x0000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000ffff000000000000fff700080000 512))
Spec Produced:
(bv #xfff7 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$21)

invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
invoke-spec-lane with env: #(sym_bv$21)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x16 '(buf int32 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Cost
4
here
(#(struct:vec-min #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16rm: cannot remove '/tmp/base_7114_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_max_epi32 with score: 5 belonging to target agnostic class _mm512_max_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))) #(struct:x16 #(struct:int-imm (bv #xffff8000 32) #t)))
=======================================
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-max
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-max '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_7114

base_7114_grammar.rkt
/tmp/base_7114_grammar.rkt
Writing [{ 
"name": "base_7114" , 
"semantics": [ "(extract #<procedure:bvsmax>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7114_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7114_spec.JSON /tmp/base_7114_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7114 ... 

Grammar:
#<procedure:base_7114>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x07880e00b63a5faaa3b10ccac3194063a36fee3a6f1e7206c4aaa68651256689dc42eb4e83b233f759f063f8ad36bcc8643e80a511991a2a875d9fec77d13426 512) (bv #x323e4aa7fd96c213f58160735b5408da47b68402eb8acdd93200a04e2758a3e586383f6d5a93b565a21a6852d60d49c00ff31632d671a077bc84661b322b7e75 512))
(vec-max (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x323e4aa7fd96c213f58160735b5408da47b684026f1e72063200a04e51256689dc42eb4e5a93b56559f063f8d60d49c0643e80a511991a2abc84661b77d13426 512)
invoke-spec-lane with env: #((bv #x07880e00b63a5faaa3b10ccac3194063a36fee3a6f1e7206c4aaa68651256689dc42eb4e83b233f759f063f8ad36bcc8643e80a511991a2a875d9fec77d13426 512) (bv #x323e4aa7fd96c213f58160735b5408da47b68402eb8acdd93200a04e2758a3e586383f6d5a93b565a21a6852d60d49c00ff31632d671a077bc84661b322b7e75 512))
Concrete counter examples:
(#((bv #x07880e00b63a5faaa3b10ccac3194063a36fee3a6f1e7206c4aaa68651256689dc42eb4e83b233f759f063f8ad36bcc8643e80a511991a2a875d9fec77d13426 512) (bv #x323e4aa7fd96c213f58160735b5408da47b68402eb8acdd93200a04e2758a3e586383f6d5a93b565a21a6852d60d49c00ff31632d671a077bc84661b322b7e75 512)) #((bv #xaad5593110894d576107a6cdda0ad76417321857d118e6e2255d0f95759ee7e8acd79b65c137dbc339d3712e2cdc79ca06dfea73c2f742e3d037341d17b21f4e 512) (bv #x1ec32473b8506eaa99b519bd933b3e5014263a0f088a626218ac01cd250a418227699d64adb4ee5117028cd2981263c9021264416243635b3830b34f72b511d5 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x07880e00b63a5faaa3b10ccac3194063a36fee3a6f1e7206c4aaa68651256689dc42eb4e83b233f759f063f8ad36bcc8643e80a511991a2a875d9fec77d13426 512) (bv #x323e4aa7fd96c213f58160735b5408da47b68402eb8acdd93200a04e2758a3e586383f6d5a93b565a21a6852d60d49c00ff31632d671a077bc84661b322b7e75 512))
Spec Produced:
(bv #x77d13426 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xaad5593110894d576107a6cdda0ad76417321857d118e6e2255d0f95759ee7e8acd79b65c137dbc339d3712e2cdc79ca06dfea73c2f742e3d037341d17b21f4e 512) (bv #x1ec32473b8506eaa99b519bd933b3e5014263a0f088a626218ac01cd250a418227699d64adb4ee5117028cd2981263c9021264416243635b3830b34f72b511d5 512))
Spec Produced:
(bv #x72b511d5 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$22 sym_bv$23)

invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
invoke-spec-lane with env: #(sym_bv$22 sym_bv$23)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-max '(buf int32 512) '(buf int32 512))
#(#t #(struct:_mm512_max_epi16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32) 1)
Synthesis step completed!
Solution
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi32 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_min_epi32 with score: 5 belonging to target agnostic class _mm256_min_epi16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
(bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f))) #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)))
=======================================
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-min
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-min '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_6714

base_6714_grammar.rkt
/tmp/base_6714_grammar.rkt
Writing [{ 
"name": "base_6714" , 
"semantics": [ "(extract sign-extend #<procedure:bvsmin>)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6714_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6714_spec.JSON /tmp/base_6714_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6714 ... 

Grammar:
#<procedure:base_6714>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
(vec-min (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xc957a4d8e753f4c983f4565f82fda738cc698d9ca81f95f6a7c87d23aa5844269207e347a3c3f906ff20e751d0d6feb9d15c07193f320bf243fce937b26ce5e6 512)
invoke-spec-lane with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
Concrete counter examples:
(#((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512)) #((bv #x2dfaebee90269ef612e6179298439e6b4aa4b059f23394568bc34ac5cda802e9fffa935d57ad98611658134a561fbd7d88227f3435bb9a07c316386f7bdbba61 512) (bv #x6c21bb946946402c4a07a02b142a73d37a6c89dc5d530766296641cc426dddf13f1993ffa4df359a0cb51ecef5e53a894f0f9d28a297bf4c915d75fc2a098742 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
Spec Produced:
(bv #xb26ce5e6 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2dfaebee90269ef612e6179298439e6b4aa4b059f23394568bc34ac5cda802e9fffa935d57ad98611658134a561fbd7d88227f3435bb9a07c316386f7bdbba61 512) (bv #x6c21bb946946402c4a07a02b142a73d37a6c89dc5d530766296641cc426dddf13f1993ffa4df359a0cb51ecef5e53a894f0f9d28a297bf4c915d75fc2a098742 512))
Spec Produced:
(bv #x2a098742 32)
Synthesize by lane...
Z3 Synthesized Solution
(reg (bv #x1 4))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(reg (bv #x1 4))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$24 sym_bv$25)

invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
invoke-spec-lane with env: #(sym_bv$24 sym_bv$25)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$26 sym_bv$27)

invoke-spec with env: #(sym_bv$26 sym_bv$27)
(vec-min (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (ite (bvsle (extract 511 480 sym_bv$26) (extract 511 480 sym_bv$27)) (extract 511 480 sym_bv$26) (extract 511 480 sym_bv$27)) (ite (bvsle (extract 479 448 ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$26 (bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)]
 [sym_bv$27 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-min (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-min (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(15)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
(vec-min (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xc957a4d8e753f4c983f4565f82fda738cc698d9ca81f95f6a7c87d23aa5844269207e347a3c3f906ff20e751d0d6feb9d15c07193f320bf243fce937b26ce5e6 512)
invoke-spec-lane with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
Concrete counter examples:
(#((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512)) #((bv #x2dfaebee90269ef612e6179298439e6b4aa4b059f23394568bc34ac5cda802e9fffa935d57ad98611658134a561fbd7d88227f3435bb9a07c316386f7bdbba61 512) (bv #x6c21bb946946402c4a07a02b142a73d37a6c89dc5d530766296641cc426dddf13f1993ffa4df359a0cb51ecef5e53a894f0f9d28a297bf4c915d75fc2a098742 512)) #((bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 15)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x08b7a9f5e753f4c9cde5c91182fda738cc698d9ca81f95f6e4994387bf11b0119207e347a3c3f906ff20e751464357502c11b416459c02f443fce9373da4fd11 512) (bv #xc957a4d8026c966a83f4565f1692b5bd0c71057cec5d0dfaa7c87d23aa5844260e4fc82dd229b97371943438d0d6feb9d15c07193f320bf26b5c3ee0b26ce5e6 512))
Spec Produced:
(bv #xb26ce5e6 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2dfaebee90269ef612e6179298439e6b4aa4b059f23394568bc34ac5cda802e9fffa935d57ad98611658134a561fbd7d88227f3435bb9a07c316386f7bdbba61 512) (bv #x6c21bb946946402c4a07a02b142a73d37a6c89dc5d530766296641cc426dddf13f1993ffa4df359a0cb51ecef5e53a894f0f9d28a297bf4c915d75fc2a098742 512))
Spec Produced:
(bv #x2a098742 32)
Synthesize by lane...
Lane Index
15
invoke-spec-lane with env: #((bv #x80000000000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x80000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$28 sym_bv$29)

invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_9399_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi32 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srav_epi32 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_rorv_epi32 with score: 5 belonging to target agnostic class _mm256_rorv_epi32
Adding:  _mm512_rolv_epi32 with score: 5 belonging to target agnostic class _mm_rolv_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 3
#(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
invoke-spec-lane with env: #(sym_bv$28 sym_bv$29)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-min '(buf int32 512) '(buf int32 512))
#(#t #(struct:_mm256_min_epi16_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 32) 1)
Synthesis step completed!
Solution
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
(_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:x16 #(struct:int-imm (bv #x0000000f 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf int32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_9399

base_9399_grammar.rkt
/tmp/base_9399_grammar.rkt
Writing [{ 
"name": "base_9399" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9399_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9399_spec.JSON /tmp/base_9399_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9399 ... 

Grammar:
#<procedure:base_9399>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #xffffffffffffffffffffffff000000000000000000000000ffffffff0000000000000000ffffffff000000000000000000000000ffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Concrete counter examples:
(#((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512)) #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$30 sym_bv$31)

invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
invoke-spec-lane with env: #(sym_bv$30 sym_bv$31)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$32 sym_bv$33)

invoke-spec with env: #(sym_bv$32 sym_bv$33)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 480 sym_bv$32) (extract 511 480 sym_bv$33)) (bvashr (extract 479 448 sym_bv$32) (extract 479 448 sym_bv$33))) (bvashr (extract 447 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$32 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$33 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512) 512

invoke-spec with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #xffffffffffffffffffffffff000000000000000000000000ffffffff0000000000000000ffffffff000000000000000000000000ffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Concrete counter examples:
(#((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512)) #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_rorv_epi32_dsl (lit (bv #x00000020 32)) (lit (bv #x00000020 32)) (reg (bv #x0 4)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_rorv_epi32_dsl
 (lit (bv #x00000020 32))
 (lit (bv #x00000020 32))
 (reg (bv #x0 4))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 512
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$34 sym_bv$35)

invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
invoke-spec-lane with env: #(sym_bv$34 sym_bv$35)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$36 sym_bv$37)

invoke-spec with env: #(sym_bv$36 sym_bv$37)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 480 sym_bv$36) (extract 511 480 sym_bv$37)) (bvashr (extract 479 448 sym_bv$36) (extract 479 448 sym_bv$37))) (bvashr (extract 447 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$36 (bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512)]
 [sym_bv$37 (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512)] ...)
Verification failed :(
#((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512))
invoke-spec with env: #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x80000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000 512) 512

invoke-spec with env: #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #xffffffffffffffffffffffff000000000000000000000000ffffffff0000000000000000ffffffff000000000000000000000000ffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Concrete counter examples:
(#((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512)) #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512)))
Failing lanes examples:
(0 0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$38 sym_bv$39)

invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
invoke-spec-lane with env: #(sym_bv$38 sym_bv$39)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$40 sym_bv$41)

invoke-spec with env: #(sym_bv$40 sym_bv$41)
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 480 sym_bv$40) (extract 511 480 sym_bv$41)) (bvashr (extract 479 448 sym_bv$40) (extract 479 448 sym_bv$41))) (bvashr (extract 447 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$40 (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$41 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(15)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'uint32 512))
Spec result
(bv #xffffffffffffffffffffffff000000000000000000000000ffffffff0000000000000000ffffffff000000000000000000000000ffffffffffffffffffffffff 512)
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Concrete counter examples:
(#((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512)) #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512)) #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0 0 15)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xe44ed4cbddb8896f930dbe4548dba1c053f86f08041fcfb1a783ece34a0bac0d633a5127ec66a864415a1eab5a821d6533ac20f1d1dfbd7adc1d3624c6f8118d 512) (bv #x005ba1ba5ae0f233fa9c50e69c343cd4db8342b98968bbaae511ee8097d31c9eb9e351988726608cedbe7680d6e5d497dc8bdb68a862ed96d82988ce9c0b7e45 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfd17e2208fab1d9ac15cb73d042d97d06e3d8c1b930c6b1dde0fc965e0847a2cd06cc42b13d98cf73ce3eda7bc822793e7c6bcd036189b91d857222a908100a3 512) (bv #xfb656d1b5ec412dc02ba96de02c8df80405b79fd593a84f14e6807b03d89273339a4d950547f02234bfe09d68968d56b4e45748fb53a767f56d2a9819aa6016c 512))
Spec Produced:
(bv #xffffffff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x40000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000400000004000000040000000 512) (bv #x40000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000000800000008000000080000011 512))
Spec Produced:
(bv #x00000000 32)
Synthesize by lane...
Lane Index
15
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x40000000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$42 sym_bv$43)

invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
invoke-spec-lane with env: #(sym_bv$42 sym_bv$43)
verify-across-lanes returned #t ... 

Test elapsed time: 
6
(vec-shr '(buf int32 512) '(buf uint32 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffffffff 32)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x00000000 32)) 512 32 32) 0)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
Cost
16
here
(#(struct:vec-add #(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t))rm: cannot remove '/tmp/base_355_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi32 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_add_epi32 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 1
 #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))) #(struct:vec-shr #(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_355

base_355_grammar.rkt
/tmp/base_355_grammar.rkt
Writing [{ 
"name": "base_355" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_355_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_355_spec.JSON /tmp/base_355_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_355 ... 

Grammar:
#<procedure:base_355>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6e656aa6920aafd7edcd72140ecf6b5059b81b5840b19f2de2fe5eaf1ce8999a43054dd26ae30e6f6934cce750c7c95e92ca769e023ef95d98917351f28e6b8c 512) (bv #xb475c411334cbc469a89d83629354983615d8e6a862f0694a2115e44442cc7a6eacad6a52367e4e722beefd3841dd48844abe760327a5a20da66a3ec4e39f465 512))
(vec-add (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x22db2eb7c5576c1d88574a4a3804b4d3bb15a9c2c6e0a5c1850fbcf3611561402dd024778e4af3568bf3bcbad4e59de6d7765dfe34b9537d72f8173d40c85ff1 512)
invoke-spec-lane with env: #((bv #x6e656aa6920aafd7edcd72140ecf6b5059b81b5840b19f2de2fe5eaf1ce8999a43054dd26ae30e6f6934cce750c7c95e92ca769e023ef95d98917351f28e6b8c 512) (bv #xb475c411334cbc469a89d83629354983615d8e6a862f0694a2115e44442cc7a6eacad6a52367e4e722beefd3841dd48844abe760327a5a20da66a3ec4e39f465 512))
Concrete counter examples:
(#((bv #x6e656aa6920aafd7edcd72140ecf6b5059b81b5840b19f2de2fe5eaf1ce8999a43054dd26ae30e6f6934cce750c7c95e92ca769e023ef95d98917351f28e6b8c 512) (bv #xb475c411334cbc469a89d83629354983615d8e6a862f0694a2115e44442cc7a6eacad6a52367e4e722beefd3841dd48844abe760327a5a20da66a3ec4e39f465 512)) #((bv #xb6f413461c7b70a2053c453a5eb3cfd92fee1e76d793b6368a3e58e0c24d7c5a779037078ac25586f94f28ad53f853ee189a193f32b35c95f193dafa80681618 512) (bv #x353bc308bcf5d3e5ef4313e929cb39282f6a50f5abd28356b21c9627d657180d194c99d24d7465b81f5b589d1cf256dcb08a17d9be057420a527ce8b0d5b9ab7 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6e656aa6920aafd7edcd72140ecf6b5059b81b5840b19f2de2fe5eaf1ce8999a43054dd26ae30e6f6934cce750c7c95e92ca769e023ef95d98917351f28e6b8c 512) (bv #xb475c411334cbc469a89d83629354983615d8e6a862f0694a2115e44442cc7a6eacad6a52367e4e722beefd3841dd48844abe760327a5a20da66a3ec4e39f465 512))
Spec Produced:
(bv #x40c85ff1 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb6f413461c7b70a2053c453a5eb3cfd92fee1e76d793b6368a3e58e0c24d7c5a779037078ac25586f94f28ad53f853ee189a193f32b35c95f193dafa80681618 512) (bv #x353bc308bcf5d3e5ef4313e929cb39282f6a50f5abd28356b21c9627d657180d194c99d24d7465b81f5b589d1cf256dcb08a17d9be057420a527ce8b0d5b9ab7 512))
Spec Produced:
(bv #x8dc3b0cf 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$44 sym_bv$45)

invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
invoke-spec-lane with env: #(sym_bv$44 sym_bv$45)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-add '(buf int32 512) '(buf int32 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-shr #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))) #(struct:vec-shr #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16rm: cannot remove '/tmp/base_207_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepi16_epi32 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 512
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_cvtepu16_epi32 as it has an argument of size 256 which is smaller than 512
Prunning Based of non-immediate usage pruned 10 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_mul_epi32 with score: 5 belonging to target agnostic class _mm_mul_epi32
Adding:  _mm512_mullo_epi32 with score: 6 belonging to target agnostic class _mm_mulhi_epu16
Adding:  _mm512_mul_epu32 with score: 5 belonging to target agnostic class _mm512_mul_epu32
Adding:  _mm512_dpbusds_epi32 with score: 6 belonging to target agnostic class _mm_dpbusds_epi32
Adding:  _mm512_dpwssds_epi32 with score: 5 belonging to target agnostic class _mm256_dpwssds_epi32
Adding:  _mm512_mulhi_epi32 with score: 6 belonging to target agnostic class _mm512_mulhi_epi32
Adding:  _mm512_mulhi_epu32 with score: 6 belonging to target agnostic class _mm512_mulhi_epi32
Adding:  _mm512_fmadd_epi32 with score: 6 belonging to target agnostic class _mm512_fmadd_epi32
Adding:  _mm512_dpwssd_epi32 with score: 5 belonging to target agnostic class _mm_dpwssd_epi32
Adding:  _mm512_madd_epi16 with score: 5 belonging to target agnostic class _mm_madd_pi16
Adding:  _mm512_dpbusd_epi32 with score: 6 belonging to target agnostic class _mm256_dpbusd_epi32
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 11
) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf int32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
Cost
16
here
(#(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-mul '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_207

base_207_grammar.rkt
/tmp/base_207_grammar.rkt
Writing [{ 
"name": "base_207" , 
"semantics": [ "(extract bvmul sign-extend zero-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_207_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_207_spec.JSON /tmp/base_207_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_207 ... 

Grammar:
#<procedure:base_207>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xb1913d1dbcd5f85a8b82a7643121be957411297c1476ceb6df271d00118620f07e56d6d23d2672dbaa46d30c1783d3ac484334941283f2d1981500e198311b3c 512)
invoke-spec-lane with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512))
Concrete counter examples:
(#((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512)) #((bv #xb262a7ee627969117641da63fececd6c6b7571eb3ba5c9249570c850566c461e87633be3ad1514bd8ad330bee7caca0972e8b586c622518ab736675a589bea9d 512) (bv #x69a99c44b803f22f7164a3463cb5e652902c2e4b9d6379c4271d12937ddea6f5ccf9daadd9676117f4a8e84398dd15a4584b45bfa71c9d586de1e822728e4e8d 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512))
Spec Produced:
(bv #x98311b3c 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb262a7ee627969117641da63fececd6c6b7571eb3ba5c9249570c850566c461e87633be3ad1514bd8ad330bee7caca0972e8b586c622518ab736675a589bea9d 512) (bv #x69a99c44b803f22f7164a3463cb5e652902c2e4b9d6379c4271d12937ddea6f5ccf9daadd9676117f4a8e84398dd15a4584b45bfa71c9d586de1e822728e4e8d 512))
Spec Produced:
(bv #x5c720e79 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mul_epi32_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mul_epi32_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$46 sym_bv$47)

invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
invoke-spec-lane with env: #(sym_bv$46 sym_bv$47)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$48 sym_bv$49)

invoke-spec with env: #(sym_bv$48 sym_bv$49)
(vec-mul (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvmul (extract 511 480 sym_bv$48) (extract 511 480 sym_bv$49)) (bvmul (extract 479 448 sym_bv$48) (extract 479 448 sym_bv$49))) (bvmul (extract 447 416 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 28 seconds

(model
 [sym_bv$48 (bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512)]
 [sym_bv$49 (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512)] ...)
Verification failed :(
#((bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512) (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512))
invoke-spec with env: #((bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512) (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xffa9edd161e7d7d01c38b33df0ac72b2bffffff5e1abd4627df8c00408d8f4d3114ad4d949d8ed1abbfd5fc658c94ec8cb078c783d88ac91404cf39513f79830 512)
(bv #xffa9edd161e7d7d01c38b33df0ac72b2bffffff5e1abd4627df8c00408d8f4d3114ad4d949d8ed1abbfd5fc658c94ec8cb078c783d88ac91404cf39513f79830 512)
Verification failed ...
	spec produced: (bv #xffa9edd161e7d7d01c38b33df0ac72b2bffffff5e1abd4627df8c00408d8f4d3114ad4d949d8ed1abbfd5fc658c94ec8cb078c783d88ac91404cf39513f79830 512) 512 
	synthesized result produced: (bv #xde34cad961e7d7d01dc9671cf0ac72b2e6669676e1abd462fc67f96708d8f4d3114ad4cd49d8ed1ae2d5fbac58c94ec82166d5453d88ac9116a1dc4013f79830 512) 512

invoke-spec with env: #((bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512) (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xffa9edd161e7d7d01c38b33df0ac72b2bffffff5e1abd4627df8c00408d8f4d3114ad4d949d8ed1abbfd5fc658c94ec8cb078c783d88ac91404cf39513f79830 512)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512))
(vec-mul (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #xb1913d1dbcd5f85a8b82a7643121be957411297c1476ceb6df271d00118620f07e56d6d23d2672dbaa46d30c1783d3ac484334941283f2d1981500e198311b3c 512)
invoke-spec-lane with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512))
Concrete counter examples:
(#((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17 512)) #((bv #xb262a7ee627969117641da63fececd6c6b7571eb3ba5c9249570c850566c461e87633be3ad1514bd8ad330bee7caca0972e8b586c622518ab736675a589bea9d 512) (bv #x69a99c44b803f22f7164a3463cb5e652902c2e4b9d6379c4271d12937ddea6f5ccf9daadd9676117f4a8e84398dd15a4584b45bfa71c9d586de1e822728e4e8d 512)) #((bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512) (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x1c1b1f69175fe1798efef169cdc7b0b18abfa1bc377a47cb5847c4c68dde12bed28605f5e1fc84110781008603d31b6ca5af606b769fe68dbd6eda8315c29024 512) (bv #x915ead958abaaeaa62c5dbc4185dc525c5e755114a5d9962f1243f80c493aa88eae3e64a36ec042b3d8de30268753f3142cab2bc0c7f7e55f2da69cb8987ba17rm: cannot remove '/tmp/base_7118_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_cvtepi8_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 256
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_broadcastmw_epi32 as it has an argument of size 16 which is smaller than 256
Pruning _mm512_cvtepu8_epi32 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 7 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x8 with score: 4 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepu16_epi32 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu8_epi16 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 8
 512))
Spec Produced:
(bv #x98311b3c 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xb262a7ee627969117641da63fececd6c6b7571eb3ba5c9249570c850566c461e87633be3ad1514bd8ad330bee7caca0972e8b586c622518ab736675a589bea9d 512) (bv #x69a99c44b803f22f7164a3463cb5e652902c2e4b9d6379c4271d12937ddea6f5ccf9daadd9676117f4a8e84398dd15a4584b45bfa71c9d586de1e822728e4e8d 512))
Spec Produced:
(bv #x5c720e79 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #xd070f0c5991fffff6fa8fbc7961783a7400000075562b15735a0cff2575c1a0d80000003929cd78b76b004a194fa53bb02138bb38a0d7ddd5412a7afc3cd87f0 512) (bv #x57f7819d54182830d4ec30dbb7fff5fe24924923b33fc76e00b6b492f577f25f306e46f3d787da8ebd12c40645c2ebd8cb7125a8b780c045abede5fb9fc07cfd 512))
Spec Produced:
(bv #x404cf395 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$50 sym_bv$51)

invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
invoke-spec-lane with env: #(sym_bv$50 sym_bv$51)
verify-across-lanes returned #t ... 

Test elapsed time: 
38
(vec-mul '(buf int32 512) '(buf int32 512))
#(#t #(struct:_mm_mulhi_epu16_dsl #(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)) 512 32 0 64) 4)
Synthesis step completed!
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_7118

base_7118_grammar.rkt
/tmp/base_7118_grammar.rkt
Writing [{ 
"name": "base_7118" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_7118_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7118_spec.JSON /tmp/base_7118_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7118 ... 

Grammar:
#<procedure:base_7118>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x3f080e6e0953564447677756202416dd816ea5ea82d166c52a57b4216e53f54d 256))
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #x00003f0800000e6e0000095300005644000047670000775600002024000016ddffff816effffa5eaffff82d1000066c500002a57ffffb42100006e53fffff54d 512)
invoke-spec-lane with env: #((bv #x3f080e6e0953564447677756202416dd816ea5ea82d166c52a57b4216e53f54d 256))
Concrete counter examples:rm: cannot remove '/tmp/base_4382_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6

(#((bv #x3f080e6e0953564447677756202416dd816ea5ea82d166c52a57b4216e53f54d 256)) #((bv #x129ed732fdac520f367078a16db484af7d94958e6aaa2b67e66d854b3e25e70d 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x3f080e6e0953564447677756202416dd816ea5ea82d166c52a57b4216e53f54d 256))
Spec Produced:
(bv #xfffff54d 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x129ed732fdac520f367078a16db484af7d94958e6aaa2b67e66d854b3e25e70d 256))
Spec Produced:
(bv #xffffe70d 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$52)

invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
invoke-spec-lane with env: #(sym_bv$52)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(int32x16 '(buf int16 256))
#(#t #(struct:_mm256_cvtepi8_epi32_dsl #(struct:reg (bv #x0 4)) 256 16 32) 0)
Synthesis step completed!
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_4382

base_4382_grammar.rkt
/tmp/base_4382_grammar.rkt
Writing [{ 
"name": "base_4382" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_4382_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4382_spec.JSON /tmp/base_4382_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4382 ... 

Grammar:
#<procedure:base_4382>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xaf523b2e6a51558f8a39f6b30675d97ef061f3f6417cb1e4736865c90de8b1cc 256) (bv #xa3b9b89faac4937eb8b2eaf40e2f7c0726bc33f8720cda7e55839871f91b5b74 256))
(vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #x530bf3cd1515e90d42ebe1a714a45585171d27eeb3888c62c8ebfe3a07030d40 256)
invoke-spec-lane with env: #((bv #xaf523b2e6a51558f8a39f6b30675d97ef061f3f6417cb1e4736865c90de8b1cc 256) (bv #xa3b9b89faac4937eb8b2eaf40e2f7c0726bc33f8720cda7e55839871f91b5b74 256))
Concrete counter examples:
(#((bv #xaf523b2e6a51558f8a39f6b30675d97ef061f3f6417cb1e4736865c90de8b1cc 256) (bv #xa3b9b89faac4937eb8b2eaf40e2f7c0726bc33f8720cda7e55839871f91b5b74 256)) #((bv #x115392e33a7e0a9bae24497977d2e59a6608f9d5a35b05dd31276abd25ddc51brm: cannot remove '/tmp/base_6025_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
 256) (bv #x46ee0db16d481a0ee7b13b174f807ab7dac52f6c6652f1403e4bbf670a66fd6f 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xaf523b2e6a51558f8a39f6b30675d97ef061f3f6417cb1e4736865c90de8b1cc 256) (bv #xa3b9b89faac4937eb8b2eaf40e2f7c0726bc33f8720cda7e55839871f91b5b74 256))
Spec Produced:
(bv #x0d40 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x115392e33a7e0a9bae24497977d2e59a6608f9d5a35b05dd31276abd25ddc51b 256) (bv #x46ee0db16d481a0ee7b13b174f807ab7dac52f6c6652f1403e4bbf670a66fd6f 256))
Spec Produced:
(bv #xc28a 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$53 sym_bv$54)

invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
invoke-spec-lane with env: #(sym_bv$53 sym_bv$54)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_6025

base_6025_grammar.rkt
/tmp/base_6025_grammar.rkt
Writing [{ 
"name": "base_6025" , 
"semantics": [ "(bvshl sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6025_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6025_spec.JSON /tmp/base_6025_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6025 ... 

Grammar:
#<procedure:base_6025>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
Concrete counter examples:
(#((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256)) #((bv #x976692df796f3281864a64928b6b8a1ca3b30c506c645a10185200a2ef2b803d 256) (bv #xb004d091f1ad453f89387b295e87024c65fb8d026a423d90034882c22a2dec50 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x976692df796f3281864a64928b6b8a1ca3b30c506c645a10185200a2ef2b803d 256) (bv #xb004d091f1ad453f89387b295e87024c65fb8d026a423d90034882c22a2dec50 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$55 sym_bv$56)

invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
invoke-spec-lane with env: #(sym_bv$55 sym_bv$56)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$57 sym_bv$58)

invoke-spec with env: #(sym_bv$57 sym_bv$58)
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvshl (extract 255 240 sym_bv$57) (extract 255 240 sym_bv$58)) (bvshl (extract 239 224 sym_bv$57) (extract 239 224 sym_bv$58))) (bvshl (extract 223 208 ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$57 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$58 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
Concrete counter examples:
(#((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256)) #((bv #x976692df796f3281864a64928b6b8a1ca3b30c506c645a10185200a2ef2b803d 256) (bv #xb004d091f1ad453f89387b295e87024c65fb8d026a423d90034882c22a2dec50 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x039edc83c341d64c870d58c7ae793bf652ba0d904030b73e602ae0a5cbd0ffe3 256) (bv #x66c1099f7b0f52fd42aa81e718a1089bd9b23f693ec5e0b3e91cc41376687134 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x976692df796f3281864a64928b6b8a1ca3b30c506c645a10185200a2ef2b803d 256) (bv #xb004d091f1ad453f89387b295e87024c65fb8d026a423d90034882c22a2dec50 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$59 sym_bv$60)

invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
invoke-spec-lane with env: #(sym_bv$59 sym_bv$60)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-shl '(buf int16 256) '(buf uint16 256))
#(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)
Synthesis step completed!
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_9602_spec.JSON': No such file or directory
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 128
Prunning Based of non-immediate usage pruned 1 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_broadcast_i64x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm256_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_cvtepi8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm256_broadcastw_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_broadcastsi128_si256 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastq_epi64 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu8_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm256_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 10
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 24
> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
get-expr-grammar with base_name: base_9602

base_9602_grammar.rkt
/tmp/base_9602_grammar.rkt
Writing [{ 
"name": "base_9602" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,16]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_128"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_9602_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_9602_spec.JSON /tmp/base_9602_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_9602 ... 

Grammar:
#<procedure:base_9602>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x0eda5895bccc981ea529832e275d27e1 128))
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Spec result
(bv #x000e00da0058009500bc00cc0098001e00a500290083002e0027005d002700e1 256)
invoke-spec-lane with env: #((bv #x0eda5895bccc981ea529832e275d27e1 128))
Concrete counter examples:
(#((bv #x0eda5895bccc981ea529832e275d27e1 128)) #((bv #x08fa11839fd70c08e41d674692d509eb 128)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x0eda5895bccc981ea529832e275d27e1 128))
Spec Produced:
(bv #x00e1 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x08fa11839fd70c08e41d674692d509eb 128))
Spec Produced:
(bv #x00eb 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$61)

invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
invoke-spec-lane with env: #(sym_bv$61)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x16 '(buf uint8 128))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 128 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #f))
Hashed expression
(x16 (int-imm (bv #x0006 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_7709

base_7709_grammar.rkt
/tmp/base_7709_grammar.rkt
Writing [{ 
"name": "base_7709" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[6, 16]] 
}
] to file /tmp/base_7709_spec.JSON
rm: cannot remove '/tmp/base_7709_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
rm: cannot remove '/tmp/base_3637_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_7709_spec.JSON /tmp/base_7709_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_7709 ... 

Grammar:
#<procedure:base_7709>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0006 16) #f))
Spec result
(bv #x0006000600060006000600060006000600060006000600060006000600060006 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0006 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0006 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0006 16) #f))
#(#t #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0006 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
get-expr-grammar with base_name: base_3637

base_3637_grammar.rkt
/tmp/base_3637_grammar.rkt
Writing [{ 
"name": "base_3637" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 16], 
"input_precision": [16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_16"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3637_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3637_spec.JSON /tmp/base_3637_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3637 ... 

Grammar:
#<procedure:base_3637>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x84a3 16))
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Spec result
(bv #x84a384a384a384a384a384a384a384a384a384a384a384a384a384a384a384a3 256)
invoke-spec-lane with env: #((bv #x84a3 16))
Concrete counter examples:
(#((bv #x84a3 16)) #((bv #xd5c6 16)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x84a3 16))
Spec Produced:
(bv #x84a3 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xd5c6 16))
Spec Produced:
(bv #xd5c6 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$62)

invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
invoke-spec-lane with env: #(sym_bv$62)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 '(buf int16 16))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0006 16) #f)))
 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0006 16) #f)))
  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16
 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x16
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0006 16) #f)))
   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================
here
(#(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-mul '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x03 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x03 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #f))
Hashed expression
(x16 (int-imm (bv #x0006 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0006 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x04 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x04 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0006 16) #f)))
 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0006 16) #f)))
  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16
 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x16
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0006 16) #f)))
   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================
Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int32x16
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0006 16) #f)))
    (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (vec-mul
  (int32x16
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0006 16) #f)))
    (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   256
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000rm: cannot remove '/tmp/base_5810_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   256
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5810

base_5810_grammar.rkt
/tmp/base_5810_grammar.rkt
Writing [{ 
"name": "base_5810" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_5810_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5810_spec.JSON /tmp/base_5810_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5810 ... 

Grammar:
#<procedure:base_5810>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00000001 32) #f))
Spec result
(bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00000001 32) #f))
#(#t #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-mul
   (int32x16
    (vec-add
     (vec-shl
      (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
      (x16 (int-imm (bv #x0006 16) #f)))
     (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (vec-mul
   (int32x16
    (vec-add
     (vec-shl
      (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
      (x16 (int-imm (bv #x0006 16) #f)))
     (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #xffffffff 32))
 (_mm256_add_epi8_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
     (_mm512_sllv_epi64_dsl
      (lit (bv #x0010 16))
      (lit
       (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
      256
      16
      16)
     256
     16)
    256
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
     (_mm512_sllv_epi64_dsl
      (lit (bv #x0010 16))
      (lit
       (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
      256
      16
      16)
     256
     16)
    256
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  512
  32)
 (lit (bv #x00000000 32))
 512
 32
 32)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf int32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg rm: cannot remove '/tmp/base_5513_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
(bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
Cost
16
here
()
=======================================
(x16 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x16 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_5513

base_5513_grammar.rkt
/tmp/base_5513_grammar.rkt
Writing [{ 
"name": "base_5513" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[32767, 32]] 
}
] to file /tmp/base_5513_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5513_spec.JSON /tmp/base_5513_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5513 ... 

Grammar:
#<procedure:base_5513>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00007fff 32) #t))
Spec result
(bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00007fff 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00007fff 32) #t))
#(#t #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (x16 (int-imm (bv #x00007fff 32) #t))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #xffffffff 32))
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
 (lit (bv #x00000000 32))
 512
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shr
  (vec-add
   (vec-mul
    (int32x16
     (vec-add
      (vec-shl
       (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
       (x16 (int-imm (bv #x0006 16) #f)))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (vec-mul
    (int32x16
     (vec-add
      (vec-shl
       (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
       (x16 (int-imm (bv #x0006 16) #f)))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
  (x16 (int-imm (bv #x00000001 32) #f)))
 (vec-shr
  (x16 (int-imm (bv #x00007fff 32) #t))
  (x16 (int-imm (bv #x00000001 32) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #xffffffff 32))
  (_mm256_add_epi8_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
      (_mm512_sllv_epi64_dsl
       (lit (bv #x0010 16))
       (lit
        (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
       256
       16
       16)
      256
      16)
     256
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
      (_mm512_sllv_epi64_dsl
       (lit (bv #x0010 16))
       (lit
        (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
       256
       16
       16)
      256
      16)
     256
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   512
   32)
  (lit (bv #x00000000 32))
  512
  32
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #xffffffff 32))
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
  (lit (bv #x00000000 32))
  512
  32
  32)
 512
 32)
========================================
here
(#(struct:vec-add #(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'uint32 512))
Hashed expression
(vec-shr '(buf int32 512) '(buf uint32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (reg (bv #x1 4))
 (lit (bv #xffffffff 32))
 (reg (bv #x0 4))
 (lit (bv #x00000000 32))
 512
 32
 32)
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32)
Cost
16
here
(#(struct:vec-add #(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-bwand #(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))) #(struct:vec-bwand #(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:vec-add #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fnrm: cannot remove '/tmp/base_5674_spec.JSON': No such file or directory
Pruning _mm512_broadcast_i32x4 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_broadcast_i32x8 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcast_i32x2 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi32 as it has an argument of size 32 which is smaller than 512
Pruning _mm512_broadcastd_epi32 as it has an argument of size 128 which is smaller than 512
Prunning Based of non-immediate usage pruned 5 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_andnot_epi32 with score: 5 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_epi64 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_andnot_si512 with score: 3 belonging to target agnostic class _mm512_andnot_epi32
Adding:  _mm512_and_epi32 with score: 5 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_si512 with score: 3 belonging to target agnostic class _mm256_and_si256
Adding:  _mm512_and_epi64 with score: 3 belonging to target agnostic class _mm256_and_si256
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 6
> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-bwand '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_5674

base_5674_grammar.rkt
/tmp/base_5674_grammar.rkt
Writing [{ 
"name": "base_5674" , 
"semantics": [ "(extract bvand)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [32, 32], 
"output_precision": 32, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5674_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5674_spec.JSON /tmp/base_5674_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5674 ... 

Grammar:
#<procedure:base_5674>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x6256c6f6b2c3dc5489edade34199a799b2b5fccb042bd3b5bda833d5715f16a12859c60bbe9006a9ebe19d2ab78c97774cf9a463ae45152b83614ab37c363563 512) (bv #xf292967a349831fde43752fdb46cc15688ce12e42e6015390df89eb2709c81fe0a03d9058bedaf9827f910196b12fd6f6a4e0a2fd0a6e5e8c6f615047b3973e9 512))
(vec-bwand (buffer #<procedure:buffer-fn> 'int32 512) (buffer #<procedure:buffer-fn> 'int32 512))
Spec result
(bv #x6212867230801054802500e100088110808410c0042011310da81290701c00a00801c0018a80068823e110082300956748480023800405288260000078303161 512)
invoke-spec-lane with env: #((bv #x6256c6f6b2c3dc5489edade34199a799b2b5fccb042bd3b5bda833d5715f16a12859c60bbe9006a9ebe19d2ab78c97774cf9a463ae45152b83614ab37c363563 512) (bv #xf292967a349831fde43752fdb46cc15688ce12e42e6015390df89eb2709c81fe0a03d9058bedaf9827f910196b12fd6f6a4e0a2fd0a6e5e8c6f615047b3973e9 512))
Concrete counter examples:
(#((bv #x6256c6f6b2c3dc5489edade34199a799b2b5fccb042bd3b5bda833d5715f16a12859c60bbe9006a9ebe19d2ab78c97774cf9a463ae45152b83614ab37c363563 512) (bv #xf292967a349831fde43752fdb46cc15688ce12e42e6015390df89eb2709c81fe0a03d9058bedaf9827f910196b12fd6f6a4e0a2fd0a6e5e8c6f615047b3973e9 512)) #((bv #x63ffde16cebdd4eb79bc934451da760b70ec1b282fdf3fee51dc56b8468113b231bd5cd4850c44a69faa713838397724a1be5193cf74a01b6cc85df4c1ea36f0 512) (bv #xd03793a5f7edc0c4c6caf84035c80dac417724851e2acc4da132e6c5fdcd57729131dfecb9f6bc0cd1bbe031342a56396317095b1f43402dc9beabd807d61006 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x6256c6f6b2c3dc5489edade34199a799b2b5fccb042bd3b5bda833d5715f16a12859c60bbe9006a9ebe19d2ab78c97774cf9a463ae45152b83614ab37c363563 512) (bv #xf292967a349831fde43752fdb46cc15688ce12e42e6015390df89eb2709c81fe0a03d9058bedaf9827f910196b12fd6f6a4e0a2fd0a6e5e8c6f615047b3973e9 512))
Spec Produced:
(bv #x78303161 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x63ffde16cebdd4eb79bc934451da760b70ec1b282fdf3fee51dc56b8468113b231bd5cd4850c44a69faa713838397724a1be5193cf74a01b6cc85df4c1ea36f0 512) (bv #xd03793a5f7edc0c4c6caf84035c80dac417724851e2acc4da132e6c5fdcd57729131dfecb9f6bc0cd1bbe031342a56396317095b1f43402dc9beabd807d61006 512))
Spec Produced:
(bv #x01c21000 32)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$63 sym_bv$64)

invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
invoke-spec-lane with env: #(sym_bv$63 sym_bv$64)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(vec-bwand '(buf int32 512) '(buf int32 512))
#(#t #(struct:_mm256_and_si256_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 512) 0)
Synthesis step completed!
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
Cost
4
here
(#(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:vec-mul #(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-add '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
(_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32)
Cost
4
here
(#(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-mul '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x06 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x06 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #f))
Hashed expression
(x16 (int-imm (bv #x0006 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0006 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x07 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x07 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0006 16) #f)))
 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0006 16) #f)))
  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16
 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x16
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0006 16) #f)))
   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================
here
(#(struct:int32x16 #(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))) #(struct:int32x16 #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-mul
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-mul '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
(_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64)
Cost
8
here
(#(struct:vec-add #(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16))))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:vec-shl #(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f))) #(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:int16x16 #(struct:buffer #<procedure:buffer-fn> uint8 128)) #(struct:x16 #(struct:int-imm (bv #x0006 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Hashed expression
(int16x16 '(buf uint8 128))
Leaves are bitvectors of sizes:
(128)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 128))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 128)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 128)
Sub-expression Synthesis completed:
(reg (bv #x08 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x08 8)))
========================================
Original Halide Sub-Expression:
(int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0006 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0006 16) #f))
Hashed expression
(x16 (int-imm (bv #x0006 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
(lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0006 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)))
========================================
Original Halide Sub-Expression:
(vec-shl
 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
 (x16 (int-imm (bv #x0006 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x09 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x09 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
  (x16 (int-imm (bv #x0006 16) #f)))
 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
  256
  16
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16
 (vec-add
  (vec-shl
   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
   (x16 (int-imm (bv #x0006 16) #f)))
  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm256_add_epi8_dsl
  (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
  (_mm512_sllv_epi64_dsl
   (lit (bv #x0010 16))
   (lit
    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
   256
   16
   16)
  256
  16)
 256
 16
 32)
========================================
here
(#(struct:x16 #(struct:buffer #<procedure:buffer-fn> int16 16)))
=======================================
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(int32x16 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(int32x16 '(buf int16 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
(_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x05 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x05 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16))
========================================
Original Halide Sub-Expression:
(int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_mm256_cvtepi8_epi32_dsl
 (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
 256
 16
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32))
========================================
Original Halide Sub-Expression:
(vec-mul
 (int32x16
  (vec-add
   (vec-shl
    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
    (x16 (int-imm (bv #x0006 16) #f)))
   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
Sub-expression Synthesis completed:
(_mm_mulhi_epu16_dsl
 (_mm256_cvtepi8_epi32_dsl
  (_mm256_add_epi8_dsl
   (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
   (_mm512_sllv_epi64_dsl
    (lit (bv #x0010 16))
    (lit
     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
    256
    16
    16)
   256
   16)
  256
  16
  32)
 (_mm256_cvtepi8_epi32_dsl
  (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
  256
  16
  32)
 512
 32
 0
 64)
========================================rm: cannot remove '/tmp/base_4018_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

Synthesized-leaves
(#(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-mul
  (int32x16
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0006 16) #f)))
    (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
 (vec-mul
  (int32x16
   (vec-add
    (vec-shl
     (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
     (x16 (int-imm (bv #x0006 16) #f)))
    (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   256
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 (_mm_mulhi_epu16_dsl
  (_mm256_cvtepi8_epi32_dsl
   (_mm256_add_epi8_dsl
    (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
    (_mm512_sllv_epi64_dsl
     (lit (bv #x0010 16))
     (lit
      (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
     (lit
      (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
     (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
     256
     16
     16)
    256
    16)
   256
   16
   32)
  (_mm256_cvtepi8_epi32_dsl
   (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
   256
   16
   32)
  512
  32
  0
  64)
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_4018

base_4018_grammar.rkt
/tmp/base_4018_grammar.rkt
Writing [{ 
"name": "base_4018" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 32]] 
}
] to file /tmp/base_4018_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_4018_spec.JSON /tmp/base_4018_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_4018 ... 

Grammar:
#<procedure:base_4018>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00000001 32) #t))
Spec result
(bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00000001 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00000001 32) #t))
#(#t #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (vec-add
  (vec-mul
   (int32x16
    (vec-add
     (vec-shl
      (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
      (x16 (int-imm (bv #x0006 16) #f)))
     (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
  (vec-mul
   (int32x16
    (vec-add
     (vec-shl
      (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
      (x16 (int-imm (bv #x0006 16) #f)))
     (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
 (x16 (int-imm (bv #x00000001 32) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (_mm256_add_epi8_dsl
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
     (_mm512_sllv_epi64_dsl
      (lit (bv #x0010 16))
      (lit
       (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
      256
      16
      16)
     256
     16)
    256
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  (_mm_mulhi_epu16_dsl
   (_mm256_cvtepi8_epi32_dsl
    (_mm256_add_epi8_dsl
     (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
     (_mm512_sllv_epi64_dsl
      (lit (bv #x0010 16))
      (lit
       (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
      (lit
       (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
      (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
      256
      16
      16)
     256
     16)
    256
    16
    32)
   (_mm256_cvtepi8_epi32_dsl
    (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
    256
    16
    32)
   512
   32
   0
   64)
  512
  32)
 512
 512)
========================================
here
(#(struct:x16 #(struct:int-imm (bv #x00007fff 32) #t)) #(struct:x16 #(struct:int-imm (bv #x00000001 32) #t)))
=======================================
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-bwand
 (buffer #<procedure:buffer-fn> 'int32 512)
 (buffer #<procedure:buffer-fn> 'int32 512))
Hashed expression
(vec-bwand '(buf int32 512) '(buf int32 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
(_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512)
Cost
4
here
()
=======================================
(x16 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x16 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-bwand
 (x16 (int-imm (bv #x00007fff 32) #t))
 (x16 (int-imm (bv #x00000001 32) #t)))
Sub-expression Synthesis completed:
(_mm256_and_si256_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
 512
 512)
========================================
Synthesized-leaves
(#(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-bwand
  (vec-add
   (vec-mul
    (int32x16
     (vec-add
      (vec-shl
       (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
       (x16 (int-imm (bv #x0006 16) #f)))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
   (vec-mul
    (int32x16
     (vec-add
      (vec-shl
       (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
       (x16 (int-imm (bv #x0006 16) #f)))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
  (x16 (int-imm (bv #x00000001 32) #t)))
 (vec-bwand
  (x16 (int-imm (bv #x00007fff 32) #t))
  (x16 (int-imm (bv #x00000001 32) #t))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_and_si256_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (_mm256_add_epi8_dsl
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
      (_mm512_sllv_epi64_dsl
       (lit (bv #x0010 16))
       (lit
        (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
       256
       16
       16)
      256
      16)
     256
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   (_mm_mulhi_epu16_dsl
    (_mm256_cvtepi8_epi32_dsl
     (_mm256_add_epi8_dsl
      (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
      (_mm512_sllv_epi64_dsl
       (lit (bv #x0010 16))
       (lit
        (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
       (lit
        (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
       (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
       256
       16
       16)
      256
      16)
     256
     16
     32)
    (_mm256_cvtepi8_epi32_dsl
     (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
     256
     16
     32)
    512
    32
    0
    64)
   512
   32)
  512
  512)
 (_mm256_and_si256_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
  512
  512)
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #t))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-bwand
   (vec-add
    (vec-mul
     (int32x16
      (vec-add
       (vec-shl
        (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
        (x16 (int-imm (bv #x0006 16) #f)))
       (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (vec-mul
     (int32x16
      (vec-add
       (vec-shl
        (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
        (x16 (int-imm (bv #x0006 16) #f)))
       (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
   (x16 (int-imm (bv #x00000001 32) #t)))
  (vec-bwand
   (x16 (int-imm (bv #x00007fff 32) #t))
   (x16 (int-imm (bv #x00000001 32) #t))))
 (x16 (int-imm (bv #x00000001 32) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm256_and_si256_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (_mm256_add_epi8_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
       (_mm512_sllv_epi64_dsl
        (lit (bv #x0010 16))
        (lit
         (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
        256
        16
        16)
       256
       16)
      256
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
       (_mm512_sllv_epi64_dsl
        (lit (bv #x0010 16))
        (lit
         (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
        256
        16
        16)
       256
       16)
      256
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    512
    32)
   512
   512)
  (_mm256_and_si256_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
   512
   512)
  512
  32)
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00000001 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00000001 32) #f))
Hashed expression
(x16 (int-imm (bv #x00000001 32) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
(lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00000001 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-bwand
    (vec-add
     (vec-mul
      (int32x16
       (vec-add
        (vec-shl
         (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
         (x16 (int-imm (bv #x0006 16) #f)))
        (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (vec-mul
      (int32x16
       (vec-add
        (vec-shl
         (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
         (x16 (int-imm (bv #x0006 16) #f)))
        (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
    (x16 (int-imm (bv #x00000001 32) #t)))
   (vec-bwand
    (x16 (int-imm (bv #x00007fff 32) #t))
    (x16 (int-imm (bv #x00000001 32) #t))))
  (x16 (int-imm (bv #x00000001 32) #t)))
 (x16 (int-imm (bv #x00000001 32) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 (lit (bv #xffffffff 32))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm256_and_si256_dsl
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (_mm256_add_epi8_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
        (_mm512_sllv_epi64_dsl
         (lit (bv #x0010 16))
         (lit
          (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
         256
         16
         16)
        256
        16)
       256
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
        (_mm512_sllv_epi64_dsl
         (lit (bv #x0010 16))
         (lit
          (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
         256
         16
         16)
        256
        16)
       256
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     512
     32)
    512
    512)
   (_mm256_and_si256_dsl
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
    512
    512)
   512
   32)
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  512
  32)
 (lit (bv #x00000000 32))
 512
 32
 32)
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-add
  (vec-shr
   (vec-add
    (vec-mul
     (int32x16
      (vec-add
       (vec-shl
        (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
        (x16 (int-imm (bv #x0006 16) #f)))
       (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
    (vec-mul
     (int32x16
      (vec-add
       (vec-shl
        (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
        (x16 (int-imm (bv #x0006 16) #f)))
       (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
   (x16 (int-imm (bv #x00000001 32) #f)))
  (vec-shr
   (x16 (int-imm (bv #x00007fff 32) #t))
   (x16 (int-imm (bv #x00000001 32) #f))))
 (vec-shr
  (vec-add
   (vec-add
    (vec-bwand
     (vec-add
      (vec-mul
       (int32x16
        (vec-add
         (vec-shl
          (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
          (x16 (int-imm (bv #x0006 16) #f)))
         (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (vec-mul
       (int32x16
        (vec-add
         (vec-shl
          (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
          (x16 (int-imm (bv #x0006 16) #f)))
         (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
     (x16 (int-imm (bv #x00000001 32) #t)))
    (vec-bwand
     (x16 (int-imm (bv #x00007fff 32) #t))
     (x16 (int-imm (bv #x00000001 32) #t))))
   (x16 (int-imm (bv #x00000001 32) #t)))
  (x16 (int-imm (bv #x00000001 32) #f))))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #xffffffff 32))
   (_mm256_add_epi8_dsl
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
       (_mm512_sllv_epi64_dsl
        (lit (bv #x0010 16))
        (lit
         (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
        256
        16
        16)
       256
       16)
      256
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    (_mm_mulhi_epu16_dsl
     (_mm256_cvtepi8_epi32_dsl
      (_mm256_add_epi8_dsl
       (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
       (_mm512_sllv_epi64_dsl
        (lit (bv #x0010 16))
        (lit
         (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
        (lit
         (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
        (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
        256
        16
        16)
       256
       16)
      256
      16
      32)
     (_mm256_cvtepi8_epi32_dsl
      (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
      256
      16
      32)
     512
     32
     0
     64)
    512
    32)
   (lit (bv #x00000000 32))
   512
   32
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #xffffffff 32))
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
   (lit (bv #x00000000 32))
   512
   32
   32)
  512
  32)
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  (lit (bv #xffffffff 32))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm256_and_si256_dsl
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (_mm256_add_epi8_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
         (_mm512_sllv_epi64_dsl
          (lit (bv #x0010 16))
          (lit
           (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
          (lit
           (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
          256
          16
          16)
         256
         16)
        256
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (rm: cannot remove '/tmp/base_8031_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
reg (bv #x09 8)) 256 16)
         (_mm512_sllv_epi64_dsl
          (lit (bv #x0010 16))
          (lit
           (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
          (lit
           (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
          256
          16
          16)
         256
         16)
        256
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      512
      32)
     512
     512)
    (_mm256_and_si256_dsl
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
     512
     512)
    512
    32)
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   512
   32)
  (lit (bv #x00000000 32))
  512
  32
  32)
 512
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0000000f 32) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0000000f 32) #f))
Hashed expression
(x16 (int-imm (bv #x0000000f 32) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8031

base_8031_grammar.rkt
/tmp/base_8031_grammar.rkt
Writing [{ 
"name": "base_8031" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[15, 32]] 
}
] to file /tmp/base_8031_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8031_spec.JSON /tmp/base_8031_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_8031 ... 

Grammar:
#<procedure:base_8031>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Verification failed ...
	spec produced: (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512) 512 
	synthesized result produced: (bv #x000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f 512) 512

invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
Difference  Predicate
'((0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0000000f 32) #f))
Spec result
(bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000000f 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0000000f 32) #f))
#(#t #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
(lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0000000f 32) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (vec-add
   (vec-shr
    (vec-add
     (vec-mul
      (int32x16
       (vec-add
        (vec-shl
         (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
         (x16 (int-imm (bv #x0006 16) #f)))
        (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
     (vec-mul
      (int32x16
       (vec-add
        (vec-shl
         (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
         (x16 (int-imm (bv #x0006 16) #f)))
        (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
    (x16 (int-imm (bv #x00000001 32) #f)))
   (vec-shr
    (x16 (int-imm (bv #x00007fff 32) #t))
    (x16 (int-imm (bv #x00000001 32) #f))))
  (vec-shr
   (vec-add
    (vec-add
     (vec-bwand
      (vec-add
       (vec-mul
        (int32x16
         (vec-add
          (vec-shl
           (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
           (x16 (int-imm (bv #x0006 16) #f)))
          (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (vec-mul
        (int32x16
         (vec-add
          (vec-shl
           (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
           (x16 (int-imm (bv #x0006 16) #f)))
          (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
      (x16 (int-imm (bv #x00000001 32) #t)))
     (vec-bwand
      (x16 (int-imm (bv #x00007fff 32) #t))
      (x16 (int-imm (bv #x00000001 32) #t))))
    (x16 (int-imm (bv #x00000001 32) #t)))
   (x16 (int-imm (bv #x00000001 32) #f))))
 (x16 (int-imm (bv #x0000000f 32) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x00000020 32))
 (lit
  (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
 (lit (bv #xffffffff 32))
 (_mm256_add_epi8_dsl
  (_mm256_add_epi8_dsl
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #xffffffff 32))
    (_mm256_add_epi8_dsl
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
        (_mm512_sllv_epi64_dsl
         (lit (bv #x0010 16))
         (lit
          (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
         256
         16
         16)
        256
        16)
       256
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     (_mm_mulhi_epu16_dsl
      (_mm256_cvtepi8_epi32_dsl
       (_mm256_add_epi8_dsl
        (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
        (_mm512_sllv_epi64_dsl
         (lit (bv #x0010 16))
         (lit
          (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
         (lit
          (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
         (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
         256
         16
         16)
        256
        16)
       256
       16
       32)
      (_mm256_cvtepi8_epi32_dsl
       (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
       256
       16
       32)
      512
      32
      0
      64)
     512
     32)
    (lit (bv #x00000000 32))
    512
    32
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #xffffffff 32))
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
    (lit (bv #x00000000 32))
    512
    32
    32)
   512
   32)
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   (lit (bv #xffffffff 32))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm256_and_si256_dsl
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (_mm256_add_epi8_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
          (_mm512_sllv_epi64_dsl
           (lit (bv #x0010 16))
           (lit
            (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
           (lit
            (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
           (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
           256
           16
           16)
          256
          16)
         256
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
          (_mm512_sllv_epi64_dsl
           (lit (bv #x0010 16))
           (lit
            (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
           (lit
            (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
           (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
           256
           16
           16)
          256
          16)
         256
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       512
       32)
      512
      512)
     (_mm256_and_si256_dsl
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
      512
      512)
     512
     32)
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    512
    32)
   (lit (bv #x00000000 32))
   512
   32
   32)
  512
  32)
 (lit (bv #x00000000 32))
 512
 32
 32)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00007fff 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x00007fff 32) #t))
Hashed expression
(x16 (int-imm (bv #x00007fff 32) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
(lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00007fff 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-shr
  (vec-add
   (vec-add
    (vec-shr
     (vec-add
      (vec-mul
       (int32x16
        (vec-add
         (vec-shl
          (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
          (x16 (int-imm (bv #x0006 16) #f)))
         (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
      (vec-mul
       (int32x16
        (vec-add
         (vec-shl
          (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
          (x16 (int-imm (bv #x0006 16) #f)))
         (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
     (x16 (int-imm (bv #x00000001 32) #f)))
    (vec-shr
     (x16 (int-imm (bv #x00007fff 32) #t))
     (x16 (int-imm (bv #x00000001 32) #f))))
   (vec-shr
    (vec-add
     (vec-add
      (vec-bwand
       (vec-add
        (vec-mul
         (int32x16
          (vec-add
           (vec-shl
            (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
            (x16 (int-imm (bv #x0006 16) #f)))
           (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (vec-mul
         (int32x16
          (vec-add
           (vec-shl
            (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
            (x16 (int-imm (bv #x0006 16) #f)))
           (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
       (x16 (int-imm (bv #x00000001 32) #t)))
      (vec-bwand
       (x16 (int-imm (bv #x00007fff 32) #t))
       (x16 (int-imm (bv #x00000001 32) #t))))
     (x16 (int-imm (bv #x00000001 32) #t)))
    (x16 (int-imm (bv #x00000001 32) #f))))
  (x16 (int-imm (bv #x0000000f 32) #f)))
 (x16 (int-imm (bv #x00007fff 32) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (lit
  (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
 (_mm512_srav_epi64_dsl
  (lit (bv #x00000020 32))
  (lit
   (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
  (lit (bv #xffffffff 32))
  (_mm256_add_epi8_dsl
   (_mm256_add_epi8_dsl
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #xffffffff 32))
     (_mm256_add_epi8_dsl
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
         (_mm512_sllv_epi64_dsl
          (lit (bv #x0010 16))
          (lit
           (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
          (lit
           (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
          256
          16
          16)
         256
         16)
        256
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      (_mm_mulhi_epu16_dsl
       (_mm256_cvtepi8_epi32_dsl
        (_mm256_add_epi8_dsl
         (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
         (_mm512_sllv_epi64_dsl
          (lit (bv #x0010 16))
          (lit
           (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
          (lit
           (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
          (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
          256
          16
          16)
         256
         16)
        256
        16
        32)
       (_mm256_cvtepi8_epi32_dsl
        (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
        256
        16
        32)
       512
       32
       0
       64)
      512
      32)
     (lit (bv #x00000000 32))
     512
     32
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #xffffffff 32))
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
     (lit (bv #x00000000 32))
     512
     32
     32)
    512
    32)
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (lit
     (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
    (lit (bv #xffffffff 32))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm256_and_si256_dsl
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (_mm256_add_epi8_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
           (_mm512_sllv_epi64_dsl
            (lit (bv #x0010 16))
            (lit
             (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
            (lit
             (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
            (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
            256
            16
            16)
           256
           16)
          256
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
           (_mm512_sllv_epi64_dsl
            (lit (bv #x0010 16))
            (lit
             (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
            (lit
             (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
            (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
            256
            16
            16)
           256
           16)
          256
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        512
        32)
       512
       512)
      (_mm256_and_si256_dsl
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit
        (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
       512
       512)
      512
      32)
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     512
     32)
    (lit (bv #x00000000 32))
    512
    32
    32)
   512
   32)
  (lit (bv #x00000000 32))
  512
  32
  32)
 512
 32)
========================================
here
()
=======================================rm: cannot remove '/tmp/base_6282_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i32x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x2 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_set1_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_broadcastd_epi32 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

(x16 (int-imm (bv #xffff8000 32) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #xffff8000 32) #t))
Hashed expression
(x16 (int-imm (bv #xffff8000 32) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_6282

base_6282_grammar.rkt
/tmp/base_6282_grammar.rkt
Writing [{ 
"name": "base_6282" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 32, 
"args": [], 
"spec_invokation": "",
"imms": [[-32768, 32]] 
}
] to file /tmp/base_6282_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6282_spec.JSON /tmp/base_6282_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6282 ... 

Grammar:
#<procedure:base_6282>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #xffff8000 32) #t))
Spec result
(bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #xffff8000 32)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(x16 (int-imm (bv #xffff8000 32) #t))
#(#t #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 1)
Synthesis step completed!
Solution
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
(lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #xffff8000 32) #t))
Sub-expression Synthesis completed:
(lit
 (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-shr
   (vec-add
    (vec-add
     (vec-shr
      (vec-add
       (vec-mul
        (int32x16
         (vec-add
          (vec-shl
           (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
           (x16 (int-imm (bv #x0006 16) #f)))
          (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
       (vec-mul
        (int32x16
         (vec-add
          (vec-shl
           (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
           (x16 (int-imm (bv #x0006 16) #f)))
          (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
      (x16 (int-imm (bv #x00000001 32) #f)))
     (vec-shr
      (x16 (int-imm (bv #x00007fff 32) #t))
      (x16 (int-imm (bv #x00000001 32) #f))))
    (vec-shr
     (vec-add
      (vec-add
       (vec-bwand
        (vec-add
         (vec-mul
          (int32x16
           (vec-add
            (vec-shl
             (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
             (x16 (int-imm (bv #x0006 16) #f)))
            (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (vec-mul
          (int32x16
           (vec-add
            (vec-shl
             (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
             (x16 (int-imm (bv #x0006 16) #f)))
            (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
        (x16 (int-imm (bv #x00000001 32) #t)))
       (vec-bwand
        (x16 (int-imm (bv #x00007fff 32) #t))
        (x16 (int-imm (bv #x00000001 32) #t))))
      (x16 (int-imm (bv #x00000001 32) #t)))
     (x16 (int-imm (bv #x00000001 32) #f))))
   (x16 (int-imm (bv #x0000000f 32) #f)))
  (x16 (int-imm (bv #x00007fff 32) #t)))
 (x16 (int-imm (bv #xffff8000 32) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (_mm256_min_epi16_dsl
  (lit
   (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
  (_mm512_srav_epi64_dsl
   (lit (bv #x00000020 32))
   (lit
    (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
   (lit (bv #xffffffff 32))
   (_mm256_add_epi8_dsl
    (_mm256_add_epi8_dsl
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #xffffffff 32))
      (_mm256_add_epi8_dsl
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
          (_mm512_sllv_epi64_dsl
           (lit (bv #x0010 16))
           (lit
            (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
           (lit
            (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
           (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
           256
           16
           16)
          256
          16)
         256
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       (_mm_mulhi_epu16_dsl
        (_mm256_cvtepi8_epi32_dsl
         (_mm256_add_epi8_dsl
          (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
          (_mm512_sllv_epi64_dsl
           (lit (bv #x0010 16))
           (lit
            (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
           (lit
            (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
           (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
           256
           16
           16)
          256
          16)
         256
         16
         32)
        (_mm256_cvtepi8_epi32_dsl
         (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
         256
         16
         32)
        512
        32
        0
        64)
       512
       32)
      (lit (bv #x00000000 32))
      512
      32
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #xffffffff 32))
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
      (lit (bv #x00000000 32))
      512
      32
      32)
     512
     32)
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (lit
      (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
     (lit (bv #xffffffff 32))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm256_and_si256_dsl
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (_mm256_add_epi8_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
            (_mm512_sllv_epi64_dsl
             (lit (bv #x0010 16))
             (lit
              (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
             (lit
              (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
             (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
             256
             16
             16)
            256
            16)
           256
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
            (_mm512_sllv_epi64_dsl
             (lit (bv #x0010 16))
             (lit
              (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
             (lit
              (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
             (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
             256
             16
             16)
            256
            16)
           256
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         512
         32)
        512
        512)
       (_mm256_and_si256_dsl
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit
         (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
        512
        512)
       512
       32)
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      512
      32)
     (lit (bv #x00000000 32))
     512
     32
     32)
    512
    32)
   (lit (bv #x00000000 32))
   512
   32
   32)
  512
  32)
 (lit
  (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
 512
 32)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32))
========================================
Original Halide Sub-Expression:
(int16x16
 (vec-max
  (vec-min
   (vec-shr
    (vec-add
     (vec-add
      (vec-shr
       (vec-add
        (vec-mul
         (int32x16
          (vec-add
           (vec-shl
            (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
            (x16 (int-imm (bv #x0006 16) #f)))
           (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
        (vec-mul
         (int32x16
          (vec-add
           (vec-shl
            (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
            (x16 (int-imm (bv #x0006 16) #f)))
           (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
       (x16 (int-imm (bv #x00000001 32) #f)))
      (vec-shr
       (x16 (int-imm (bv #x00007fff 32) #t))
       (x16 (int-imm (bv #x00000001 32) #f))))
     (vec-shr
      (vec-add
       (vec-add
        (vec-bwand
         (vec-add
          (vec-mul
           (int32x16
            (vec-add
             (vec-shl
              (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
              (x16 (int-imm (bv #x0006 16) #f)))
             (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (vec-mul
           (int32x16
            (vec-add
             (vec-shl
              (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
              (x16 (int-imm (bv #x0006 16) #f)))
             (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
         (x16 (int-imm (bv #x00000001 32) #t)))
        (vec-bwand
         (x16 (int-imm (bv #x00007fff 32) #t))
         (x16 (int-imm (bv #x00000001 32) #t))))
       (x16 (int-imm (bv #x00000001 32) #t)))
      (x16 (int-imm (bv #x00000001 32) #f))))
    (x16 (int-imm (bv #x0000000f 32) #f)))
   (x16 (int-imm (bv #x00007fff 32) #t)))
  (x16 (int-imm (bv #xffff8000 32) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (_mm256_min_epi16_dsl
   (lit
    (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
   (_mm512_srav_epi64_dsl
    (lit (bv #x00000020 32))
    (lit
     (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
    (lit (bv #xffffffff 32))
    (_mm256_add_epi8_dsl
     (_mm256_add_epi8_dsl
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #xffffffff 32))
       (_mm256_add_epi8_dsl
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
           (_mm512_sllv_epi64_dsl
            (lit (bv #x0010 16))
            (lit
             (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
            (lit
             (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
            (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
            256
            16
            16)
           256
           16)
          256
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        (_mm_mulhi_epu16_dsl
         (_mm256_cvtepi8_epi32_dsl
          (_mm256_add_epi8_dsl
           (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
           (_mm512_sllv_epi64_dsl
            (lit (bv #x0010 16))
            (lit
             (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
            (lit
             (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
            (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
            256
            16
            16)
           256
           16)
          256
          16
          32)
         (_mm256_cvtepi8_epi32_dsl
          (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
          256
          16
          32)
         512
         32
         0
         64)
        512
        32)
       (lit (bv #x00000000 32))
       512
       32
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #xffffffff 32))
       (lit
        (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
       (lit (bv #x00000000 32))
       512
       32
       32)
      512
      32)
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (lit
       (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
      (lit (bv #xffffffff 32))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm256_and_si256_dsl
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (_mm256_add_epi8_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
             (_mm512_sllv_epi64_dsl
              (lit (bv #x0010 16))
              (lit
               (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
              (lit
               (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
              (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
              256
              16
              16)
             256
             16)
            256
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
            256
            16
            32)
           512
           32
           0
           64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
             (_mm512_sllv_epi64_dsl
              (lit (bv #x0010 16))
              (lit
               (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
              (lit
               (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
              (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
              256
              16
              16)
             256
             16)
            256
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
            256
            16
            32)
           512
           32
           0
           64)
          512
          32)
         512
         512)
        (_mm256_and_si256_dsl
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit
          (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
         512
         512)
        512
        32)
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       512
       32)
      (lit (bv #x00000000 32))
      512
      32
      32)
     512
     32)
    (lit (bv #x00000000 32))
    512
    32
    32)
   512
   32)
  (lit
   (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
  512
  32)
 256
 16
 32
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Hashed expression
(x16 '(buf int16 16))
Leaves are bitvectors of sizes:
(16)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> int16 16))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 16)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 16)
Sub-expression Synthesis completed:
(reg (bv #x0a 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0a 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'int16 16))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-sat-add
 (int16x16
  (vec-max
   (vec-min
    (vec-shr
     (vec-add
      (vec-add
       (vec-shr
        (vec-add
         (vec-mul
          (int32x16
           (vec-add
            (vec-shl
             (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
             (x16 (int-imm (bv #x0006 16) #f)))
            (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
         (vec-mul
          (int32x16
           (vec-add
            (vec-shl
             (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
             (x16 (int-imm (bv #x0006 16) #f)))
            (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
        (x16 (int-imm (bv #x00000001 32) #f)))
       (vec-shr
        (x16 (int-imm (bv #x00007fff 32) #t))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (vec-shr
       (vec-add
        (vec-add
         (vec-bwand
          (vec-add
           (vec-mul
            (int32x16
             (vec-add
              (vec-shl
               (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
               (x16 (int-imm (bv #x0006 16) #f)))
              (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (vec-mul
            (int32x16
             (vec-add
              (vec-shl
               (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
               (x16 (int-imm (bv #x0006 16) #f)))
              (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
          (x16 (int-imm (bv #x00000001 32) #t)))
         (vec-bwand
          (x16 (int-imm (bv #x00007fff 32) #t))
          (x16 (int-imm (bv #x00000001 32) #t))))
        (x16 (int-imm (bv #x00000001 32) #t)))
       (x16 (int-imm (bv #x00000001 32) #f))))
     (x16 (int-imm (bv #x0000000f 32) #f)))
    (x16 (int-imm (bv #x00007fff 32) #t)))
   (x16 (int-imm (bv #xffff8000 32) #t))))
 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
Sub-expression Synthesis completed:
(_m_paddsb_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (_mm256_min_epi16_dsl
    (lit
     (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
    (_mm512_srav_epi64_dsl
     (lit (bv #x00000020 32))
     (lit
      (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
     (lit (bv #xffffffff 32))
     (_mm256_add_epi8_dsl
      (_mm256_add_epi8_dsl
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #xffffffff 32))
        (_mm256_add_epi8_dsl
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
            (_mm512_sllv_epi64_dsl
             (lit (bv #x0010 16))
             (lit
              (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
             (lit
              (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
             (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
             256
             16
             16)
            256
            16)
           256
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         (_mm_mulhi_epu16_dsl
          (_mm256_cvtepi8_epi32_dsl
           (_mm256_add_epi8_dsl
            (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
            (_mm512_sllv_epi64_dsl
             (lit (bv #x0010 16))
             (lit
              (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
             (lit
              (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
             (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
             256
             16
             16)
            256
            16)
           256
           16
           32)
          (_mm256_cvtepi8_epi32_dsl
           (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
           256
           16
           32)
          512
          32
          0
          64)
         512
         32)
        (lit (bv #x00000000 32))
        512
        32
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #xffffffff 32))
        (lit
         (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
        (lit (bv #x00000000 32))
        512
        32
        32)
       512
       32)
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (lit
        (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
       (lit (bv #xffffffff 32))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm256_and_si256_dsl
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          (_mm256_add_epi8_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
              (_mm512_sllv_epi64_dsl
               (lit (bv #x0010 16))
               (lit
                (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
               (lit
                (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
               (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
               256
               16
               16)
              256
              16)
             256
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
             256
             16
             32)
            512
            32
            0
            64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
              (_mm512_sllv_epi64_dsl
               (lit (bv #x0010 16))
               (lit
                (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
               (lit
                (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
               (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
               256
               16
               16)
              256
              16)
             256
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
             256
             16
             32)
            512
            32
            0
            64)
           512
           32)
          512
          512)
         (_mm256_and_si256_dsl
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          (lit
           (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
          512
          512)
         512
         32)
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        512
        32)
       (lit (bv #x00000000 32))
       512
       32
       32)
      512
      32)
     (lit (bv #x00000000 32))
     512
     32
     32)
    512
    32)
   (lit
    (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
   512
   32)
  256
  16
  32
  0)
 (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
 256
 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x00ff 16) #t))
Vectorization factor for sub expression 16
rm: cannot remove '/tmp/base_3029_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5

Synthesizing sub-expression
(x16 (int-imm (bv #x00ff 16) #t))
Hashed expression
(x16 (int-imm (bv #x00ff 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_3029

base_3029_grammar.rkt
/tmp/base_3029_grammar.rkt
Writing [{ 
"name": "base_3029" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[255, 16]] 
}
] to file /tmp/base_3029_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3029_spec.JSON /tmp/base_3029_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_3029 ... 

Grammar:
#<procedure:base_3029>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x00ff 16) #t))
Spec result
(bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x00ff 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x00ff 16) #t))
#(#t #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
(lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x00ff 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
========================================
Synthesized-leaves
(#(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16) 256 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)))
========================================
Original Halide Sub-Expression:
(vec-min
 (vec-sat-add
  (int16x16
   (vec-max
    (vec-min
     (vec-shr
      (vec-add
       (vec-add
        (vec-shr
         (vec-add
          (vec-mul
           (int32x16
            (vec-add
             (vec-shl
              (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
              (x16 (int-imm (bv #x0006 16) #f)))
             (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
          (vec-mul
           (int32x16
            (vec-add
             (vec-shl
              (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
              (x16 (int-imm (bv #x0006 16) #f)))
             (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
         (x16 (int-imm (bv #x00000001 32) #f)))
        (vec-shr
         (x16 (int-imm (bv #x00007fff 32) #t))
         (x16 (int-imm (bv #x00000001 32) #f))))
       (vec-shr
        (vec-add
         (vec-add
          (vec-bwand
           (vec-add
            (vec-mul
             (int32x16
              (vec-add
               (vec-shl
                (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                (x16 (int-imm (bv #x0006 16) #f)))
               (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (vec-mul
             (int32x16
              (vec-add
               (vec-shl
                (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                (x16 (int-imm (bv #x0006 16) #f)))
               (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
           (x16 (int-imm (bv #x00000001 32) #t)))
          (vec-bwand
           (x16 (int-imm (bv #x00007fff 32) #t))
           (x16 (int-imm (bv #x00000001 32) #t))))
         (x16 (int-imm (bv #x00000001 32) #t)))
        (x16 (int-imm (bv #x00000001 32) #f))))
      (x16 (int-imm (bv #x0000000f 32) #f)))
     (x16 (int-imm (bv #x00007fff 32) #t)))
    (x16 (int-imm (bv #xffff8000 32) #t))))
  (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
 (x16 (int-imm (bv #x00ff 16) #t)))
Sub-expression Synthesis completed:
(_mm256_min_epi16_dsl
 (_m_paddsb_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (_mm256_min_epi16_dsl
     (lit
      (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
     (_mm512_srav_epi64_dsl
      (lit (bv #x00000020 32))
      (lit
       (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
      (lit (bv #xffffffff 32))
      (_mm256_add_epi8_dsl
       (_mm256_add_epi8_dsl
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit (bv #xffffffff 32))
         (_mm256_add_epi8_dsl
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
             (_mm512_sllv_epi64_dsl
              (lit (bv #x0010 16))
              (lit
               (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
              (lit
               (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
              (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
              256
              16
              16)
             256
             16)
            256
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
            256
            16
            32)
           512
           32
           0
           64)
          (_mm_mulhi_epu16_dsl
           (_mm256_cvtepi8_epi32_dsl
            (_mm256_add_epi8_dsl
             (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
             (_mm512_sllv_epi64_dsl
              (lit (bv #x0010 16))
              (lit
               (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
              (lit
               (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
              (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
              256
              16
              16)
             256
             16)
            256
            16
            32)
           (_mm256_cvtepi8_epi32_dsl
            (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
            256
            16
            32)
           512
           32
           0
           64)
          512
          32)
         (lit (bv #x00000000 32))
         512
         32
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit (bv #xffffffff 32))
         (lit
          (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
         (lit (bv #x00000000 32))
         512
         32
         32)
        512
        32)
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (lit
         (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
        (lit (bv #xffffffff 32))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm256_and_si256_dsl
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           (_mm256_add_epi8_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
               (_mm512_sllv_epi64_dsl
                (lit (bv #x0010 16))
                (lit
                 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                (lit
                 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
                256
                16
                16)
               256
               16)
              256
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
              256
              16
              32)
             512
             32
             0
             64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
               (_mm512_sllv_epi64_dsl
                (lit (bv #x0010 16))
                (lit
                 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                (lit
                 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
                256
                16
                16)
               256
               16)
              256
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
              256
              16
              32)
             512
             32
             0
             64)
            512
            32)
           512
           512)
          (_mm256_and_si256_dsl
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           (lit
            (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fffrm: cannot remove '/tmp/base_1030_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
 512))
           512
           512)
          512
          32)
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         512
         32)
        (lit (bv #x00000000 32))
        512
        32
        32)
       512
       32)
      (lit (bv #x00000000 32))
      512
      32
      32)
     512
     32)
    (lit
     (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
    512
    32)
   256
   16
   32
   0)
  (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
  256
  16)
 (lit
  (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
 256
 16)
========================================
here
()
=======================================
(x16 (int-imm (bv #x0000 16) #t))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0000 16) #t))
Hashed expression
(x16 (int-imm (bv #x0000 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_1030

base_1030_grammar.rkt
/tmp/base_1030_grammar.rkt
Writing [{ 
"name": "base_1030" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[0, 16]] 
}
] to file /tmp/base_1030_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1030_spec.JSON /tmp/base_1030_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_1030 ... 

Grammar:
#<procedure:base_1030>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0000 16) #t))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0000 16) #t))
#(#t #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0000 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
========================================
Synthesized-leaves
(#(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16) 256 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 256 16) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (vec-sat-add
   (int16x16
    (vec-max
     (vec-min
      (vec-shr
       (vec-add
        (vec-add
         (vec-shr
          (vec-add
           (vec-mul
            (int32x16
             (vec-add
              (vec-shl
               (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
               (x16 (int-imm (bv #x0006 16) #f)))
              (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
           (vec-mul
            (int32x16
             (vec-add
              (vec-shl
               (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
               (x16 (int-imm (bv #x0006 16) #f)))
              (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
          (x16 (int-imm (bv #x00000001 32) #f)))
         (vec-shr
          (x16 (int-imm (bv #x00007fff 32) #t))
          (x16 (int-imm (bv #x00000001 32) #f))))
        (vec-shr
         (vec-add
          (vec-add
           (vec-bwand
            (vec-add
             (vec-mul
              (int32x16
               (vec-add
                (vec-shl
                 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                 (x16 (int-imm (bv #x0006 16) #f)))
                (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (vec-mul
              (int32x16
               (vec-add
                (vec-shl
                 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                 (x16 (int-imm (bv #x0006 16) #f)))
                (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
            (x16 (int-imm (bv #x00000001 32) #t)))
           (vec-bwand
            (x16 (int-imm (bv #x00007fff 32) #t))
            (x16 (int-imm (bv #x00000001 32) #t))))
          (x16 (int-imm (bv #x00000001 32) #t)))
         (x16 (int-imm (bv #x00000001 32) #f))))
       (x16 (int-imm (bv #x0000000f 32) #f)))
      (x16 (int-imm (bv #x00007fff 32) #t)))
     (x16 (int-imm (bv #xffff8000 32) #t))))
   (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
  (x16 (int-imm (bv #x00ff 16) #t)))
 (x16 (int-imm (bv #x0000 16) #t)))
Sub-expression Synthesis completed:
(_mm512_max_epi16_dsl
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (_mm256_min_epi16_dsl
  (_m_paddsb_dsl
   (_mm_cvtepi64_epi32_dsl
    (_mm512_max_epi16_dsl
     (_mm256_min_epi16_dsl
      (lit
       (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
      (_mm512_srav_epi64_dsl
       (lit (bv #x00000020 32))
       (lit
        (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
       (lit (bv #xffffffff 32))
       (_mm256_add_epi8_dsl
        (_mm256_add_epi8_dsl
         (_mm512_srav_epi64_dsl
          (lit (bv #x00000020 32))
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          (lit (bv #xffffffff 32))
          (_mm256_add_epi8_dsl
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
              (_mm512_sllv_epi64_dsl
               (lit (bv #x0010 16))
               (lit
                (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
               (lit
                (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
               (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
               256
               16
               16)
              256
              16)
             256
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
             256
             16
             32)
            512
            32
            0
            64)
           (_mm_mulhi_epu16_dsl
            (_mm256_cvtepi8_epi32_dsl
             (_mm256_add_epi8_dsl
              (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
              (_mm512_sllv_epi64_dsl
               (lit (bv #x0010 16))
               (lit
                (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
               (lit
                (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
               (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
               256
               16
               16)
              256
              16)
             256
             16
             32)
            (_mm256_cvtepi8_epi32_dsl
             (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
             256
             16
             32)
            512
            32
            0
            64)
           512
           32)
          (lit (bv #x00000000 32))
          512
          32
          32)
         (_mm512_srav_epi64_dsl
          (lit (bv #x00000020 32))
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          (lit (bv #xffffffff 32))
          (lit
           (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
          (lit (bv #x00000000 32))
          512
          32
          32)
         512
         32)
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (lit
          (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
         (lit (bv #xffffffff 32))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm256_and_si256_dsl
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            (_mm256_add_epi8_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
                (_mm512_sllv_epi64_dsl
                 (lit (bv #x0010 16))
                 (lit
                  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                 (lit
                  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                 (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
                 256
                 16
                 16)
                256
                16)
               256
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
               256
               16
               32)
              512
              32
              0
              64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
                (_mm512_sllv_epi64_dsl
                 (lit (bv #x0010 16))
                 (lit
                  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                 (lit
                  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                 (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
                 256
                 16
                 16)
                256
                16)
               256
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
               256
               16
               32)
              512
              32
              0
              64)
             512
             32)
            512
            512)
           (_mm256_and_si256_dsl
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            (lit
             (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
            512
            512)
           512
           32)
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          512
          32)
         (lit (bv #x00000000 32))
         512
         32
         32)
        512
        32)
       (lit (bv #x00000000 32))
       512
       32
       32)
      512
      32)
     (lit
      (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
     512
     32)
    256
    16
    32
    0)
   (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
   256
   16)
  (lit
   (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
  256
  16)
 256
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_max_epi16_dsl #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16) 256 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 256 16) 256 16))
========================================
Original Halide Sub-Expression:
(uint8x16
 (vec-max
  (vec-min
   (vec-sat-add
    (int16x16
     (vec-max
      (vec-min
       (vec-shr
        (vec-add
         (vec-add
          (vec-shr
           (vec-add
            (vec-mul
             (int32x16
              (vec-add
               (vec-shl
                (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                (x16 (int-imm (bv #x0006 16) #f)))
               (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
            (vec-mul
             (int32x16
              (vec-add
               (vec-shl
                (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                (x16 (int-imm (bv #x0006 16) #f)))
               (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
           (x16 (int-imm (bv #x00000001 32) #f)))
          (vec-shr
           (x16 (int-imm (bv #x00007fff 32) #t))
           (x16 (int-imm (bv #x00000001 32) #f))))
         (vec-shr
          (vec-add
           (vec-add
            (vec-bwand
             (vec-add
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
             (x16 (int-imm (bv #x00000001 32) #t)))
            (vec-bwand
             (x16 (int-imm (bv #x00007fff 32) #t))
             (x16 (int-imm (bv #x00000001 32) #t))))
           (x16 (int-imm (bv #x00000001 32) #t)))
          (x16 (int-imm (bv #x00000001 32) #f))))
        (x16 (int-imm (bv #x0000000f 32) #f)))
       (x16 (int-imm (bv #x00007fff 32) #t)))
      (x16 (int-imm (bv #xffff8000 32) #t))))
    (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
   (x16 (int-imm (bv #x00ff 16) #t)))
  (x16 (int-imm (bv #x0000 16) #t))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_max_epi16_dsl
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (_mm256_min_epi16_dsl
   (_m_paddsb_dsl
    (_mm_cvtepi64_epi32_dsl
     (_mm512_max_epi16_dsl
      (_mm256_min_epi16_dsl
       (lit
        (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
       (_mm512_srav_epi64_dsl
        (lit (bv #x00000020 32))
        (lit
         (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
        (lit (bv #xffffffff 32))
        (_mm256_add_epi8_dsl
         (_mm256_add_epi8_dsl
          (_mm512_srav_epi64_dsl
           (lit (bv #x00000020 32))
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           (lit (bv #xffffffff 32))
           (_mm256_add_epi8_dsl
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
               (_mm512_sllv_epi64_dsl
                (lit (bv #x0010 16))
                (lit
                 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                (lit
                 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
                256
                16
                16)
               256
               16)
              256
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
              256
              16
              32)
             512
             32
             0
             64)
            (_mm_mulhi_epu16_dsl
             (_mm256_cvtepi8_epi32_dsl
              (_mm256_add_epi8_dsl
               (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
               (_mm512_sllv_epi64_dsl
                (lit (bv #x0010 16))
                (lit
                 (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                (lit
                 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
                256
                16
                16)
               256
               16)
              256
              16
              32)
             (_mm256_cvtepi8_epi32_dsl
              (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
              256
              16
              32)
             512
             32
             0
             64)
            512
            32)
           (lit (bv #x00000000 32))
           512
           32
           32)
          (_mm512_srav_epi64_dsl
           (lit (bv #x00000020 32))
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           (lit (bv #xffffffff 32))
           (lit
            (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
           (lit (bv #x00000000 32))
           512
           32
           32)
          512
          32)
         (_mm512_srav_epi64_dsl
          (lit (bv #x00000020 32))
          (lit
           (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
          (lit (bv #xffffffff 32))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm256_and_si256_dsl
             (lit
              (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
             (_mm256_add_epi8_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
                 (_mm512_sllv_epi64_dsl
                  (lit (bv #x0010 16))
                  (lit
                   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                  (lit
                   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                  (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
                  256
                  16
                  16)
                 256
                 16)
                256
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
                256
                16
                32)
               512
               32
               0
               64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
                 (_mm512_sllv_epi64_dsl
                  (lit (bv #x0010 16))
                  (lit
                   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                  (lit
                   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                  (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
                  256
                  16
                  16)
                 256
                 16)
                256
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
                256
                16
                32)
               512rm: cannot remove '/tmp/base_6353_spec.JSON': No such file or directory
Prunning Based of non-immediate usage pruned 0 instructions ... 
Actual Broadcast ops 11
Actual Compute ops 0
Num Broadcasts: 25
Num Computes: 15
Adding:  _mm_set1_epi8 with score: 4 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_cvtsepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi8 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_cvtepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_cvtepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm_packus_epi16 with score: 3 belonging to target agnostic class _mm_packus_epi16
Adding:  _mm_broadcastb_epi8 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm_unpacklo_epi8 with score: 3 belonging to target agnostic class _mm_unpacklo_epi32
Adding:  _mm_cvtusepi16_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi8 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm_packs_epi16 with score: 3 belonging to target agnostic class _m_packsswb
==================================================
Grammar Number of Load DSL Clauses:	 13
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 11

               32
               0
               64)
              512
              32)
             512
             512)
            (_mm256_and_si256_dsl
             (lit
              (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
             (lit
              (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
             512
             512)
            512
            32)
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           512
           32)
          (lit (bv #x00000000 32))
          512
          32
          32)
         512
         32)
        (lit (bv #x00000000 32))
        512
        32
        32)
       512
       32)
      (lit
       (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
      512
      32)
     256
     16
     32
     0)
    (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
    256
    16)
   (lit
    (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
   256
   16)
  256
  16)
 128
 8
 16
 0)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x16 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
get-expr-grammar with base_name: base_6353

base_6353_grammar.rkt
/tmp/base_6353_grammar.rkt
Writing [{ 
"name": "base_6353" , 
"semantics": [ "()"] , 
"input_shapes": [[1,1]], 
"output_shape": [1 , 16], 
"input_precision": [8], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_8"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_6353_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6353_spec.JSON /tmp/base_6353_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_6353 ... 

Grammar:
#<procedure:base_6353>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x9f 8))
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Spec result
(bv #x9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f 128)
invoke-spec-lane with env: #((bv #x9f 8))
Concrete counter examples:
(#((bv #x9f 8)) #((bv #x66 8)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x9f 8))
Spec Produced:
(bv #x9f 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x66 8))
Spec Produced:
(bv #x66 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$65)

invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
invoke-spec-lane with env: #(sym_bv$65)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 '(buf uint8 8))
#(#t #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0 4)) 128 8) 0)
Synthesis step completed!
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x0b 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0b 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x0b 8)) 128 8)
========================================
Synthesized-leaves
(#(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16) 256 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 256 16) 256 16) 128 8 16 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0b 8)) 128 8))
========================================
Original Halide Sub-Expression:
(vec-min
 (uint8x16
  (vec-max
   (vec-min
    (vec-sat-add
     (int16x16
      (vec-max
       (vec-min
        (vec-shr
         (vec-add
          (vec-add
           (vec-shr
            (vec-add
             (vec-mul
              (int32x16
               (vec-add
                (vec-shl
                 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                 (x16 (int-imm (bv #x0006 16) #f)))
                (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
             (vec-mul
              (int32x16
               (vec-add
                (vec-shl
                 (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                 (x16 (int-imm (bv #x0006 16) #f)))
                (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
            (x16 (int-imm (bv #x00000001 32) #f)))
           (vec-shr
            (x16 (int-imm (bv #x00007fff 32) #t))
            (x16 (int-imm (bv #x00000001 32) #f))))
          (vec-shr
           (vec-add
            (vec-add
             (vec-bwand
              (vec-add
               (vec-mul
                (int32x16
                 (vec-add
                  (vec-shl
                   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                   (x16 (int-imm (bv #x0006 16) #f)))
                  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (vec-mul
                (int32x16
                 (vec-add
                  (vec-shl
                   (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                   (x16 (int-imm (bv #x0006 16) #f)))
                  (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
              (x16 (int-imm (bv #x00000001 32) #t)))
             (vec-bwand
              (x16 (int-imm (bv #x00007fff 32) #t))
              (x16 (int-imm (bv #x00000001 32) #t))))
            (x16 (int-imm (bv #x00000001 32) #t)))
           (x16 (int-imm (bv #x00000001 32) #f))))
         (x16 (int-imm (bv #x0000000f 32) #f)))
        (x16 (int-imm (bv #x00007fff 32) #t)))
       (x16 (int-imm (bv #xffff8000 32) #t))))
     (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
    (x16 (int-imm (bv #x00ff 16) #t)))
   (x16 (int-imm (bv #x0000 16) #t))))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_m_pminub_dsl
 (_mm_cvtepi64_epi32_dsl
  (_mm512_max_epi16_dsl
   (lit
    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
   (_mm256_min_epi16_dsl
    (_m_paddsb_dsl
     (_mm_cvtepi64_epi32_dsl
      (_mm512_max_epi16_dsl
       (_mm256_min_epi16_dsl
        (lit
         (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
        (_mm512_srav_epi64_dsl
         (lit (bv #x00000020 32))
         (lit
          (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
         (lit (bv #xffffffff 32))
         (_mm256_add_epi8_dsl
          (_mm256_add_epi8_dsl
           (_mm512_srav_epi64_dsl
            (lit (bv #x00000020 32))
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            (lit (bv #xffffffff 32))
            (_mm256_add_epi8_dsl
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
                (_mm512_sllv_epi64_dsl
                 (lit (bv #x0010 16))
                 (lit
                  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                 (lit
                  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                 (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
                 256
                 16
                 16)
                256
                16)
               256
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
               256
               16
               32)
              512
              32
              0
              64)
             (_mm_mulhi_epu16_dsl
              (_mm256_cvtepi8_epi32_dsl
               (_mm256_add_epi8_dsl
                (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
                (_mm512_sllv_epi64_dsl
                 (lit (bv #x0010 16))
                 (lit
                  (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                 (lit
                  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                 (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
                 256
                 16
                 16)
                256
                16)
               256
               16
               32)
              (_mm256_cvtepi8_epi32_dsl
               (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
               256
               16
               32)
              512
              32
              0
              64)
             512
             32)
            (lit (bv #x00000000 32))
            512
            32
            32)
           (_mm512_srav_epi64_dsl
            (lit (bv #x00000020 32))
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            (lit (bv #xffffffff 32))
            (lit
             (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
            (lit (bv #x00000000 32))
            512
            32
            32)
           512
           32)
          (_mm512_srav_epi64_dsl
           (lit (bv #x00000020 32))
           (lit
            (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
           (lit (bv #xffffffff 32))
           (_mm256_add_epi8_dsl
            (_mm256_add_epi8_dsl
             (_mm256_and_si256_dsl
              (lit
               (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
              (_mm256_add_epi8_dsl
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
                  (_mm512_sllv_epi64_dsl
                   (lit (bv #x0010 16))
                   (lit
                    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                   (lit
                    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                   (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
                   256
                   16
                   16)
                  256
                  16)
                 256
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
                 256
                 16
                 32)
                512
                32
                0
                64)
               (_mm_mulhi_epu16_dsl
                (_mm256_cvtepi8_epi32_dsl
                 (_mm256_add_epi8_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
                  (_mm512_sllv_epi64_dsl
                   (lit (bv #x0010 16))
                   (lit
                    (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                   (lit
                    (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                   (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
                   256
                   16
                   16)
                  256
                  16)
                 256
                 16
                 32)
                (_mm256_cvtepi8_epi32_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
                 256
                 16
                 32)
                512
                32
                0
                64)
               512
               32)
              512
              512)
             (_mm256_and_si256_dsl
              (lit
               (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
              (lit
               (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
              512
              512)
             512
             32)
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            512
            32)
           (lit (bv #x00000000 32))
           512
           32
           32)
          512
          32)
         (lit (bv #x00000000 32))
         512
         32
         32)
        512
        32)
       (lit
        (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
       512
       32)
      256
      16
      32
      0)
     (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
     256
     16)
    (lit
     (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
    256
    16)
   256
   16)
  128
  8
  16
  0)
 (_mm_set1_pi8_dsl (reg (bv #x0b 8)) 128 8)
 128
 8)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Hashed expression
(x16 '(buf uint8 8))
Leaves are bitvectors of sizes:
(8)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
(_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8)
Cost
5
here
(#(struct:buffer #<procedure:buffer-fn> uint8 8))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 8)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 8)
Sub-expression Synthesis completed:
(reg (bv #x0c 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x0c 8)))
========================================
Original Halide Sub-Expression:
(x16 (buffer #<procedure:buffer-fn> 'uint8 8))
Sub-expression Synthesis completed:
(_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 8)
========================================
Synthesized-leaves
(#(struct:_m_pminub_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_min_epi16_dsl #(struct:_m_paddsb_dsl #(struct:_mm_cvtepi64_epi32_dsl #(struct:_mm512_max_epi16_dsl #(struct:_mm256_min_epi16_dsl #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x01 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x00 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x04 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x03 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x00000020 32)) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #xffffffff 32)) #(struct:_mm256_add_epi8_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:_mm256_add_epi8_dsl #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x07 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x06 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x02 8)) 256 16) 256 16 32) 512 32 0 64) #(struct:_mm_mulhi_epu16_dsl #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm256_add_epi8_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x09 8)) 256 16) #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x08 8)) 128 8 16) 256 16 16) 256 16) 256 16 32) #(struct:_mm256_cvtepi8_epi32_dsl #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x05 8)) 256 16) 256 16 32) 512 32 0 64) 512 32) 512 512) #(struct:_mm256_and_si256_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) #(struct:lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 512) 512 32) #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #x00000000 32)) 512 32 32) 512 32) #(struct:lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 512 32) 256 16 32 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0a 8)) 256 16) 256 16) #(struct:lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 256 16) 256 16) 128 8 16 0) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0b 8)) 128 8) 128 8) #(struct:_mm_set1_pi8_dsl #(struct:reg (bv #x0c 8)) 128 8))
========================================
Original Halide Sub-Expression:
(vec-max
 (vec-min
  (uint8x16
   (vec-max
    (vec-min
     (vec-sat-add
      (int16x16
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-add
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
             (x16 (int-imm (bv #x00000001 32) #f)))
            (vec-shr
             (x16 (int-imm (bv #x00007fff 32) #t))
             (x16 (int-imm (bv #x00000001 32) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-add
                (vec-mul
                 (int32x16
                  (vec-add
                   (vec-shl
                    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                    (x16 (int-imm (bv #x0006 16) #f)))
                   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                (vec-mul
                 (int32x16
                  (vec-add
                   (vec-shl
                    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                    (x16 (int-imm (bv #x0006 16) #f)))
                   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
               (x16 (int-imm (bv #x00000001 32) #t)))
              (vec-bwand
               (x16 (int-imm (bv #x00007fff 32) #t))
               (x16 (int-imm (bv #x00000001 32) #t))))
             (x16 (int-imm (bv #x00000001 32) #t)))
            (x16 (int-imm (bv #x00000001 32) #f))))
          (x16 (int-imm (bv #x0000000f 32) #f)))
         (x16 (int-imm (bv #x00007fff 32) #t)))
        (x16 (int-imm (bv #xffff8000 32) #t))))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
     (x16 (int-imm (bv #x00ff 16) #t)))
    (x16 (int-imm (bv #x0000 16) #t))))
  (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Sub-expression Synthesis completed:
(_mm512_max_epu64_dsl
 (_m_pminub_dsl
  (_mm_cvtepi64_epi32_dsl
   (_mm512_max_epi16_dsl
    (lit
     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
    (_mm256_min_epi16_dsl
     (_m_paddsb_dsl
      (_mm_cvtepi64_epi32_dsl
       (_mm512_max_epi16_dsl
        (_mm256_min_epi16_dsl
         (lit
          (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
         (_mm512_srav_epi64_dsl
          (lit (bv #x00000020 32))
          (lit
           (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512))
          (lit (bv #xffffffff 32))
          (_mm256_add_epi8_dsl
           (_mm256_add_epi8_dsl
            (_mm512_srav_epi64_dsl
             (lit (bv #x00000020 32))
             (lit
              (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
             (lit (bv #xffffffff 32))
             (_mm256_add_epi8_dsl
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x01 8)) 256 16)
                 (_mm512_sllv_epi64_dsl
                  (lit (bv #x0010 16))
                  (lit
                   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                  (lit
                   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                  (_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 128 8 16)
                  256
                  16
                  16)
                 256
                 16)
                256
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
                256
                16
                32)
               512
               32
               0
               64)
              (_mm_mulhi_epu16_dsl
               (_mm256_cvtepi8_epi32_dsl
                (_mm256_add_epi8_dsl
                 (_mm_set1_pi8_dsl (reg (bv #x04 8)) 256 16)
                 (_mm512_sllv_epi64_dsl
                  (lit (bv #x0010 16))
                  (lit
                   (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                  (lit
                   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                  (_mm256_cvtepu16_epi32_dsl (reg (bv #x03 8)) 128 8 16)
                  256
                  16
                  16)
                 256
                 16)
                256
                16
                32)
               (_mm256_cvtepi8_epi32_dsl
                (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
                256
                16
                32)
               512
               32
               0
               64)
              512
              32)
             (lit (bv #x00000000 32))
             512
             32
             32)
            (_mm512_srav_epi64_dsl
             (lit (bv #x00000020 32))
             (lit
              (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
             (lit (bv #xffffffff 32))
             (lit
              (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
             (lit (bv #x00000000 32))
             512
             32
             32)
            512
            32)
           (_mm512_srav_epi64_dsl
            (lit (bv #x00000020 32))
            (lit
             (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
            (lit (bv #xffffffff 32))
            (_mm256_add_epi8_dsl
             (_mm256_add_epi8_dsl
              (_mm256_and_si256_dsl
               (lit
                (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
               (_mm256_add_epi8_dsl
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x07 8)) 256 16)
                   (_mm512_sllv_epi64_dsl
                    (lit (bv #x0010 16))
                    (lit
                     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                    (lit
                     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                    (_mm256_cvtepu16_epi32_dsl (reg (bv #x06 8)) 128 8 16)
                    256
                    16
                    16)
                   256
                   16)
                  256
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x02 8)) 256 16)
                  256
                  16
                  32)
                 512
                 32
                 0
                 64)
                (_mm_mulhi_epu16_dsl
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm256_add_epi8_dsl
                   (_mm_set1_pi8_dsl (reg (bv #x09 8)) 256 16)
                   (_mm512_sllv_epi64_dsl
                    (lit (bv #x0010 16))
                    (lit
                     (bv #x0006000600060006000600060006000600060006000600060006000600060006 256))
                    (lit
                     (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
                    (_mm256_cvtepu16_epi32_dsl (reg (bv #x08 8)) 128 8 16)
                    256
                    16
                    16)
                   256
                   16)
                  256
                  16
                  32)
                 (_mm256_cvtepi8_epi32_dsl
                  (_mm_set1_pi8_dsl (reg (bv #x05 8)) 256 16)
                  256
                  16
                  32)
                 512
                 32
                 0
                 64)
                512
                32)
               512
               512)
              (_mm256_and_si256_dsl
               (lit
                (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
               (lit
                (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512))
               512
               512)
              512
              32)
             (lit
              (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
             512
             32)
            (lit (bv #x00000000 32))
            512
            32
            32)
           512
           32)
          (lit (bv #x00000000 32))
          512
          32
          32)
         512
         32)
        (lit
         (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512))
        512
        32)
       256
       16
       32
       0)
      (_mm_set1_pi8_dsl (reg (bv #x0a 8)) 256 16)
      256
      16)
     (lit
      (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256))
     256
     16)
    256
    16)
   128
   8
   16
   0)
  (_mm_set1_pi8_dsl (reg (bv #x0b 8)) 128 8)
  128
  8)
 (_mm_set1_pi8_dsl (reg (bv #x0c 8)) 128 8)
 128
 8)
========================================
========================================
Original Halide Expression:
(vec-max
 (vec-min
  (uint8x16
   (vec-max
    (vec-min
     (vec-sat-add
      (int16x16
       (vec-max
        (vec-min
         (vec-shr
          (vec-add
           (vec-add
            (vec-shr
             (vec-add
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
              (vec-mul
               (int32x16
                (vec-add
                 (vec-shl
                  (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                  (x16 (int-imm (bv #x0006 16) #f)))
                 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
               (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
             (x16 (int-imm (bv #x00000001 32) #f)))
            (vec-shr
             (x16 (int-imm (bv #x00007fff 32) #t))
             (x16 (int-imm (bv #x00000001 32) #f))))
           (vec-shr
            (vec-add
             (vec-add
              (vec-bwand
               (vec-add
                (vec-mul
                 (int32x16
                  (vec-add
                   (vec-shl
                    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                    (x16 (int-imm (bv #x0006 16) #f)))
                   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                (vec-mul
                 (int32x16
                  (vec-add
                   (vec-shl
                    (int16x16 (buffer #<procedure:buffer-fn> 'uint8 128))
                    (x16 (int-imm (bv #x0006 16) #f)))
                   (x16 (buffer #<procedure:buffer-fn> 'int16 16))))
                 (int32x16 (x16 (buffer #<procedure:buffer-fn> 'int16 16)))))
               (x16 (int-imm (bv #x00000001 32) #t)))
              (vec-bwand
               (x16 (int-imm (bv #x00007fff 32) #t))
               (x16 (int-imm (bv #x00000001 32) #t))))
             (x16 (int-imm (bv #x00000001 32) #t)))
            (x16 (int-imm (bv #x00000001 32) #f))))
          (x16 (int-imm (bv #x0000000f 32) #f)))
         (x16 (int-imm (bv #x00007fff 32) #t)))
        (x16 (int-imm (bv #xffff8000 32) #t))))
      (x16 (buffer #<procedure:buffer-fn> 'int16 16)))
     (x16 (int-imm (bv #x00ff 16) #t)))
    (x16 (int-imm (bv #x0000 16) #t))))
  (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
 (x16 (buffer #<procedure:buffer-fn> 'uint8 8)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x0b 8)
 (buffer #<procedure:buffer-fn> 'uint8 8)
 (bv #x0c 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x05 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x0a 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x07 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x03 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x04 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x08 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'uint8 128)
 (bv #x06 8)
 (buffer #<procedure:buffer-fn> 'int16 16)
 (bv #x09 8))
========================================
; (reg (bv #x0b 8)) <1 x i8>
; (reg (bv #x0c 8)) <1 x i8>
; (reg (bv #x05 8)) <1 x i16>
; (reg (bv #x0a 8)) <1 x i16>
; (reg (bv #x07 8)) <1 x i16>
; (reg (bv #x02 8)) <1 x i16>
; (reg (bv #x01 8)) <1 x i16>
; (reg (bv #x03 8)) <16 x i8>
; (reg (bv #x04 8)) <1 x i16>
; (reg (bv #x08 8)) <16 x i8>
; (reg (bv #x00 8)) <16 x i8>
; (reg (bv #x06 8)) <16 x i8>
; (reg (bv #x09 8)) <1 x i16>

(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) ; <16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <1 x i512>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 7)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 6)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 9)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 8)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  512  512  );<1 x i512>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) ; <16 x i32>
  512  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  
(_mm_set1_pi8_dsl 
(reg 10)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 11)  128  8  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  8  );<16 x i8>
  128  8  );<16 x i8>

Writing [; hydride.node.0
; (reg 11) <1 x i8>
; (reg 12) <1 x i8>
; (reg 5) <1 x i16>
; (reg 10) <1 x i16>
; (reg 7) <1 x i16>
; (reg 2) <1 x i16>
; (reg 1) <1 x i16>
; (reg 3) <16 x i8>
; (reg 4) <1 x i16>
; (reg 8) <16 x i8>
; (reg 0) <16 x i8>
; (reg 6) <16 x i8>
; (reg 9) <1 x i16>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) ; <16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <1 x i512>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 7)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 6)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 9)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 8)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  512  512  );<1 x i512>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) ; <16 x i32>
  512  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  
(_mm_set1_pi8_dsl 
(reg 10)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 11)  128  8  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  8  );<16 x i8>
  128  8  );<16 x i8>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 11) <1 x i8>
; (reg 12) <1 x i8>
; (reg 5) <1 x i16>
; (reg 10) <1 x i16>
; (reg 7) <1 x i16>
; (reg 2) <1 x i16>
; (reg 1) <1 x i16>
; (reg 3) <16 x i8>
; (reg 4) <1 x i16>
; (reg 8) <16 x i8>
; (reg 0) <16 x i8>
; (reg 6) <16 x i8>
; (reg 9) <1 x i16>


(_mm512_max_epu64_dsl 
(_m_pminub_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_min_epi16_dsl 
(_m_paddsb_dsl 
(_mm_cvtepi64_epi32_dsl 
(_mm512_max_epi16_dsl 
(_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) ; <16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 0)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 4)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 3)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 512)) ; <16 x i32>
  512  32  );<16 x i32>
  
(_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) ; <1 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  (lit (bv #xffffffff 32)) ; <1 x i32>
  
(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(_mm256_and_si256_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <1 x i512>
  
(_mm256_add_epi8_dsl 
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 7)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 6)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 2)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  
(_mm_mulhi_epu16_dsl 
(_mm256_cvtepi8_epi32_dsl 
(_mm256_add_epi8_dsl 
(_mm_set1_pi8_dsl 
(reg 9)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(_mm256_cvtepu16_epi32_dsl 
(reg 8)  128  8  16  );<16 x i16>
  256  16  16  );<16 x i16>
  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  
(_mm256_cvtepi8_epi32_dsl 
(_mm_set1_pi8_dsl 
(reg 5)  256  16  );<16 x i16>
  256  16  32  );<16 x i32>
  512  32  0  64  );<16 x i32>
  512  32  );<16 x i32>
  512  512  );<1 x i512>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) ; <16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #x00000000 32)) ; <1 x i32>
  512  32  32  );<16 x i32>
  512  32  );<16 x i32>
  (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) ; <16 x i32>
  512  32  );<16 x i32>
  256  16  32  0  );<16 x i16>
  
(_mm_set1_pi8_dsl 
(reg 10)  256  16  );<16 x i16>
  256  16  );<16 x i16>
  (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) ; <16 x i16>
  256  16  );<16 x i16>
  256  16  );<16 x i16>
  128  8  16  0  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 11)  128  8  );<16 x i8>
  128  8  );<16 x i8>
  
(_mm_set1_pi8_dsl 
(reg 12)  128  8  );<16 x i8>
  128  8  );<16 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(x16 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(x16 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 0)
(x16 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 1)
(x16 (int-imm (bv #x00000001 32) #f)) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(x16 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(int16x16 '(buf int32 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0) 0)
(x16 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16) 0)
(x16 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8) 0)
(vec-sat-add '(buf int16 256) '(buf int16 256)) (vector #t (_m_paddsb_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 1)
(vec-min '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 0)
(vec-max '(buf int16 256) '(buf int16 256)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 1)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-shr '(buf int32 512) '(buf uint32 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(x16 (int-imm (bv #x0000000f 32) #f)) (vector #t (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) 0)
(x16 (int-imm (bv #x0006 16) #f)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 0)
(vec-bwand '(buf int32 512) '(buf int32 512)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 512) 0)
(vec-min '(buf int32 512) '(buf int32 512)) (vector #t (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 1)
(vec-max '(buf int32 512) '(buf int32 512)) (vector #t (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 1)
(vec-add '(buf int32 512) '(buf int32 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 0)
(vec-mul '(buf int32 512) '(buf int32 512)) (vector #t (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64) 4)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(uint8x16 '(buf int16 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 8 16 0) 1)
(int32x16 '(buf int16 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 16 32) 0)
(vec-min '(buf uint8 128) '(buf uint8 128)) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8) 1)
(vec-max '(buf uint8 128) '(buf uint8 128)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 8) 0)
(x16 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: shift_left
Lower Intrinsic on call: bitwise_and
Expression before InlineLets: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)shift_right(((int32x16)shift_right((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)), x16((uint32)15)), x16(32767)), x16(-32768))), x16(int16((uint8)output_zero))), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Expression after InlineLets: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)shift_right(((int32x16)shift_right((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)), x16((uint32)15)), x16(32767)), x16(-32768))), x16(int16((uint8)output_zero))), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Expression before abstraction: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)shift_right(((int32x16)shift_right((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)), x16((uint32)15)), x16(32767)), x16(-32768))), x16(int16((uint8)output_zero))), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Input expression to synthesize: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)shift_right(((int32x16)shift_right((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t65, 1, 16)]), x16((uint16)6)) + x16((int16)t66)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t68, 1, 16)]), x16((uint16)6)) + x16((int16)t69)))*int32x16(x16((int16)input2_multiplier))), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t71, 1, 16)]), x16((uint16)6)) + x16((int16)t72)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t74, 1, 16)]), x16((uint16)6)) + x16((int16)t75)))*int32x16(x16((int16)input2_multiplier))), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)), x16((uint32)15)), x16(32767)), x16(-32768))), x16((int16)t77)), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Cast operation into: uint8x16
Cast operation into: int16x16
Cast operation into: int32x16
Cast operation into: int16x16
t66 maps to reg_1
Cast operation into: int32x16
input1_multiplier maps to reg_2
Cast operation into: int32x16
Cast operation into: int16x16
t69 maps to reg_4
Cast operation into: int32x16
input2_multiplier maps to reg_5
Cast operation into: int32x16
Cast operation into: int16x16
t72 maps to reg_7
Cast operation into: int32x16
Cast operation into: int32x16
Cast operation into: int16x16
t75 maps to reg_9
Cast operation into: int32x16
t77 maps to reg_10
output_max maps to reg_11
output_min maps to reg_12
Synthesis completed with return code:	0
Synthesis took 98.174969seconds ...
Expression after replacae abstraction: max(min(uint8x16(max(min((int16x16)saturating_add(int16x16(max(min((int32x16)shift_right(((int32x16)shift_right((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16((uint32)1)) + (int32x16)shift_right(x16(32767), x16((uint32)1))) + (int32x16)shift_right(((int32x16)bitwise_and((int32x16(((int16x16)shift_left(int16x16((uint8x16)input1[ramp(t14 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input1_zero)*(int16)-64)))*int32x16(x16((int16)input1_multiplier))) + (int32x16(((int16x16)shift_left(int16x16((uint8x16)input2[ramp(t15 + t4, 1, 16)]), x16((uint16)6)) + x16(int16((uint8)input2_zero)*(int16)-64)))*int32x16(x16((int16)input2_multiplier))), x16(1)) + (int32x16)bitwise_and(x16(32767), x16(1))) + x16(1), x16((uint32)1)), x16((uint32)15)), x16(32767)), x16(-32768))), x16(int16((uint8)output_zero))), x16((int16)255)), x16((int16)0))), x16((uint8)output_max)), x16((uint8)output_min))
Generating Call with type: uint8x16 and lanes 16
Ending synthesis for expr: 0

Optimized expression: (uint8x16)hydride.node.0((uint8x16)input1[ramp(t14 + t4, 1, 16)], int16((uint8)input1_zero)*(int16)-64, (int16)input1_multiplier, (uint8x16)input2[ramp(t15 + t4, 1, 16)], int16((uint8)input2_zero)*(int16)-64, (int16)input2_multiplier, (uint8x16)input1[ramp(t14 + t4, 1, 16)], int16((uint8)input1_zero)*(int16)-64, (uint8x16)input2[ramp(t15 + t4, 1, 16)], int16((uint8)input2_zero)*(int16)-64, int16((uint8)output_zero), (uint8)output_max, (uint8)output_min)
Hydride Function: declare <16 x i8> @hydride.node.0(<16 x i8>, i16, i16, <16 x i8>, i16, i16, <16 x i8>, i16, <16 x i8>, i16, i16, i8, i8)

Generating Hydride Call:   %318 = call <16 x i8> @hydride.node.0(<16 x i8> %290, i16 %292, i16 %input1_multiplier16, <16 x i8> %298, i16 %300, i16 %input2_multiplier17, <16 x i8> %306, i16 %308, <16 x i8> %314, i16 %316, i16 %317, i8 %output_max20, i8 %output_min21) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'add' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
