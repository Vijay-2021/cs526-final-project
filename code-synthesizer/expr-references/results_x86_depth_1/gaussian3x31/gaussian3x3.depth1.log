mkdir gaussian3x3/bin
g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
	-I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//include -I /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools \
	-g gaussian3x3/src/gaussian3x3_generator.cpp /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//tools/GenGen.cpp \
	hannk/common_halide.cpp \
	-o gaussian3x3/bin/gaussian3x3_generator \
	-L /home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib -lHalide -lrt -ldl -lpthread -lm -lz -lxml2
export LD_LIBRARY_PATH=/home/arnoor2/Racket/TensorSynth/Rosette-experiments/halide-hydride/distrib//lib; HL_EXPR_DEPTH=1 HL_ENABLE_HYDRIDE=1 ./gaussian3x3/bin/gaussian3x3_generator \
	-t 0 \
	-o gaussian3x3/bin \
	-g gaussian3x3 \
	-e static_library,stmt,h,llvm_assembly,assembly \
	-f gaussian3x3 target=host-noos-no_bounds_query-no_asserts
Target has Saphire Rapids Support: 0
Hydride Optimize X86
rm: cannot remove '/tmp/base_8652_spec.JSON': No such file or directory
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcast_i64x4 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_broadcast_i32x8 with score: 3 belonging to target agnostic class _mm512_broadcast_i64x4
Adding:  _mm512_cvtepi8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepi16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepi8_epi32
Adding:  _mm512_cvtepu8_epi16 with score: 4 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu32_epi64 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
Adding:  _mm512_cvtepu16_epi32 with score: 3 belonging to target agnostic class _mm256_cvtepu16_epi32
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 8
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(int16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
get-expr-grammar with base_name: base_8652

base_8652_grammar.rkt
/tmp/base_8652_grammar.rkt
Writing [{ 
"name": "base_8652" , 
"semantics": [ "(extract sign-extend zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [8], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8652_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8652_spec.JSON /tmp/base_8652_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_8652 ... 

Grammar:
#<procedure:base_8652>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x397a3596f5f504acdc11e3f23bc360dcb89bfbf6c4cf49c52beb2f09e9022f0e 256))
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Spec result
(bv #x0039007a0035009600f500f5000400ac00dc001100e300f2003b00c3006000dc00b8009b00fb00f600c400cf004900c5002b00eb002f000900e90002002f000e 512)
invoke-spec-lane with env: #((bv #x397a3596f5f504acdc11e3f23bc360dcb89bfbf6c4cf49c52beb2f09e9022f0e 256))
Concrete counter examples:
(#((bv #x397a3596f5f504acdc11e3f23bc360dcb89bfbf6c4cf49c52beb2f09e9022f0e 256)) #((bv #x43773b10a1d1ed1c551e4f3e765890a14e9b2fc76d19e8136484872e8b64f127 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x397a3596f5f504acdc11e3f23bc360dcb89bfbf6c4cf49c52beb2f09e9022f0e 256))
Spec Produced:
(bv #x000e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x43773b10a1d1ed1c551e4f3e765890a14e9b2fc76d19e8136484872e8b64f127 256))
Spec Produced:
(bv #x0027 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(int16x32 '(buf uint8 256))
#(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)
Synthesis step completed!
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.0.rkt

Completed writing to file ...
Append [; hydride.node.0
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.0.rkt /tmp/test.ll
Storing synth log map synth_hash_0 to /tmp/hydride_hash_0.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_0 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_0.rkt

Completed writing to file ...
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: reinterpret
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Lower Intrinsic on call: load_typed_struct_member
Starting synthesis for expr: 0
Expression before lower intrinsic: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression before InlineLets: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression after InlineLets: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Expression before abstraction: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Input expression to synthesize: int16x32((uint8x32)input[ramp(t202, 1, 32)])
Cast operation into: int16x32
Synthesis completed with return code:	0
Synthesis took 9.077117seconds ...
Expression after replacae abstraction: int16x32((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
Generating Call with type: int16x32 and lanes 32
Ending synthesis for expr: 0

Optimized expression: (int16x32)hydride.node.0((uint8x32)input[ramp(((((t160 + -8)*input.stride.1) - t139) + input_16.s0.x.xi.base.s) + -129, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> uint8 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_0 from hydride_hash_0.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Hashed expression
(int16x32 '(buf uint8 256))
Leaves are bitvectors of sizes:
(256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
(_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> uint8 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'uint8 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'uint8 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)))
========================================
Original Halide Sub-Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Sub-expression Synthesis completed:
(_mm256_cvtepu16_epi32_dsl (reg (bv #x00 8)) 256 8 16)
========================================
========================================
Original Halide Expression:
(int16x32 (buffer #<procedure:buffer-fn> 'uint8 256))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'uint8 256) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i8>

(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

Writing [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride.node.1.rkt

Completed writing to file ...
Append [; hydride.node.1
; (reg 0) <32 x i8>


(_mm256_cvtepu16_epi32_dsl 
(reg 0)  256  8  16  );<32 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.1.rkt /tmp/test.ll
Storing synth log map synth_hash_1 to /tmp/hydride_hash_1.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_1 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)))
] to file /tmp/hydride_hash_1.rkt

Completed writing to file ...
Starting synthesis for expr: 1
Expression before lower intrinsic: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression before InlineLets: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression after InlineLets: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Expression before abstraction: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Input expression to synthesize: int16x32((uint8x32)input[ramp(t208, 1, 32)])
Cast operation into: int16x32
Synthesis completed with return code:	0
Synthesis took 11.607296seconds ...
Expression after replacae abstraction: int16x32((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
Generating Call with type: int16x32 and lanes 32
Ending synthesis for expr: 1

Optimized expression: (int16x32)hydride.node.1((uint8x32)input[ramp((((t123 + -8)*input.stride.1) + t142) + -31, 1, 32)])
rm: cannot remove '/tmp/base_5341_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm256_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_hadd_epi16 with score: 5 belonging to target agnostic class _mm256_hadd_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm256_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 6
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_1 from hydride_hash_1.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_5341

base_5341_grammar.rkt
/tmp/base_5341_grammar.rkt
Writing [{ 
"name": "base_5341" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_5341_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_5341_spec.JSON /tmp/base_5341_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_5341 ... 

Grammar:
#<procedure:base_5341>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x230e8e7e044c1a541263fb3c57ec72248300bf68ffa9ed40f9ea192f2cb6d2ff 256) (bv #x2d7a48f36db83d19d0293d6fa5b37bec742fdf588e915d4347ed0f0e024fdd4f 256))
(vec-add (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'int16 256))
Spec result
(bv #x5088d7717204576de28c38abfd9fee10f72f9ec08e3a4a8341d7283d2f05b04e 256)
invoke-spec-lane with env: #((bv #x230e8e7e044c1a541263fb3c57ec72248300bf68ffa9ed40f9ea192f2cb6d2ff 256) (bv #x2d7a48f36db83d19d0293d6fa5b37bec742fdf588e915d4347ed0f0e024fdd4f 256))
Concrete counter examples:
(#((bv #x230e8e7e044c1a541263fb3c57ec72248300bf68ffa9ed40f9ea192f2cb6d2ff 256) (bv #x2d7a48f36db83d19d0293d6fa5b37bec742fdf588e915d4347ed0f0e024fdd4f 256)) #((bv #xea4bb945faf63d1c2d3dc960d46c03294b3f2eac302ecb0bbc612a05be3924d4 256) (bv #xc3d0bc5058178821c89d09b20ca4a6e908c2b4acb923f8e45275eba8dd88b950 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x230e8e7e044c1a541263fb3c57ec72248300bf68ffa9ed40f9ea192f2cb6d2ff 256) (bv #x2d7a48f36db83d19d0293d6fa5b37bec742fdf588e915d4347ed0f0e024fdd4f 256))
Spec Produced:
(bv #xb04e 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xea4bb945faf63d1c2d3dc960d46c03294b3f2eac302ecb0bbc612a05be3924d4 256) (bv #xc3d0bc5058178821c89d09b20ca4a6e908c2b4acb923f8e45275eba8dd88b950 256))
Spec Produced:
(bv #xde24 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0 sym_bv$1)

invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: rm: cannot remove '/tmp/base_140_spec.JSON': No such file or directory
Pruning _mm256_cvtepi8_epi16 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi16 as it has an argument of size 16 which is smaller than 256
Pruning _mm256_broadcastw_epi16 as it has an argument of size 128 which is smaller than 256
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm256_sllv_epi16 with score: 5 belonging to target agnostic class _mm512_sllv_epi64
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 8
Grammar Number of Shuffle DSL Clauses:	 7
Grammar Number of DSL Compute Clauses:	 4
#(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
invoke-spec-lane with env: #(sym_bv$0 sym_bv$1)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int16 256) '(buf int16 256))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)
Synthesis step completed!
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
get-expr-grammar with base_name: base_140

base_140_grammar.rkt
/tmp/base_140_grammar.rkt
Writing [{ 
"name": "base_140" , 
"semantics": [ "(bvshl sign-extend)"] , 
"input_shapes": [[1,16], [1,16]], 
"output_shape": [1 , 16], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_256", "SYMBOLIC_BV_256"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_140_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_140_spec.JSON /tmp/base_140_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_140 ... 

Grammar:
#<procedure:base_140>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
Concrete counter examples:
(#((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256)) #((bv #xbeede153333a64a4646481e63f0b667b1ccecbbc1399c72900d703eb899a0167 256) (bv #xa109bc9ac66b0475b39152749c67433b93fb99f8255bd752b6a8d03d92fbb332 256)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xbeede153333a64a4646481e63f0b667b1ccecbbc1399c72900d703eb899a0167 256) (bv #xa109bc9ac66b0475b39152749c67433b93fb99f8255bd752b6a8d03d92fbb332 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2 sym_bv$3)

invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
invoke-spec-lane with env: #(sym_bv$2 sym_bv$3)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$4 sym_bv$5)

invoke-spec with env: #(sym_bv$4 sym_bv$5)
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvshl (extract 255 240 sym_bv$4) (extract 255 240 sym_bv$5)) (bvshl (extract 239 224 sym_bv$4) (extract 239 224 sym_bv$5))) (bvshl (extract 223 208 sym_bv$4) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$4 (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)]
 [sym_bv$5 (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)])
Verification failed :(
#((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Verification failed ...
	spec produced: (bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000000 256) 256

invoke-spec with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
(vec-shl (buffer #<procedure:buffer-fn> 'int16 256) (buffer #<procedure:buffer-fn> 'uint16 256))
Spec result
(bv #x0000000000000000000000000000000000000000000000000000000000000000 256)
invoke-spec-lane with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
Concrete counter examples:
(#((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256)) #((bv #xbeede153333a64a4646481e63f0b667b1ccecbbc1399c72900d703eb899a0167 256) (bv #xa109bc9ac66b0475b39152749c67433b93fb99f8255bd752b6a8d03d92fbb332 256)) #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xaf05c3c1d95804a5abe9f6eff3c28aa207a1ef6b4c848e58ca28fbb5bae553c2 256) (bv #xe7ee99348889ad6203504d97658666270149b840ca16cabb69ee7675724f5df7 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: rm: cannot remove '/tmp/base_216_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm256_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm256_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 12
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 5
#((bv #xbeede153333a64a4646481e63f0b667b1ccecbbc1399c72900d703eb899a0167 256) (bv #xa109bc9ac66b0475b39152749c67433b93fb99f8255bd752b6a8d03d92fbb332 256))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #xfffffffffffffffffffffffffff7fffffffffffffbffffffffffffffffffffff 256) (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$6 sym_bv$7)

invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
invoke-spec-lane with env: #(sym_bv$6 sym_bv$7)
verify-across-lanes returned #t ... 

Test elapsed time: 
2
(vec-shl '(buf int16 256) '(buf uint16 256))
#(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)
Synthesis step completed!
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_216

base_216_grammar.rkt
/tmp/base_216_grammar.rkt
Writing [{ 
"name": "base_216" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 16], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[1, 16]] 
}
] to file /tmp/base_216_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_216_spec.JSON /tmp/base_216_grammar.rkt 16 0
Generated Grammar File
Dynamically importing from base_216 ... 

Grammar:
#<procedure:base_216>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x0000000100000001000000010000000100000001000000010000000100000001 256))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #()

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification took 0 seconds

(model)
Verification failed :(
#()
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Verification failed ...
	spec produced: (bv #x0001000100010001000100010001000100010001000100010001000100010001 256) 256 
	synthesized result produced: (bv #x0000000100000001000000010000000100000001000000010000000100000001 256) 256

invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x16 (int-imm (bv #x0001 16) #f))
Spec result
(bv #x0001000100010001000100010001000100010001000100010001000100010001 256)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #() #())
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0001 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x16 (int-imm (bv #x0001 16) #f))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.2
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.2.rkt

Completed writing to file ...
Append [; hydride.node.2
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.2.rkt /tmp/test.ll
Storing synth log map synth_hash_2 to /tmp/hydride_hash_2.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_2 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_2.rkt

Completed writing to file ...
Starting synthesis for expr: 2
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)input_16[ramp(t220, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp(t224, 1, 16)] + (int16x16)input_16[ramp(t228, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 15.948170seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], x16((uint16)1)) + ((int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)] + (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 2

Optimized expression: (int16x16)hydride.node.2((int16x16)input_16[ramp((((t163 + 7) % 16)*(t156 + 16)) + t98, 1, 16)], (int16x16)input_16[ramp((((t163 + 8) % 16)*(t156 + 16)) + t98, 1, 16)], (int16x16)input_16[ramp((((t163 + 6) % 16)*(t156 + 16)) + t98, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_2 from hydride_hash_2.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.3
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.3.rkt

Completed writing to file ...
Append [; hydride.node.3
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.3.rkt /tmp/test.ll
Storing synth log map synth_hash_3 to /tmp/hydride_hash_3.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_3 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_3.rkt

Completed writing to file ...
Starting synthesis for expr: 3
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t238, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t239, 1, 16)] + (int16x16)rows[ramp(t240, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.531484seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 129, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 130, 1, 16)] + (int16x16)rows[ramp(t121 + 128, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 3

Optimized expression: (int16x16)hydride.node.3((int16x16)rows[ramp(t121 + 129, 1, 16)], (int16x16)rows[ramp(t121 + 130, 1, 16)], (int16x16)rows[ramp(t121 + 128, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_3 from hydride_hash_3.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.4
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.4.rkt

Completed writing to file ...
Append [; hydride.node.4
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.4.rkt /tmp/test.ll
Storing synth log map synth_hash_4 to /tmp/hydride_hash_4.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_4 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_4.rkt

Completed writing to file ...
Starting synthesis for expr: 4
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t242, 1, 16)] + (int16x16)rows[ramp(t243, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.188618seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 145, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 146, 1, 16)] + (int16x16)rows[ramp(t121 + 144, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 4

Optimized expression: (int16x16)hydride.node.4((int16x16)rows[ramp(t121 + 145, 1, 16)], (int16x16)rows[ramp(t121 + 146, 1, 16)], (int16x16)rows[ramp(t121 + 144, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_4 from hydride_hash_4.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.5
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.5.rkt

Completed writing to file ...
Append [; hydride.node.5
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.5.rkt /tmp/test.ll
Storing synth log map synth_hash_5 to /tmp/hydride_hash_5.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_5 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_5.rkt

Completed writing to file ...
Starting synthesis for expr: 5
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t244, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t245, 1, 16)] + (int16x16)rows[ramp(t246, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.369525seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 161, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 162, 1, 16)] + (int16x16)rows[ramp(t121 + 160, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 5

Optimized expression: (int16x16)hydride.node.5((int16x16)rows[ramp(t121 + 161, 1, 16)], (int16x16)rows[ramp(t121 + 162, 1, 16)], (int16x16)rows[ramp(t121 + 160, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_5 from hydride_hash_5.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.6
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.6.rkt

Completed writing to file ...
Append [; hydride.node.6
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.6.rkt /tmp/test.ll
Storing synth log map synth_hash_6 to /tmp/hydride_hash_6.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_6 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_6.rkt

Completed writing to file ...
Starting synthesis for expr: 6
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t247, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t248, 1, 16)] + (int16x16)rows[ramp(t249, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.018972seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 177, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 178, 1, 16)] + (int16x16)rows[ramp(t121 + 176, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 6

Optimized expression: (int16x16)hydride.node.6((int16x16)rows[ramp(t121 + 177, 1, 16)], (int16x16)rows[ramp(t121 + 178, 1, 16)], (int16x16)rows[ramp(t121 + 176, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_6 from hydride_hash_6.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.7
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.7.rkt

Completed writing to file ...
Append [; hydride.node.7
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.7.rkt /tmp/test.ll
Storing synth log map synth_hash_7 to /tmp/hydride_hash_7.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_7 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_7.rkt

Completed writing to file ...
Starting synthesis for expr: 7
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t250, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t251, 1, 16)] + (int16x16)rows[ramp(t252, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.139810seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 193, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 194, 1, 16)] + (int16x16)rows[ramp(t121 + 192, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 7

Optimized expression: (int16x16)hydride.node.7((int16x16)rows[ramp(t121 + 193, 1, 16)], (int16x16)rows[ramp(t121 + 194, 1, 16)], (int16x16)rows[ramp(t121 + 192, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_7 from hydride_hash_7.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.8
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.8.rkt

Completed writing to file ...
Append [; hydride.node.8
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.8.rkt /tmp/test.ll
Storing synth log map synth_hash_8 to /tmp/hydride_hash_8.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_8 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_8.rkt

Completed writing to file ...
Starting synthesis for expr: 8
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t253, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t254, 1, 16)] + (int16x16)rows[ramp(t255, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.032758seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 209, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 210, 1, 16)] + (int16x16)rows[ramp(t121 + 208, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 8

Optimized expression: (int16x16)hydride.node.8((int16x16)rows[ramp(t121 + 209, 1, 16)], (int16x16)rows[ramp(t121 + 210, 1, 16)], (int16x16)rows[ramp(t121 + 208, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_8 from hydride_hash_8.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.9
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.9.rkt

Completed writing to file ...
Append [; hydride.node.9
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.9.rkt /tmp/test.ll
Storing synth log map synth_hash_9 to /tmp/hydride_hash_9.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_9 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_9.rkt

Completed writing to file ...
Starting synthesis for expr: 9
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t256, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t257, 1, 16)] + (int16x16)rows[ramp(t258, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.167832seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 225, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 226, 1, 16)] + (int16x16)rows[ramp(t121 + 224, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 9

Optimized expression: (int16x16)hydride.node.9((int16x16)rows[ramp(t121 + 225, 1, 16)], (int16x16)rows[ramp(t121 + 226, 1, 16)], (int16x16)rows[ramp(t121 + 224, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)))
Found previous hash!

Importing synth log map synth_hash_9 from hydride_hash_9.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8))
========================================
; (reg (bv #x00 8)) <16 x i16>
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.10
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.10.rkt

Completed writing to file ...
Append [; hydride.node.10
; (reg 0) <16 x i16>
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.10.rkt /tmp/test.ll
Storing synth log map synth_hash_10 to /tmp/hydride_hash_10.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_10 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)))
] to file /tmp/hydride_hash_10.rkt

Completed writing to file ...
Starting synthesis for expr: 10
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t259, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t260, 1, 16)] + (int16x16)rows[ramp(t261, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.798596seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t121 + 241, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t121 + 242, 1, 16)] + (int16x16)rows[ramp(t121 + 240, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 10

Optimized expression: (int16x16)hydride.node.10((int16x16)rows[ramp(t121 + 241, 1, 16)], (int16x16)rows[ramp(t121 + 242, 1, 16)], (int16x16)rows[ramp(t121 + 240, 1, 16)])
rm: cannot remove '/tmp/base_1844_spec.JSON': No such file or directory
Pruning _mm256_broadcastb_epi8 as it has an argument of size 128 which is smaller than 256
Pruning _mm256_set1_epi8 as it has an argument of size 8 which is smaller than 256
Prunning Based of non-immediate usage pruned 2 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_cvtsepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtsepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtsepi64_epi16
Adding:  _mm512_cvtepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtepi64_epi32
Adding:  _mm512_cvtusepi16_epi8 with score: 4 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi32_epi16 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
Adding:  _mm512_cvtusepi64_epi32 with score: 3 belonging to target agnostic class _mm_cvtusepi64_epi8
==================================================
Grammar Number of Load DSL Clauses:	 7
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 9
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_10 from hydride_hash_10.rkt ... 

#hash((#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
get-expr-grammar with base_name: base_1844

base_1844_grammar.rkt
/tmp/base_1844_grammar.rkt
Writing [{ 
"name": "base_1844" , 
"semantics": [ "(extract zero-extend)"] , 
"input_shapes": [[1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16], 
"output_precision": 8, 
"args": ["SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_1844_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_1844_spec.JSON /tmp/base_1844_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_1844 ... 

Grammar:
#<procedure:base_1844>
(#(struct:reg (bv #x0 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #x6920467d6cfcc872f71cf5670606d4b96f3f706d8dd847913cbf7f90e51f0c06 256)
invoke-spec-lane with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
Concrete counter examples:
(#((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512)) #((bv #x39808d09bd7cdb5a19409056f0b8cd6241b6433629e03907b842ccc6e975673d5868204dc59c34a6107d85c2148830f0494c0afbdf7eefc079785cbe885b89b0 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
Spec Produced:
(bv #x06 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x39808d09bd7cdb5a19409056f0b8cd6241b6433629e03907b842ccc6e975673d5868204dc59c34a6107d85c2148830f0494c0afbdf7eefc079785cbe885b89b0 512))
Spec Produced:
(bv #xb0 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 16 32 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$0)

invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
invoke-spec-lane with env: #(sym_bv$0)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$1)

invoke-spec with env: #(sym_bv$1)
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (extract 503 496 sym_bv$1) (extract 487 ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$1 (bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512)])
Verification failed :(
#((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512))
invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00fb00 256)
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00fb00 256)
Verification failed ...
	spec produced: (bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00fb00 256) 256 
	synthesized result produced: (bv #x0000000000000000000000000000000000000000000000000000000000000400 256) 256

invoke-spec with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00fb00 256)
Difference  Predicate
'((0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1))
differing-lanes
'(1)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #x6920467d6cfcc872f71cf5670606d4b96f3f706d8dd847913cbf7f90e51f0c06 256)
invoke-spec-lane with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
Concrete counter examples:
(#((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512)) #((bv #x39808d09bd7cdb5a19409056f0b8cd6241b6433629e03907b842ccc6e975673d5868204dc59c34a6107d85c2148830f0494c0afbdf7eefc079785cbe885b89b0 512)) #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512)))
Failing lanes examples:
(0 0 1)
*********** z3-optimize *****************rm: cannot remove '/tmp/base_3305_spec.JSON': No such file or directory
Pruning _mm512_cvtepi8_epi16 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_srav_epi16 with score: 5 belonging to target agnostic class _mm512_srav_epi64
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 2

Lane Index
0
invoke-spec-lane with env: #((bv #xfd69d920a2469a7d2f6c7efc46c8537274f70f1c1bf5a567cd067d067fd4c0b9a76fc63f2e707d6dc68d23d8f2476091163c4ebf4d7ff89076e5a01f770cc006 512))
Spec Produced:
(bv #x06 8)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x39808d09bd7cdb5a19409056f0b8cd6241b6433629e03907b842ccc6e975673d5868204dc59c34a6107d85c2148830f0494c0afbdf7eefc079785cbe885b89b0 512))
Spec Produced:
(bv #xb0 8)
Synthesize by lane...
Lane Index
1
invoke-spec-lane with env: #((bv #x00ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000fb0400 512))
Spec Produced:
(bv #xfb 8)
Synthesize by lane...
Z3 Synthesized Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$2)

invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
invoke-spec-lane with env: #(sym_bv$2)
verify-across-lanes returned #t ... 

Test elapsed time: 
1
(uint8x32 '(buf int16 512))
#(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)
Synthesis step completed!
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_3305

base_3305_grammar.rkt
/tmp/base_3305_grammar.rkt
Writing [{ 
"name": "base_3305" , 
"semantics": [ "(bvashr sign-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_3305_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_3305_spec.JSON /tmp/base_3305_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_3305 ... 

Grammar:
#<procedure:base_3305>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x0000ffff0000ffff0000ffff0000ffff0000ffffffffffff000000000000000000000000ffff0000ffffffff0000ffff0000ffff000000000000ffff00000000 512)
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Concrete counter examples:
(#((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512)) #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$3 sym_bv$4)

invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
invoke-spec-lane with env: #(sym_bv$3 sym_bv$4)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$5 sym_bv$6)

invoke-spec with env: #(sym_bv$5 sym_bv$6)
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 496 sym_bv$5) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$5 (bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512)]
 [sym_bv$6 (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512)] ...)
Verification failed :(
#((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
invoke-spec with env: #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xfffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffbffff007fffffffffffffffffffff 512)
(bv #xfffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffbffff007fffffffffffffffffffff 512)
Verification failed ...
	spec produced: (bv #xfffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffbffff007fffffffffffffffffffff 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xfffffffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffbffff007fffffffffffffffffffff 512)
Difference  Predicate
'((1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))
differing-lanes
'(0)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x0000ffff0000ffff0000ffff0000ffff0000ffffffffffff000000000000000000000000ffff0000ffffffff0000ffff0000ffff000000000000ffff00000000 512)
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Concrete counter examples:
(#((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512)) #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512)) #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512)))
Failing lanes examples:
(0 0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 512))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$7 sym_bv$8)

invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
invoke-spec-lane with env: #(sym_bv$7 sym_bv$8)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$9 sym_bv$10)

invoke-spec with env: #(sym_bv$9 sym_bv$10)
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 496 sym_bv$9) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$9 (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$10 (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x0000ffff0000ffff0000ffff0000ffff0000ffffffffffff000000000000000000000000ffff0000ffffffff0000ffff0000ffff000000000000ffff00000000 512)
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Concrete counter examples:
(#((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512)) #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512)) #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (lit (bv #x0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f 512)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f 512))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$11 sym_bv$12)

invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
invoke-spec-lane with env: #(sym_bv$11 sym_bv$12)
verify-across-lanes returned #f ... 

Attempting to verify synthesized solution
Symbols: #(sym_bv$13 sym_bv$14)

invoke-spec with env: #(sym_bv$13 sym_bv$14)
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (concat (bvashr (extract 511 496 sym_bv$13) (extract ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...) ...)
Verification took 0 seconds

(model
 [sym_bv$13 (bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)]
 [sym_bv$14 (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)] ...)
Verification failed :(
#((bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
invoke-spec with env: #((bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
(bv #xc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Verification failed ...
	spec produced: (bv #xc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512 
	synthesized result produced: (bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) 512

invoke-spec with env: #((bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #xc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)
Difference  Predicate
'((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1))
differing-lanes
'(31)
synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
(vec-shr (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'uint16 512))
Spec result
(bv #x0000ffff0000ffff0000ffff0000ffff0000ffffffffffff000000000000000000000000ffff0000ffffffff0000ffff0000ffff000000000000ffff00000000 512)
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Concrete counter examples:
(#((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512)) #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512)) #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512)) #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) #((bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)))
Failing lanes examples:
(0 0 0 31 31)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #x5ab8da572e31b06f6199937c1a1cde022945889aec128198780a1ea35f69698d43ba5a62ee8f5111d5af88570cb9cc3f4a7cc32d7c11663f065ef44e351d1d63 512) (bv #x31b2e939c8052b4b519ba0b3170669ce2ce2c8eb24c276ae370254485f24d01816c45ef65d1febb3dd6d7577862fcd0c4ced2859660a22c692f85be37ab66551 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x0a5a857172f4e3f3b38960f9a5abf643832b99a364da3dc6448c9d99b75e50bb23819ef359a798a5a7266eadea7416b805aafe4ad689d1ccc241e4218882335a 512) (bv #xc0d705d3b296c1485c2eeadf6c6264e8fd8652312c598a4d23a9d08d417372153660412ff17fb7aae5fcaf6cdebd48d107bb02cdd7ad5f25e31b8912f0369c02 512))
Spec Produced:
(bv #x0000 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x80008000b00080008000800080008000800080008000800080008000800080008000800080008000800080008000bf00b00080007f0080008000800080008000 512) (bv #x000f000f000c000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f0008000c000f0008000f000f000f000f000f 512))
Spec Produced:
(bv #xffff 16)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #x4000 16)
Synthesize by lane...
Lane Index
31
invoke-spec-lane with env: #((bv #x80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512) (bv #x00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512))
Spec Produced:
(bv #xc000 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #rm: cannot remove '/tmp/base_8569_spec.JSON': No such file or directory
Pruning _mm512_cvtepi8_epi16 as it has an argument of size 256 which is smaller than 512
Pruning _mm512_broadcastw_epi16 as it has an argument of size 128 which is smaller than 512
Pruning _mm512_set1_epi16 as it has an argument of size 16 which is smaller than 512
Prunning Based of non-immediate usage pruned 3 instructions ... 
EARLY RETURN FROM REDUCE
Adding:  _mm512_avg_epu16 with score: 5 belonging to target agnostic class _mm256_avg_epu16
Adding:  _mm512_add_epi16 with score: 5 belonging to target agnostic class _mm256_add_epi8
==================================================
Grammar Number of Load DSL Clauses:	 5
Grammar Number of Shuffle DSL Clauses:	 6
Grammar Number of DSL Compute Clauses:	 2
x0000 16)) 512 16 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$15 sym_bv$16)

invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
invoke-spec-lane with env: #(sym_bv$15 sym_bv$16)
verify-across-lanes returned #t ... 

Test elapsed time: 
9
(vec-shr '(buf int16 512) '(buf uint16 512))
#(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)
Synthesis step completed!
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
get-expr-grammar with base_name: base_8569

base_8569_grammar.rkt
/tmp/base_8569_grammar.rkt
Writing [{ 
"name": "base_8569" , 
"semantics": [ "(extract bvadd sign-extend)"] , 
"input_shapes": [[1,32], [1,32]], 
"output_shape": [1 , 32], 
"input_precision": [16, 16], 
"output_precision": 16, 
"args": ["SYMBOLIC_BV_512", "SYMBOLIC_BV_512"], 
"spec_invokation": "",
"imms": [] 
}
] to file /tmp/base_8569_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8569_spec.JSON /tmp/base_8569_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_8569 ... 

Grammar:
#<procedure:base_8569>
(#(struct:reg (bv #x0 4)) #(struct:reg (bv #x1 4)))
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #((bv #xd045e30ce5cd322e237fdd2983f432de8d86337a813a646804d73f8973c8e68ac6da5f82037e604388dc8654b046f294d87a46e2ddab4d10ac2717f382806288 512) (bv #x2067d3149ad669e5f82358f90dff1dfb8960c5ddb3ead3f617769d60e2e7cc0fc57ee375f9920f9e94c4ffb8112f70e1ea1fdbb227006a42914ec42eda2da68f 512))
(vec-add (buffer #<procedure:buffer-fn> 'int16 512) (buffer #<procedure:buffer-fn> 'int16 512))
Spec result
(bv #xf0acb62080a39c131ba2362291f350d916e6f9573524385e1c4ddce956afb2998c5842f7fd106fe11da0860cc1756375c299229404abb7523d75dc215cad0917 512)
invoke-spec-lane with env: #((bv #xd045e30ce5cd322e237fdd2983f432de8d86337a813a646804d73f8973c8e68ac6da5f82037e604388dc8654b046f294d87a46e2ddab4d10ac2717f382806288 512) (bv #x2067d3149ad669e5f82358f90dff1dfb8960c5ddb3ead3f617769d60e2e7cc0fc57ee375f9920f9e94c4ffb8112f70e1ea1fdbb227006a42914ec42eda2da68f 512))
Concrete counter examples:
(#((bv #xd045e30ce5cd322e237fdd2983f432de8d86337a813a646804d73f8973c8e68ac6da5f82037e604388dc8654b046f294d87a46e2ddab4d10ac2717f382806288 512) (bv #x2067d3149ad669e5f82358f90dff1dfb8960c5ddb3ead3f617769d60e2e7cc0fc57ee375f9920f9e94c4ffb8112f70e1ea1fdbb227006a42914ec42eda2da68f 512)) #((bv #x2413c393569704369f79b67f4c279d0dd1710828c2e01a93ff90b030eefa8beaeaa6836b491a67b1aad773018b775f54057e3462e6f55a98e61328858d204e7a 512) (bv #x1b144f3ef5b3406f0be384f115880866241723180291be9336699bdb508d3c9bdd8d9334e7f3359e08239fb6120037a1a7daa98b82ce4df2380a4232ea8d3744 512)))
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #((bv #xd045e30ce5cd322e237fdd2983f432de8d86337a813a646804d73f8973c8e68ac6da5f82037e604388dc8654b046f294d87a46e2ddab4d10ac2717f382806288 512) (bv #x2067d3149ad669e5f82358f90dff1dfb8960c5ddb3ead3f617769d60e2e7cc0fc57ee375f9920f9e94c4ffb8112f70e1ea1fdbb227006a42914ec42eda2da68f 512))
Spec Produced:
(bv #x0917 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #((bv #x2413c393569704369f79b67f4c279d0dd1710828c2e01a93ff90b030eefa8beaeaa6836b491a67b1aad773018b775f54057e3462e6f55a98e61328858d204e7a 512) (bv #x1b144f3ef5b3406f0be384f115880866241723180291be9336699bdb508d3c9bdd8d9334e7f3359e08239fb6120037a1a7daa98b82ce4df2380a4232ea8d3744 512))
Spec Produced:
(bv #x85be 16)
Synthesize by lane...
Z3 Synthesized Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
#t
Is this boolector optimization case #f ?

Unchecked solution:
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Is concrete? #t

Is solution a union? #f

Symbols: #(sym_bv$17 sym_bv$18)

invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
invoke-spec-lane with env: #(sym_bv$17 sym_bv$18)
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(vec-add '(buf int16 512) '(buf int16 512))
#(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)
Synthesis step completed!
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_6399

base_6399_grammar.rkt
/tmp/base_6399_grammar.rkt
Writing [{ 
"name": "base_6399" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[8, 16]] 
}
] to file /tmp/base_6399_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_6399_spec.JSON /tmp/base_6399_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_6399 ... 

Grammar:
#<procedure:base_6399>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x0008 16) #t))
Spec result
(bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0008 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0008 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x0008 16) #t))
#(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008rm: cannot remove '/tmp/base_8933_spec.JSON': No such file or directory
EARLY RETURN FROM REDUCE
Adding:  _mm512_broadcastw_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
Adding:  _mm512_set1_epi16 with score: 3 belonging to target agnostic class _mm_set1_pi8
==================================================
Grammar Number of Load DSL Clauses:	 9
Grammar Number of Shuffle DSL Clauses:	 0
Grammar Number of DSL Compute Clauses:	 2
 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
get-expr-grammar with base_name: base_8933

base_8933_grammar.rkt
/tmp/base_8933_grammar.rkt
Writing [{ 
"name": "base_8933" , 
"semantics": [ "()"] , 
"input_shapes": [], 
"output_shape": [1 , 32], 
"input_precision": [], 
"output_precision": 16, 
"args": [], 
"spec_invokation": "",
"imms": [[4, 16]] 
}
] to file /tmp/base_8933_spec.JSON

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-synthesizer/dsl-ir/emit_grammar.py /tmp/base_8933_spec.JSON /tmp/base_8933_grammar.rkt 32 0
Generated Grammar File
Dynamically importing from base_8933 ... 

Grammar:
#<procedure:base_8933>
()
Beginning Synthesis
Synthesizing solution with depth 1, depth-limit 5, and cost-bound 40 ...

synthesize-sol-iterative
Garbage collected
invoke-spec with env: #()
(x32 (int-imm (bv #x0004 16) #f))
Spec result
(bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)
invoke-spec-lane with env: #()
Concrete counter examples:
(#() #())
Failing lanes examples:
(0 0)
*********** z3-optimize *****************
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0004 16)
Synthesize by lane...
Lane Index
0
invoke-spec-lane with env: #()
Spec Produced:
(bv #x0004 16)
Synthesize by lane...
Z3 Synthesized Solution
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
#t
Is this boolector optimization case #f ?

Unchecked solution:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Is concrete? #t

Is solution a union? #f

Symbols: #()

invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
invoke-spec-lane with env: #()
verify-across-lanes returned #t ... 

Test elapsed time: 
0
(x32 (int-imm (bv #x0004 16) #f))
#(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
Synthesis step completed!
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.11.rkt

Completed writing to file ...
Append [; hydride.node.11
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.11.rkt /tmp/test.ll
Storing synth log map synth_hash_11 to /tmp/hydride_hash_11.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_11 (hash 
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_11.rkt

Completed writing to file ...
Starting synthesis for expr: 11
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 22.925226seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 11

Optimized expression: (uint8x32)hydride.node.11((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_11 from hydride_hash_11.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.12
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.12.rkt

Completed writing to file ...
Append [; hydride.node.12
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.12.rkt /tmp/test.ll
Storing synth log map synth_hash_12 to /tmp/hydride_hash_12.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_12 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_12.rkt

Completed writing to file ...
Starting synthesis for expr: 12
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.622681seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 12

Optimized expression: (uint8x32)hydride.node.12((int16x32)cols[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_12 from hydride_hash_12.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.13
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.13.rkt

Completed writing to file ...
Append [; hydride.node.13
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.13.rkt /tmp/test.ll
Storing synth log map synth_hash_13 to /tmp/hydride_hash_13.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_13 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_13.rkt

Completed writing to file ...
Starting synthesis for expr: 13
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 7.996813seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 13

Optimized expression: (uint8x32)hydride.node.13((int16x32)cols[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_13 from hydride_hash_13.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.14.rkt

Completed writing to file ...
Append [; hydride.node.14
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.14.rkt /tmp/test.ll
Storing synth log map synth_hash_14 to /tmp/hydride_hash_14.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_14 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_14.rkt

Completed writing to file ...
Starting synthesis for expr: 14
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.365013seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 14

Optimized expression: (uint8x32)hydride.node.14((int16x32)cols[ramp(96, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_14 from hydride_hash_14.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.15.rkt

Completed writing to file ...
Append [; hydride.node.15
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.15.rkt /tmp/test.ll
Storing synth log map synth_hash_15 to /tmp/hydride_hash_15.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_15 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_15.rkt

Completed writing to file ...
Starting synthesis for expr: 15
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t266, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t267, 1, 16)] + (int16x16)rows[ramp(t268, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.829930seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -127, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -126, 1, 16)] + (int16x16)rows[ramp(t153 + -128, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 15

Optimized expression: (int16x16)hydride.node.15((int16x16)rows[ramp(t153 + -127, 1, 16)], (int16x16)rows[ramp(t153 + -126, 1, 16)], (int16x16)rows[ramp(t153 + -128, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_15 from hydride_hash_15.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.16
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.16.rkt

Completed writing to file ...
Append [; hydride.node.16
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.16.rkt /tmp/test.ll
Storing synth log map synth_hash_16 to /tmp/hydride_hash_16.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_16 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_16.rkt

Completed writing to file ...
Starting synthesis for expr: 16
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t269, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t270, 1, 16)] + (int16x16)rows[ramp(t271, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.260911seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -111, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -110, 1, 16)] + (int16x16)rows[ramp(t153 + -112, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 16

Optimized expression: (int16x16)hydride.node.16((int16x16)rows[ramp(t153 + -111, 1, 16)], (int16x16)rows[ramp(t153 + -110, 1, 16)], (int16x16)rows[ramp(t153 + -112, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_16 from hydride_hash_16.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.17
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.17.rkt

Completed writing to file ...
Append [; hydride.node.17
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.17.rkt /tmp/test.ll
Storing synth log map synth_hash_17 to /tmp/hydride_hash_17.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_17 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_17.rkt

Completed writing to file ...
Starting synthesis for expr: 17
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t272, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t273, 1, 16)] + (int16x16)rows[ramp(t274, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.070871seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -95, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -94, 1, 16)] + (int16x16)rows[ramp(t153 + -96, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 17

Optimized expression: (int16x16)hydride.node.17((int16x16)rows[ramp(t153 + -95, 1, 16)], (int16x16)rows[ramp(t153 + -94, 1, 16)], (int16x16)rows[ramp(t153 + -96, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_17 from hydride_hash_17.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.18
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.18.rkt

Completed writing to file ...
Append [; hydride.node.18
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.18.rkt /tmp/test.ll
Storing synth log map synth_hash_18 to /tmp/hydride_hash_18.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_18 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_18.rkt

Completed writing to file ...
Starting synthesis for expr: 18
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t275, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t276, 1, 16)] + (int16x16)rows[ramp(t277, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.263606seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -79, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -78, 1, 16)] + (int16x16)rows[ramp(t153 + -80, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 18

Optimized expression: (int16x16)hydride.node.18((int16x16)rows[ramp(t153 + -79, 1, 16)], (int16x16)rows[ramp(t153 + -78, 1, 16)], (int16x16)rows[ramp(t153 + -80, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_18 from hydride_hash_18.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.19
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.19.rkt

Completed writing to file ...
Append [; hydride.node.19
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.19.rkt /tmp/test.ll
Storing synth log map synth_hash_19 to /tmp/hydride_hash_19.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_19 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_19.rkt

Completed writing to file ...
Starting synthesis for expr: 19
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t278, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t279, 1, 16)] + (int16x16)rows[ramp(t280, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 7.891421seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -63, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -62, 1, 16)] + (int16x16)rows[ramp(t153 + -64, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 19

Optimized expression: (int16x16)hydride.node.19((int16x16)rows[ramp(t153 + -63, 1, 16)], (int16x16)rows[ramp(t153 + -62, 1, 16)], (int16x16)rows[ramp(t153 + -64, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_19 from hydride_hash_19.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.20
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.20.rkt

Completed writing to file ...
Append [; hydride.node.20
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.20.rkt /tmp/test.ll
Storing synth log map synth_hash_20 to /tmp/hydride_hash_20.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_20 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_20.rkt

Completed writing to file ...
Starting synthesis for expr: 20
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t281, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t282, 1, 16)] + (int16x16)rows[ramp(t283, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.163373seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -47, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -46, 1, 16)] + (int16x16)rows[ramp(t153 + -48, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 20

Optimized expression: (int16x16)hydride.node.20((int16x16)rows[ramp(t153 + -47, 1, 16)], (int16x16)rows[ramp(t153 + -46, 1, 16)], (int16x16)rows[ramp(t153 + -48, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_20 from hydride_hash_20.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.21
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.21.rkt

Completed writing to file ...
Append [; hydride.node.21
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.21.rkt /tmp/test.ll
Storing synth log map synth_hash_21 to /tmp/hydride_hash_21.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_21 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_21.rkt

Completed writing to file ...
Starting synthesis for expr: 21
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t284, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t285, 1, 16)] + (int16x16)rows[ramp(t286, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.157483seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -31, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -30, 1, 16)] + (int16x16)rows[ramp(t153 + -32, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 21

Optimized expression: (int16x16)hydride.node.21((int16x16)rows[ramp(t153 + -31, 1, 16)], (int16x16)rows[ramp(t153 + -30, 1, 16)], (int16x16)rows[ramp(t153 + -32, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x02 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x01 8)) (#(struct:buffer #<procedure:buffer-fn> int16 256) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_21 from hydride_hash_21.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shl #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f))) #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:x16 #(struct:int-imm (bv #x0001 16) #f)))
=======================================
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'uint16 256))
Hashed expression
(vec-shl '(buf int16 256) '(buf uint16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x0 4))
 256
 16
 16)
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16)
Cost
11
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x16 (int-imm (bv #x0001 16) #f))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(x16 (int-imm (bv #x0001 16) #f))
Hashed expression
(x16 (int-imm (bv #x0001 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
(_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0)
Cost
4
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x16 (int-imm (bv #x0001 16) #f))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (lit
  (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
 256
 16
 32
 0)
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0))
========================================
Original Halide Sub-Expression:
(vec-shl
 (buffer #<procedure:buffer-fn> 'int16 256)
 (x16 (int-imm (bv #x0001 16) #f)))
Sub-expression Synthesis completed:
(_mm512_sllv_epi64_dsl
 (lit (bv #x0010 16))
 (_mm_cvtepi64_epi32_dsl
  (lit
   (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
  256
  16
  32
  0)
 (lit
  (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
 (reg (bv #x00 8))
 256
 16
 16)
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256) #(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Vectorization factor for sub expression 16

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Hashed expression
(vec-add '(buf int16 256) '(buf int16 256))
Leaves are bitvectors of sizes:
(256 256)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x01 8))
========================================
here
(#(struct:buffer #<procedure:buffer-fn> int16 256))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 256)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 256)
Sub-expression Synthesis completed:
(reg (bv #x02 8))
========================================
Synthesized-leaves
(#(struct:reg (bv #x01 8)) #(struct:reg (bv #x02 8)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 256)
 (buffer #<procedure:buffer-fn> 'int16 256))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
========================================
Synthesized-leaves
(#(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x00 8)) 256 16 16) #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x02 8)) #(struct:reg (bv #x01 8)) 256 16))
========================================
Original Halide Sub-Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (_mm256_add_epi8_dsl (reg (bv #x02 8)) (reg (bv #x01 8)) 256 16)
 (_mm512_sllv_epi64_dsl
  (lit (bv #x0010 16))
  (_mm_cvtepi64_epi32_dsl
   (lit
    (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512))
   256
   16
   32
   0)
  (lit
   (bv #x0000000000000000000000000000000000000000000000000000000000000000 256))
  (reg (bv #x00 8))
  256
  16
  16)
 256
 16)
========================================
========================================
Original Halide Expression:
(vec-add
 (vec-shl
  (buffer #<procedure:buffer-fn> 'int16 256)
  (x16 (int-imm (bv #x0001 16) #f)))
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 256)
  (buffer #<procedure:buffer-fn> 'int16 256)))
Synthesis completed:
Legalize Expression Swizzle!
(hash
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x02 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x01 8)
 (buffer #<procedure:buffer-fn> 'int16 256)
 (bv #x00 8))
========================================
; (reg (bv #x02 8)) <16 x i16>
; (reg (bv #x01 8)) <16 x i16>
; (reg (bv #x00 8)) <16 x i16>

(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

Writing [; hydride.node.22
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride.node.22.rkt

Completed writing to file ...
Append [; hydride.node.22
; (reg 2) <16 x i16>
; (reg 1) <16 x i16>
; (reg 0) <16 x i16>


(_mm256_add_epi8_dsl 
(_mm256_add_epi8_dsl 
(reg 2)  
(reg 1)  256  16  );<16 x i16>
  
(_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) ; <16 x i16>
  (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) ; <16 x i16>
  
(reg 0)  256  16  16  );<16 x i16>
  256  16  );<16 x i16>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.22.rkt /tmp/test.ll
Storing synth log map synth_hash_22 to /tmp/hydride_hash_22.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_22 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_22.rkt

Completed writing to file ...
Starting synthesis for expr: 22
Expression before lower intrinsic: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Lower Intrinsic on call: shift_left
Expression before InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Expression after InlineLets: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Expression before abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Input expression to synthesize: ((int16x16)shift_left((int16x16)rows[ramp(t287, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t288, 1, 16)] + (int16x16)rows[ramp(t289, 1, 16)]))
Synthesis completed with return code:	0
Synthesis took 8.425795seconds ...
Expression after replacae abstraction: ((int16x16)shift_left((int16x16)rows[ramp(t153 + -15, 1, 16)], x16((uint16)1)) + ((int16x16)rows[ramp(t153 + -14, 1, 16)] + (int16x16)rows[ramp(t153 + -16, 1, 16)]))
Generating Call with type: int16x16 and lanes 16
Ending synthesis for expr: 22

Optimized expression: (int16x16)hydride.node.22((int16x16)rows[ramp(t153 + -15, 1, 16)], (int16x16)rows[ramp(t153 + -14, 1, 16)], (int16x16)rows[ramp(t153 + -16, 1, 16)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_22 from hydride_hash_22.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.23
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.23.rkt

Completed writing to file ...
Append [; hydride.node.23
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.23.rkt /tmp/test.ll
Storing synth log map synth_hash_23 to /tmp/hydride_hash_23.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_23 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_23.rkt

Completed writing to file ...
Starting synthesis for expr: 23
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.074533seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(0, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 23

Optimized expression: (uint8x32)hydride.node.23((int16x32)cols[ramp(0, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_23 from hydride_hash_23.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.24
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.24.rkt

Completed writing to file ...
Append [; hydride.node.24
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.24.rkt /tmp/test.ll
Storing synth log map synth_hash_24 to /tmp/hydride_hash_24.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_24 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_24.rkt

Completed writing to file ...
Starting synthesis for expr: 24
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.416131seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(32, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 24

Optimized expression: (uint8x32)hydride.node.24((int16x32)cols[ramp(32, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_24 from hydride_hash_24.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.25
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.25.rkt

Completed writing to file ...
Append [; hydride.node.25
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.25.rkt /tmp/test.ll
Storing synth log map synth_hash_25 to /tmp/hydride_hash_25.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_25 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_25.rkt

Completed writing to file ...
Starting synthesis for expr: 25
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.039728seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(64, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 25

Optimized expression: (uint8x32)hydride.node.25((int16x32)cols[ramp(64, 1, 32)])
#hash((#(struct:buffer #<procedure:buffer-fn> int16 512) . (bv #x00 8)))
Found previous hash!

Importing synth log map synth_hash_25 from hydride_hash_25.rkt ... 

#hash((#(struct:vec-add (buf int16 256) (buf int16 256)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 256 16) 0)) (#(struct:vec-add (buf int16 512) (buf int16 512)) . #(#t #(struct:_mm256_add_epi8_dsl #(struct:reg (bv #x1 4)) #(struct:reg (bv #x0 4)) 512 16) 0)) (#(struct:x16 #(struct:int-imm (bv #x0001 16) #f)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)) (#(struct:vec-shr (buf int16 512) (buf uint16 512)) . #(#t #(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #xffff 16)) #(struct:reg (bv #x0 4)) #(struct:lit (bv #x0000 16)) 512 16 16) 0)) (#(struct:vec-shl (buf int16 256) (buf uint16 256)) . #(#t #(struct:_mm512_sllv_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:reg (bv #x1 4)) #(struct:lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) #(struct:reg (bv #x0 4)) 256 16 16) 0)) (#(struct:uint8x32 (buf int16 512)) . #(#t #(struct:_mm_cvtepi64_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16 0) 0)) (#(struct:int16x32 (buf uint8 256)) . #(#t #(struct:_mm256_cvtepu16_epi32_dsl #(struct:reg (bv #x0 4)) 256 8 16) 0)) (#(struct:x32 #(struct:int-imm (bv #x0004 16) #f)) . #(#t #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)) (#(struct:x32 #(struct:int-imm (bv #x0008 16) #t)) . #(#t #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
here
(#(struct:vec-shr #(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f))))
=======================================
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(uint8x32 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(uint8x32 '(buf int16 512))
Leaves are bitvectors of sizes:
(512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
(_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0)
Cost
4
here
(#(struct:vec-add #(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t))) #(struct:x32 #(struct:int-imm (bv #x0004 16) #f)))
=======================================
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-shr
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'uint16 512))
Hashed expression
(vec-shr '(buf int16 512) '(buf uint16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (reg (bv #x1 4))
 (lit (bv #xffff 16))
 (reg (bv #x0 4))
 (lit (bv #x0000 16))
 512
 16
 16)
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16)
Cost
16
here
(#(struct:buffer #<procedure:buffer-fn> int16 512) #(struct:x32 #(struct:int-imm (bv #x0008 16) #t)))
=======================================
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (buffer #<procedure:buffer-fn> 'int16 512))
Hashed expression
(vec-add '(buf int16 512) '(buf int16 512))
Leaves are bitvectors of sizes:
(512 512)
Equivalent expression synthesized before, returned stored solution
Solution
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
(_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16)
Cost
4
here
(#(struct:buffer #<procedure:buffer-fn> int16 512))
=======================================
Leaf buffer:
(buffer #<procedure:buffer-fn> 'int16 512)
========================================
Original Halide Sub-Expression:
(buffer #<procedure:buffer-fn> 'int16 512)
Sub-expression Synthesis completed:
(reg (bv #x00 8))
========================================
here
()
=======================================
(x32 (int-imm (bv #x0008 16) #t))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0008 16) #t))
Hashed expression
(x32 (int-imm (bv #x0008 16) #t))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
(lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0008 16) #t))
Sub-expression Synthesis completed:
(lit
 (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
========================================
Synthesized-leaves
(#(struct:reg (bv #x00 8)) #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)))
========================================
Original Halide Sub-Expression:
(vec-add
 (buffer #<procedure:buffer-fn> 'int16 512)
 (x32 (int-imm (bv #x0008 16) #t)))
Sub-expression Synthesis completed:
(_mm256_add_epi8_dsl
 (lit
  (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
 (reg (bv #x00 8))
 512
 16)
========================================
here
()
=======================================
(x32 (int-imm (bv #x0004 16) #f))
Vectorization factor for sub expression 32

Synthesizing sub-expression
(x32 (int-imm (bv #x0004 16) #f))
Hashed expression
(x32 (int-imm (bv #x0004 16) #f))
Leaves are bitvectors of sizes:
()
Equivalent expression synthesized before, returned stored solution
Solution
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
(lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
Cost
1
Synthesized-leaves
()
========================================
Original Halide Sub-Expression:
(x32 (int-imm (bv #x0004 16) #f))
Sub-expression Synthesis completed:
(lit
 (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
========================================
Synthesized-leaves
(#(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)))
========================================
Original Halide Sub-Expression:
(vec-shr
 (vec-add
  (buffer #<procedure:buffer-fn> 'int16 512)
  (x32 (int-imm (bv #x0008 16) #t)))
 (x32 (int-imm (bv #x0004 16) #f)))
Sub-expression Synthesis completed:
(_mm512_srav_epi64_dsl
 (lit (bv #x0010 16))
 (lit
  (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
 (lit (bv #xffff 16))
 (_mm256_add_epi8_dsl
  (lit
   (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
  (reg (bv #x00 8))
  512
  16)
 (lit (bv #x0000 16))
 512
 16
 16)
========================================
Synthesized-leaves
(#(struct:_mm512_srav_epi64_dsl #(struct:lit (bv #x0010 16)) #(struct:lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) #(struct:lit (bv #xffff 16)) #(struct:_mm256_add_epi8_dsl #(struct:lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) #(struct:reg (bv #x00 8)) 512 16) #(struct:lit (bv #x0000 16)) 512 16 16))
========================================
Original Halide Sub-Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Sub-expression Synthesis completed:
(_mm_cvtepi64_epi32_dsl
 (_mm512_srav_epi64_dsl
  (lit (bv #x0010 16))
  (lit
   (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512))
  (lit (bv #xffff 16))
  (_mm256_add_epi8_dsl
   (lit
    (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512))
   (reg (bv #x00 8))
   512
   16)
  (lit (bv #x0000 16))
  512
  16
  16)
 256
 8
 16
 0)
========================================
========================================
Original Halide Expression:
(uint8x32
 (vec-shr
  (vec-add
   (buffer #<procedure:buffer-fn> 'int16 512)
   (x32 (int-imm (bv #x0008 16) #t)))
  (x32 (int-imm (bv #x0004 16) #f))))
Synthesis completed:
Legalize Expression Swizzle!
(hash (buffer #<procedure:buffer-fn> 'int16 512) (bv #x00 8))
========================================
; (reg (bv #x00 8)) <32 x i16>

(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

Writing [; hydride.node.26
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride.node.26.rkt

Completed writing to file ...
Append [; hydride.node.26
; (reg 0) <32 x i16>


(_mm_cvtepi64_epi32_dsl 
(_mm512_srav_epi64_dsl (lit (bv #x0010 16)) ; <1 x i16>
  (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) ; <32 x i16>
  (lit (bv #xffff 16)) ; <1 x i16>
  
(_mm256_add_epi8_dsl (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) ; <32 x i16>
  
(reg 0)  512  16  );<32 x i16>
  (lit (bv #x0000 16)) ; <1 x i16>
  512  16  16  );<32 x i16>
  256  8  16  0  );<32 x i8>

] to file /tmp/hydride_exprs.rkt

Completed writing to file ...
python3 /home/arnoor2/Racket/TensorSynth/Rosette-experiments//code-generator//<path>/<to>/<script>.py /tmp/hydride.node.26.rkt /tmp/test.ll
Storing synth log map synth_hash_26 to /tmp/hydride_hash_26.rkt ... 

Writing [#lang rosette
  (require rosette/lib/synthax)
  (require rosette/lib/angelic)
  (require rosette/lib/destruct)
  (require rosette/solver/smt/boolector)
  (require hydride)



  (provide (all-defined-out))
  
(define synth_hash_26 (hash 
(vec-add '(buf int16 256) '(buf int16 256)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 0)
(vec-add '(buf int16 512) '(buf int16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(vec-shr '(buf int16 512) '(buf uint16 512)) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 0)
(vec-shl '(buf int16 256) '(buf uint16 256)) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint8x32 '(buf int16 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 8 16 0) 0)
(int16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 0)
(x32 (int-imm (bv #x0008 16) #t)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)))
] to file /tmp/hydride_hash_26.rkt

Completed writing to file ...
Starting synthesis for expr: 26
Expression before lower intrinsic: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Lower Intrinsic on call: shift_right
Expression before InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression after InlineLets: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Expression before abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Input expression to synthesize: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Cast operation into: uint8x32
Synthesis completed with return code:	0
Synthesis took 8.591771seconds ...
Expression after replacae abstraction: uint8x32((int16x32)shift_right((int16x32)cols[ramp(96, 1, 32)] + x32((int16)8), x32((uint16)4)))
Generating Call with type: uint8x32 and lanes 32
Ending synthesis for expr: 26

Optimized expression: (uint8x32)hydride.node.26((int16x32)cols[ramp(96, 1, 32)])
Hydride Function: declare <32 x i16> @hydride.node.0(<32 x i8>)

Generating Hydride Call:   %803 = call <32 x i16> @hydride.node.0(<32 x i8> %802) #17
Hydride Function: declare <32 x i16> @hydride.node.1(<32 x i8>)

Generating Hydride Call:   %828 = call <32 x i16> @hydride.node.1(<32 x i8> %827) #17
Hydride Function: declare <16 x i16> @hydride.node.2(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %921 = call <16 x i16> @hydride.node.2(<16 x i16> %898, <16 x i16> %909, <16 x i16> %920) #17
Hydride Function: declare <16 x i16> @hydride.node.3(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %948 = call <16 x i16> @hydride.node.3(<16 x i16> %937, <16 x i16> %942, <16 x i16> %947) #17
Hydride Function: declare <16 x i16> @hydride.node.4(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %965 = call <16 x i16> @hydride.node.4(<16 x i16> %954, <16 x i16> %959, <16 x i16> %964) #17
Hydride Function: declare <16 x i16> @hydride.node.5(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %983 = call <16 x i16> @hydride.node.5(<16 x i16> %972, <16 x i16> %977, <16 x i16> %982) #17
Hydride Function: declare <16 x i16> @hydride.node.6(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1001 = call <16 x i16> @hydride.node.6(<16 x i16> %990, <16 x i16> %995, <16 x i16> %1000) #17
Hydride Function: declare <16 x i16> @hydride.node.7(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1019 = call <16 x i16> @hydride.node.7(<16 x i16> %1008, <16 x i16> %1013, <16 x i16> %1018) #17
Hydride Function: declare <16 x i16> @hydride.node.8(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1037 = call <16 x i16> @hydride.node.8(<16 x i16> %1026, <16 x i16> %1031, <16 x i16> %1036) #17
Hydride Function: declare <16 x i16> @hydride.node.9(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1055 = call <16 x i16> @hydride.node.9(<16 x i16> %1044, <16 x i16> %1049, <16 x i16> %1054) #17
Hydride Function: declare <16 x i16> @hydride.node.10(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1073 = call <16 x i16> @hydride.node.10(<16 x i16> %1062, <16 x i16> %1067, <16 x i16> %1072) #17
Hydride Function: declare <32 x i8> @hydride.node.11(<32 x i16>)

Generating Hydride Call:   %1078 = call <32 x i8> @hydride.node.11(<32 x i16> %1077) #17
Hydride Function: declare <32 x i8> @hydride.node.12(<32 x i16>)

Generating Hydride Call:   %1088 = call <32 x i8> @hydride.node.12(<32 x i16> %1087) #17
Hydride Function: declare <32 x i8> @hydride.node.13(<32 x i16>)

Generating Hydride Call:   %1099 = call <32 x i8> @hydride.node.13(<32 x i16> %1098) #17
Hydride Function: declare <32 x i8> @hydride.node.14(<32 x i16>)

Generating Hydride Call:   %1110 = call <32 x i8> @hydride.node.14(<32 x i16> %1109) #17
Hydride Function: declare <16 x i16> @hydride.node.15(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1140 = call <16 x i16> @hydride.node.15(<16 x i16> %1129, <16 x i16> %1134, <16 x i16> %1139) #17
Hydride Function: declare <16 x i16> @hydride.node.16(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1157 = call <16 x i16> @hydride.node.16(<16 x i16> %1146, <16 x i16> %1151, <16 x i16> %1156) #17
Hydride Function: declare <16 x i16> @hydride.node.17(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1175 = call <16 x i16> @hydride.node.17(<16 x i16> %1164, <16 x i16> %1169, <16 x i16> %1174) #17
Hydride Function: declare <16 x i16> @hydride.node.18(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1193 = call <16 x i16> @hydride.node.18(<16 x i16> %1182, <16 x i16> %1187, <16 x i16> %1192) #17
Hydride Function: declare <16 x i16> @hydride.node.19(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1211 = call <16 x i16> @hydride.node.19(<16 x i16> %1200, <16 x i16> %1205, <16 x i16> %1210) #17
Hydride Function: declare <16 x i16> @hydride.node.20(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1229 = call <16 x i16> @hydride.node.20(<16 x i16> %1218, <16 x i16> %1223, <16 x i16> %1228) #17
Hydride Function: declare <16 x i16> @hydride.node.21(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1247 = call <16 x i16> @hydride.node.21(<16 x i16> %1236, <16 x i16> %1241, <16 x i16> %1246) #17
Hydride Function: declare <16 x i16> @hydride.node.22(<16 x i16>, <16 x i16>, <16 x i16>)

Generating Hydride Call:   %1265 = call <16 x i16> @hydride.node.22(<16 x i16> %1254, <16 x i16> %1259, <16 x i16> %1264) #17
Hydride Function: declare <32 x i8> @hydride.node.23(<32 x i16>)

Generating Hydride Call:   %1270 = call <32 x i8> @hydride.node.23(<32 x i16> %1269) #17
Hydride Function: declare <32 x i8> @hydride.node.24(<32 x i16>)

Generating Hydride Call:   %1278 = call <32 x i8> @hydride.node.24(<32 x i16> %1277) #17
Hydride Function: declare <32 x i8> @hydride.node.25(<32 x i16>)

Generating Hydride Call:   %1286 = call <32 x i8> @hydride.node.25(<32 x i16> %1285) #17
Hydride Function: declare <32 x i8> @hydride.node.26(<32 x i16>)

Generating Hydride Call:   %1294 = call <32 x i8> @hydride.node.26(<32 x i16> %1293) #17
Hydride Optimize X86
warning: Linking two modules of different data layouts: '/tmp/hydride.ll' is '' whereas 'gaussian3x3' is 'e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128'

Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_host
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: _halide_buffer_get_min
Lower Intrinsic on call: _halide_buffer_get_extent
Lower Intrinsic on call: _halide_buffer_get_stride
Lower Intrinsic on call: make_struct
Lower Intrinsic on call: halide_do_par_for
Linking Hydride module!
